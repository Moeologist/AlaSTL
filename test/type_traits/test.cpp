#define ALA_ENABLE_TYPE_TRAITS_BIF 0
#include "ala/type_traits.h"
#include <type_traits>
#include <vector>
#include <list>
#include <iostream>
#include "macro.h"
#include "type.h"
#include <map>
#include <utility>

int main() {
static_assert(ala:: is_constructible < void >::value == std:: is_constructible < void >::value, "");
static_assert(ala:: is_constructible < void const>::value == std:: is_constructible < void const>::value, "");
static_assert(ala:: is_constructible < void volatile>::value == std:: is_constructible < void volatile>::value, "");
static_assert(ala:: is_constructible < void const volatile>::value == std:: is_constructible < void const volatile>::value, "");
static_assert(ala:: is_constructible < void *>::value == std:: is_constructible < void *>::value, "");
static_assert(ala:: is_constructible < void const*>::value == std:: is_constructible < void const*>::value, "");
static_assert(ala:: is_constructible < void volatile*>::value == std:: is_constructible < void volatile*>::value, "");
static_assert(ala:: is_constructible < void const volatile*>::value == std:: is_constructible < void const volatile*>::value, "");
static_assert(ala:: is_constructible < char >::value == std:: is_constructible < char >::value, "");
static_assert(ala:: is_constructible < char const>::value == std:: is_constructible < char const>::value, "");
static_assert(ala:: is_constructible < char volatile>::value == std:: is_constructible < char volatile>::value, "");
static_assert(ala:: is_constructible < char const volatile>::value == std:: is_constructible < char const volatile>::value, "");
static_assert(ala:: is_constructible < char *>::value == std:: is_constructible < char *>::value, "");
static_assert(ala:: is_constructible < char const*>::value == std:: is_constructible < char const*>::value, "");
static_assert(ala:: is_constructible < char volatile*>::value == std:: is_constructible < char volatile*>::value, "");
static_assert(ala:: is_constructible < char const volatile*>::value == std:: is_constructible < char const volatile*>::value, "");
static_assert(ala:: is_constructible < char &>::value == std:: is_constructible < char &>::value, "");
static_assert(ala:: is_constructible < char const&>::value == std:: is_constructible < char const&>::value, "");
static_assert(ala:: is_constructible < char volatile&>::value == std:: is_constructible < char volatile&>::value, "");
static_assert(ala:: is_constructible < char const volatile&>::value == std:: is_constructible < char const volatile&>::value, "");
static_assert(ala:: is_constructible < char &&>::value == std:: is_constructible < char &&>::value, "");
static_assert(ala:: is_constructible < char const&&>::value == std:: is_constructible < char const&&>::value, "");
static_assert(ala:: is_constructible < char volatile&&>::value == std:: is_constructible < char volatile&&>::value, "");
static_assert(ala:: is_constructible < char const volatile&&>::value == std:: is_constructible < char const volatile&&>::value, "");
static_assert(ala:: is_constructible < char [8]>::value == std:: is_constructible < char [8]>::value, "");
static_assert(ala:: is_constructible < char const [8]>::value == std:: is_constructible < char const [8]>::value, "");
static_assert(ala:: is_constructible < char volatile [8]>::value == std:: is_constructible < char volatile [8]>::value, "");
static_assert(ala:: is_constructible < char const volatile [8]>::value == std:: is_constructible < char const volatile [8]>::value, "");
static_assert(ala:: is_constructible < int >::value == std:: is_constructible < int >::value, "");
static_assert(ala:: is_constructible < int const>::value == std:: is_constructible < int const>::value, "");
static_assert(ala:: is_constructible < int volatile>::value == std:: is_constructible < int volatile>::value, "");
static_assert(ala:: is_constructible < int const volatile>::value == std:: is_constructible < int const volatile>::value, "");
static_assert(ala:: is_constructible < int *>::value == std:: is_constructible < int *>::value, "");
static_assert(ala:: is_constructible < int const*>::value == std:: is_constructible < int const*>::value, "");
static_assert(ala:: is_constructible < int volatile*>::value == std:: is_constructible < int volatile*>::value, "");
static_assert(ala:: is_constructible < int const volatile*>::value == std:: is_constructible < int const volatile*>::value, "");
static_assert(ala:: is_constructible < int &>::value == std:: is_constructible < int &>::value, "");
static_assert(ala:: is_constructible < int const&>::value == std:: is_constructible < int const&>::value, "");
static_assert(ala:: is_constructible < int volatile&>::value == std:: is_constructible < int volatile&>::value, "");
static_assert(ala:: is_constructible < int const volatile&>::value == std:: is_constructible < int const volatile&>::value, "");
static_assert(ala:: is_constructible < int &&>::value == std:: is_constructible < int &&>::value, "");
static_assert(ala:: is_constructible < int const&&>::value == std:: is_constructible < int const&&>::value, "");
static_assert(ala:: is_constructible < int volatile&&>::value == std:: is_constructible < int volatile&&>::value, "");
static_assert(ala:: is_constructible < int const volatile&&>::value == std:: is_constructible < int const volatile&&>::value, "");
static_assert(ala:: is_constructible < int [8]>::value == std:: is_constructible < int [8]>::value, "");
static_assert(ala:: is_constructible < int const [8]>::value == std:: is_constructible < int const [8]>::value, "");
static_assert(ala:: is_constructible < int volatile [8]>::value == std:: is_constructible < int volatile [8]>::value, "");
static_assert(ala:: is_constructible < int const volatile [8]>::value == std:: is_constructible < int const volatile [8]>::value, "");
static_assert(ala:: is_constructible < long >::value == std:: is_constructible < long >::value, "");
static_assert(ala:: is_constructible < long const>::value == std:: is_constructible < long const>::value, "");
static_assert(ala:: is_constructible < long volatile>::value == std:: is_constructible < long volatile>::value, "");
static_assert(ala:: is_constructible < long const volatile>::value == std:: is_constructible < long const volatile>::value, "");
static_assert(ala:: is_constructible < long *>::value == std:: is_constructible < long *>::value, "");
static_assert(ala:: is_constructible < long const*>::value == std:: is_constructible < long const*>::value, "");
static_assert(ala:: is_constructible < long volatile*>::value == std:: is_constructible < long volatile*>::value, "");
static_assert(ala:: is_constructible < long const volatile*>::value == std:: is_constructible < long const volatile*>::value, "");
static_assert(ala:: is_constructible < long &>::value == std:: is_constructible < long &>::value, "");
static_assert(ala:: is_constructible < long const&>::value == std:: is_constructible < long const&>::value, "");
static_assert(ala:: is_constructible < long volatile&>::value == std:: is_constructible < long volatile&>::value, "");
static_assert(ala:: is_constructible < long const volatile&>::value == std:: is_constructible < long const volatile&>::value, "");
static_assert(ala:: is_constructible < long &&>::value == std:: is_constructible < long &&>::value, "");
static_assert(ala:: is_constructible < long const&&>::value == std:: is_constructible < long const&&>::value, "");
static_assert(ala:: is_constructible < long volatile&&>::value == std:: is_constructible < long volatile&&>::value, "");
static_assert(ala:: is_constructible < long const volatile&&>::value == std:: is_constructible < long const volatile&&>::value, "");
static_assert(ala:: is_constructible < long [8]>::value == std:: is_constructible < long [8]>::value, "");
static_assert(ala:: is_constructible < long const [8]>::value == std:: is_constructible < long const [8]>::value, "");
static_assert(ala:: is_constructible < long volatile [8]>::value == std:: is_constructible < long volatile [8]>::value, "");
static_assert(ala:: is_constructible < long const volatile [8]>::value == std:: is_constructible < long const volatile [8]>::value, "");
static_assert(ala:: is_constructible < long long >::value == std:: is_constructible < long long >::value, "");
static_assert(ala:: is_constructible < long long const>::value == std:: is_constructible < long long const>::value, "");
static_assert(ala:: is_constructible < long long volatile>::value == std:: is_constructible < long long volatile>::value, "");
static_assert(ala:: is_constructible < long long const volatile>::value == std:: is_constructible < long long const volatile>::value, "");
static_assert(ala:: is_constructible < long long *>::value == std:: is_constructible < long long *>::value, "");
static_assert(ala:: is_constructible < long long const*>::value == std:: is_constructible < long long const*>::value, "");
static_assert(ala:: is_constructible < long long volatile*>::value == std:: is_constructible < long long volatile*>::value, "");
static_assert(ala:: is_constructible < long long const volatile*>::value == std:: is_constructible < long long const volatile*>::value, "");
static_assert(ala:: is_constructible < long long &>::value == std:: is_constructible < long long &>::value, "");
static_assert(ala:: is_constructible < long long const&>::value == std:: is_constructible < long long const&>::value, "");
static_assert(ala:: is_constructible < long long volatile&>::value == std:: is_constructible < long long volatile&>::value, "");
static_assert(ala:: is_constructible < long long const volatile&>::value == std:: is_constructible < long long const volatile&>::value, "");
static_assert(ala:: is_constructible < long long &&>::value == std:: is_constructible < long long &&>::value, "");
static_assert(ala:: is_constructible < long long const&&>::value == std:: is_constructible < long long const&&>::value, "");
static_assert(ala:: is_constructible < long long volatile&&>::value == std:: is_constructible < long long volatile&&>::value, "");
static_assert(ala:: is_constructible < long long const volatile&&>::value == std:: is_constructible < long long const volatile&&>::value, "");
static_assert(ala:: is_constructible < long long [8]>::value == std:: is_constructible < long long [8]>::value, "");
static_assert(ala:: is_constructible < long long const [8]>::value == std:: is_constructible < long long const [8]>::value, "");
static_assert(ala:: is_constructible < long long volatile [8]>::value == std:: is_constructible < long long volatile [8]>::value, "");
static_assert(ala:: is_constructible < long long const volatile [8]>::value == std:: is_constructible < long long const volatile [8]>::value, "");
static_assert(ala:: is_constructible < float >::value == std:: is_constructible < float >::value, "");
static_assert(ala:: is_constructible < float const>::value == std:: is_constructible < float const>::value, "");
static_assert(ala:: is_constructible < float volatile>::value == std:: is_constructible < float volatile>::value, "");
static_assert(ala:: is_constructible < float const volatile>::value == std:: is_constructible < float const volatile>::value, "");
static_assert(ala:: is_constructible < float *>::value == std:: is_constructible < float *>::value, "");
static_assert(ala:: is_constructible < float const*>::value == std:: is_constructible < float const*>::value, "");
static_assert(ala:: is_constructible < float volatile*>::value == std:: is_constructible < float volatile*>::value, "");
static_assert(ala:: is_constructible < float const volatile*>::value == std:: is_constructible < float const volatile*>::value, "");
static_assert(ala:: is_constructible < float &>::value == std:: is_constructible < float &>::value, "");
static_assert(ala:: is_constructible < float const&>::value == std:: is_constructible < float const&>::value, "");
static_assert(ala:: is_constructible < float volatile&>::value == std:: is_constructible < float volatile&>::value, "");
static_assert(ala:: is_constructible < float const volatile&>::value == std:: is_constructible < float const volatile&>::value, "");
static_assert(ala:: is_constructible < float &&>::value == std:: is_constructible < float &&>::value, "");
static_assert(ala:: is_constructible < float const&&>::value == std:: is_constructible < float const&&>::value, "");
static_assert(ala:: is_constructible < float volatile&&>::value == std:: is_constructible < float volatile&&>::value, "");
static_assert(ala:: is_constructible < float const volatile&&>::value == std:: is_constructible < float const volatile&&>::value, "");
static_assert(ala:: is_constructible < float [8]>::value == std:: is_constructible < float [8]>::value, "");
static_assert(ala:: is_constructible < float const [8]>::value == std:: is_constructible < float const [8]>::value, "");
static_assert(ala:: is_constructible < float volatile [8]>::value == std:: is_constructible < float volatile [8]>::value, "");
static_assert(ala:: is_constructible < float const volatile [8]>::value == std:: is_constructible < float const volatile [8]>::value, "");
static_assert(ala:: is_constructible < double >::value == std:: is_constructible < double >::value, "");
static_assert(ala:: is_constructible < double const>::value == std:: is_constructible < double const>::value, "");
static_assert(ala:: is_constructible < double volatile>::value == std:: is_constructible < double volatile>::value, "");
static_assert(ala:: is_constructible < double const volatile>::value == std:: is_constructible < double const volatile>::value, "");
static_assert(ala:: is_constructible < double *>::value == std:: is_constructible < double *>::value, "");
static_assert(ala:: is_constructible < double const*>::value == std:: is_constructible < double const*>::value, "");
static_assert(ala:: is_constructible < double volatile*>::value == std:: is_constructible < double volatile*>::value, "");
static_assert(ala:: is_constructible < double const volatile*>::value == std:: is_constructible < double const volatile*>::value, "");
static_assert(ala:: is_constructible < double &>::value == std:: is_constructible < double &>::value, "");
static_assert(ala:: is_constructible < double const&>::value == std:: is_constructible < double const&>::value, "");
static_assert(ala:: is_constructible < double volatile&>::value == std:: is_constructible < double volatile&>::value, "");
static_assert(ala:: is_constructible < double const volatile&>::value == std:: is_constructible < double const volatile&>::value, "");
static_assert(ala:: is_constructible < double &&>::value == std:: is_constructible < double &&>::value, "");
static_assert(ala:: is_constructible < double const&&>::value == std:: is_constructible < double const&&>::value, "");
static_assert(ala:: is_constructible < double volatile&&>::value == std:: is_constructible < double volatile&&>::value, "");
static_assert(ala:: is_constructible < double const volatile&&>::value == std:: is_constructible < double const volatile&&>::value, "");
static_assert(ala:: is_constructible < double [8]>::value == std:: is_constructible < double [8]>::value, "");
static_assert(ala:: is_constructible < double const [8]>::value == std:: is_constructible < double const [8]>::value, "");
static_assert(ala:: is_constructible < double volatile [8]>::value == std:: is_constructible < double volatile [8]>::value, "");
static_assert(ala:: is_constructible < double const volatile [8]>::value == std:: is_constructible < double const volatile [8]>::value, "");
static_assert(ala:: is_constructible < long double >::value == std:: is_constructible < long double >::value, "");
static_assert(ala:: is_constructible < long double const>::value == std:: is_constructible < long double const>::value, "");
static_assert(ala:: is_constructible < long double volatile>::value == std:: is_constructible < long double volatile>::value, "");
static_assert(ala:: is_constructible < long double const volatile>::value == std:: is_constructible < long double const volatile>::value, "");
static_assert(ala:: is_constructible < long double *>::value == std:: is_constructible < long double *>::value, "");
static_assert(ala:: is_constructible < long double const*>::value == std:: is_constructible < long double const*>::value, "");
static_assert(ala:: is_constructible < long double volatile*>::value == std:: is_constructible < long double volatile*>::value, "");
static_assert(ala:: is_constructible < long double const volatile*>::value == std:: is_constructible < long double const volatile*>::value, "");
static_assert(ala:: is_constructible < long double &>::value == std:: is_constructible < long double &>::value, "");
static_assert(ala:: is_constructible < long double const&>::value == std:: is_constructible < long double const&>::value, "");
static_assert(ala:: is_constructible < long double volatile&>::value == std:: is_constructible < long double volatile&>::value, "");
static_assert(ala:: is_constructible < long double const volatile&>::value == std:: is_constructible < long double const volatile&>::value, "");
static_assert(ala:: is_constructible < long double &&>::value == std:: is_constructible < long double &&>::value, "");
static_assert(ala:: is_constructible < long double const&&>::value == std:: is_constructible < long double const&&>::value, "");
static_assert(ala:: is_constructible < long double volatile&&>::value == std:: is_constructible < long double volatile&&>::value, "");
static_assert(ala:: is_constructible < long double const volatile&&>::value == std:: is_constructible < long double const volatile&&>::value, "");
static_assert(ala:: is_constructible < long double [8]>::value == std:: is_constructible < long double [8]>::value, "");
static_assert(ala:: is_constructible < long double const [8]>::value == std:: is_constructible < long double const [8]>::value, "");
static_assert(ala:: is_constructible < long double volatile [8]>::value == std:: is_constructible < long double volatile [8]>::value, "");
static_assert(ala:: is_constructible < long double const volatile [8]>::value == std:: is_constructible < long double const volatile [8]>::value, "");
static_assert(ala:: is_constructible < wchar_t >::value == std:: is_constructible < wchar_t >::value, "");
static_assert(ala:: is_constructible < wchar_t const>::value == std:: is_constructible < wchar_t const>::value, "");
static_assert(ala:: is_constructible < wchar_t volatile>::value == std:: is_constructible < wchar_t volatile>::value, "");
static_assert(ala:: is_constructible < wchar_t const volatile>::value == std:: is_constructible < wchar_t const volatile>::value, "");
static_assert(ala:: is_constructible < wchar_t *>::value == std:: is_constructible < wchar_t *>::value, "");
static_assert(ala:: is_constructible < wchar_t const*>::value == std:: is_constructible < wchar_t const*>::value, "");
static_assert(ala:: is_constructible < wchar_t volatile*>::value == std:: is_constructible < wchar_t volatile*>::value, "");
static_assert(ala:: is_constructible < wchar_t const volatile*>::value == std:: is_constructible < wchar_t const volatile*>::value, "");
static_assert(ala:: is_constructible < wchar_t &>::value == std:: is_constructible < wchar_t &>::value, "");
static_assert(ala:: is_constructible < wchar_t const&>::value == std:: is_constructible < wchar_t const&>::value, "");
static_assert(ala:: is_constructible < wchar_t volatile&>::value == std:: is_constructible < wchar_t volatile&>::value, "");
static_assert(ala:: is_constructible < wchar_t const volatile&>::value == std:: is_constructible < wchar_t const volatile&>::value, "");
static_assert(ala:: is_constructible < wchar_t &&>::value == std:: is_constructible < wchar_t &&>::value, "");
static_assert(ala:: is_constructible < wchar_t const&&>::value == std:: is_constructible < wchar_t const&&>::value, "");
static_assert(ala:: is_constructible < wchar_t volatile&&>::value == std:: is_constructible < wchar_t volatile&&>::value, "");
static_assert(ala:: is_constructible < wchar_t const volatile&&>::value == std:: is_constructible < wchar_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < wchar_t [8]>::value == std:: is_constructible < wchar_t [8]>::value, "");
static_assert(ala:: is_constructible < wchar_t const [8]>::value == std:: is_constructible < wchar_t const [8]>::value, "");
static_assert(ala:: is_constructible < wchar_t volatile [8]>::value == std:: is_constructible < wchar_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < wchar_t const volatile [8]>::value == std:: is_constructible < wchar_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < char16_t >::value == std:: is_constructible < char16_t >::value, "");
static_assert(ala:: is_constructible < char16_t const>::value == std:: is_constructible < char16_t const>::value, "");
static_assert(ala:: is_constructible < char16_t volatile>::value == std:: is_constructible < char16_t volatile>::value, "");
static_assert(ala:: is_constructible < char16_t const volatile>::value == std:: is_constructible < char16_t const volatile>::value, "");
static_assert(ala:: is_constructible < char16_t *>::value == std:: is_constructible < char16_t *>::value, "");
static_assert(ala:: is_constructible < char16_t const*>::value == std:: is_constructible < char16_t const*>::value, "");
static_assert(ala:: is_constructible < char16_t volatile*>::value == std:: is_constructible < char16_t volatile*>::value, "");
static_assert(ala:: is_constructible < char16_t const volatile*>::value == std:: is_constructible < char16_t const volatile*>::value, "");
static_assert(ala:: is_constructible < char16_t &>::value == std:: is_constructible < char16_t &>::value, "");
static_assert(ala:: is_constructible < char16_t const&>::value == std:: is_constructible < char16_t const&>::value, "");
static_assert(ala:: is_constructible < char16_t volatile&>::value == std:: is_constructible < char16_t volatile&>::value, "");
static_assert(ala:: is_constructible < char16_t const volatile&>::value == std:: is_constructible < char16_t const volatile&>::value, "");
static_assert(ala:: is_constructible < char16_t &&>::value == std:: is_constructible < char16_t &&>::value, "");
static_assert(ala:: is_constructible < char16_t const&&>::value == std:: is_constructible < char16_t const&&>::value, "");
static_assert(ala:: is_constructible < char16_t volatile&&>::value == std:: is_constructible < char16_t volatile&&>::value, "");
static_assert(ala:: is_constructible < char16_t const volatile&&>::value == std:: is_constructible < char16_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < char16_t [8]>::value == std:: is_constructible < char16_t [8]>::value, "");
static_assert(ala:: is_constructible < char16_t const [8]>::value == std:: is_constructible < char16_t const [8]>::value, "");
static_assert(ala:: is_constructible < char16_t volatile [8]>::value == std:: is_constructible < char16_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < char16_t const volatile [8]>::value == std:: is_constructible < char16_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < char32_t >::value == std:: is_constructible < char32_t >::value, "");
static_assert(ala:: is_constructible < char32_t const>::value == std:: is_constructible < char32_t const>::value, "");
static_assert(ala:: is_constructible < char32_t volatile>::value == std:: is_constructible < char32_t volatile>::value, "");
static_assert(ala:: is_constructible < char32_t const volatile>::value == std:: is_constructible < char32_t const volatile>::value, "");
static_assert(ala:: is_constructible < char32_t *>::value == std:: is_constructible < char32_t *>::value, "");
static_assert(ala:: is_constructible < char32_t const*>::value == std:: is_constructible < char32_t const*>::value, "");
static_assert(ala:: is_constructible < char32_t volatile*>::value == std:: is_constructible < char32_t volatile*>::value, "");
static_assert(ala:: is_constructible < char32_t const volatile*>::value == std:: is_constructible < char32_t const volatile*>::value, "");
static_assert(ala:: is_constructible < char32_t &>::value == std:: is_constructible < char32_t &>::value, "");
static_assert(ala:: is_constructible < char32_t const&>::value == std:: is_constructible < char32_t const&>::value, "");
static_assert(ala:: is_constructible < char32_t volatile&>::value == std:: is_constructible < char32_t volatile&>::value, "");
static_assert(ala:: is_constructible < char32_t const volatile&>::value == std:: is_constructible < char32_t const volatile&>::value, "");
static_assert(ala:: is_constructible < char32_t &&>::value == std:: is_constructible < char32_t &&>::value, "");
static_assert(ala:: is_constructible < char32_t const&&>::value == std:: is_constructible < char32_t const&&>::value, "");
static_assert(ala:: is_constructible < char32_t volatile&&>::value == std:: is_constructible < char32_t volatile&&>::value, "");
static_assert(ala:: is_constructible < char32_t const volatile&&>::value == std:: is_constructible < char32_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < char32_t [8]>::value == std:: is_constructible < char32_t [8]>::value, "");
static_assert(ala:: is_constructible < char32_t const [8]>::value == std:: is_constructible < char32_t const [8]>::value, "");
static_assert(ala:: is_constructible < char32_t volatile [8]>::value == std:: is_constructible < char32_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < char32_t const volatile [8]>::value == std:: is_constructible < char32_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::int8_t >::value == std:: is_constructible < ala::int8_t >::value, "");
static_assert(ala:: is_constructible < ala::int8_t const>::value == std:: is_constructible < ala::int8_t const>::value, "");
static_assert(ala:: is_constructible < ala::int8_t volatile>::value == std:: is_constructible < ala::int8_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::int8_t const volatile>::value == std:: is_constructible < ala::int8_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::int8_t *>::value == std:: is_constructible < ala::int8_t *>::value, "");
static_assert(ala:: is_constructible < ala::int8_t const*>::value == std:: is_constructible < ala::int8_t const*>::value, "");
static_assert(ala:: is_constructible < ala::int8_t volatile*>::value == std:: is_constructible < ala::int8_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::int8_t const volatile*>::value == std:: is_constructible < ala::int8_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::int8_t &>::value == std:: is_constructible < ala::int8_t &>::value, "");
static_assert(ala:: is_constructible < ala::int8_t const&>::value == std:: is_constructible < ala::int8_t const&>::value, "");
static_assert(ala:: is_constructible < ala::int8_t volatile&>::value == std:: is_constructible < ala::int8_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::int8_t const volatile&>::value == std:: is_constructible < ala::int8_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::int8_t &&>::value == std:: is_constructible < ala::int8_t &&>::value, "");
static_assert(ala:: is_constructible < ala::int8_t const&&>::value == std:: is_constructible < ala::int8_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::int8_t volatile&&>::value == std:: is_constructible < ala::int8_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::int8_t const volatile&&>::value == std:: is_constructible < ala::int8_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::int8_t [8]>::value == std:: is_constructible < ala::int8_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::int8_t const [8]>::value == std:: is_constructible < ala::int8_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::int8_t volatile [8]>::value == std:: is_constructible < ala::int8_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::int8_t const volatile [8]>::value == std:: is_constructible < ala::int8_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t >::value == std:: is_constructible < ala::uint8_t >::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const>::value == std:: is_constructible < ala::uint8_t const>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t volatile>::value == std:: is_constructible < ala::uint8_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const volatile>::value == std:: is_constructible < ala::uint8_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t *>::value == std:: is_constructible < ala::uint8_t *>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const*>::value == std:: is_constructible < ala::uint8_t const*>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t volatile*>::value == std:: is_constructible < ala::uint8_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const volatile*>::value == std:: is_constructible < ala::uint8_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t &>::value == std:: is_constructible < ala::uint8_t &>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const&>::value == std:: is_constructible < ala::uint8_t const&>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t volatile&>::value == std:: is_constructible < ala::uint8_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const volatile&>::value == std:: is_constructible < ala::uint8_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t &&>::value == std:: is_constructible < ala::uint8_t &&>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const&&>::value == std:: is_constructible < ala::uint8_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t volatile&&>::value == std:: is_constructible < ala::uint8_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const volatile&&>::value == std:: is_constructible < ala::uint8_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t [8]>::value == std:: is_constructible < ala::uint8_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const [8]>::value == std:: is_constructible < ala::uint8_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t volatile [8]>::value == std:: is_constructible < ala::uint8_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint8_t const volatile [8]>::value == std:: is_constructible < ala::uint8_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::int16_t >::value == std:: is_constructible < ala::int16_t >::value, "");
static_assert(ala:: is_constructible < ala::int16_t const>::value == std:: is_constructible < ala::int16_t const>::value, "");
static_assert(ala:: is_constructible < ala::int16_t volatile>::value == std:: is_constructible < ala::int16_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::int16_t const volatile>::value == std:: is_constructible < ala::int16_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::int16_t *>::value == std:: is_constructible < ala::int16_t *>::value, "");
static_assert(ala:: is_constructible < ala::int16_t const*>::value == std:: is_constructible < ala::int16_t const*>::value, "");
static_assert(ala:: is_constructible < ala::int16_t volatile*>::value == std:: is_constructible < ala::int16_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::int16_t const volatile*>::value == std:: is_constructible < ala::int16_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::int16_t &>::value == std:: is_constructible < ala::int16_t &>::value, "");
static_assert(ala:: is_constructible < ala::int16_t const&>::value == std:: is_constructible < ala::int16_t const&>::value, "");
static_assert(ala:: is_constructible < ala::int16_t volatile&>::value == std:: is_constructible < ala::int16_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::int16_t const volatile&>::value == std:: is_constructible < ala::int16_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::int16_t &&>::value == std:: is_constructible < ala::int16_t &&>::value, "");
static_assert(ala:: is_constructible < ala::int16_t const&&>::value == std:: is_constructible < ala::int16_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::int16_t volatile&&>::value == std:: is_constructible < ala::int16_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::int16_t const volatile&&>::value == std:: is_constructible < ala::int16_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::int16_t [8]>::value == std:: is_constructible < ala::int16_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::int16_t const [8]>::value == std:: is_constructible < ala::int16_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::int16_t volatile [8]>::value == std:: is_constructible < ala::int16_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::int16_t const volatile [8]>::value == std:: is_constructible < ala::int16_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t >::value == std:: is_constructible < ala::uint16_t >::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const>::value == std:: is_constructible < ala::uint16_t const>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t volatile>::value == std:: is_constructible < ala::uint16_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const volatile>::value == std:: is_constructible < ala::uint16_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t *>::value == std:: is_constructible < ala::uint16_t *>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const*>::value == std:: is_constructible < ala::uint16_t const*>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t volatile*>::value == std:: is_constructible < ala::uint16_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const volatile*>::value == std:: is_constructible < ala::uint16_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t &>::value == std:: is_constructible < ala::uint16_t &>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const&>::value == std:: is_constructible < ala::uint16_t const&>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t volatile&>::value == std:: is_constructible < ala::uint16_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const volatile&>::value == std:: is_constructible < ala::uint16_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t &&>::value == std:: is_constructible < ala::uint16_t &&>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const&&>::value == std:: is_constructible < ala::uint16_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t volatile&&>::value == std:: is_constructible < ala::uint16_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const volatile&&>::value == std:: is_constructible < ala::uint16_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t [8]>::value == std:: is_constructible < ala::uint16_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const [8]>::value == std:: is_constructible < ala::uint16_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t volatile [8]>::value == std:: is_constructible < ala::uint16_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint16_t const volatile [8]>::value == std:: is_constructible < ala::uint16_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::int32_t >::value == std:: is_constructible < ala::int32_t >::value, "");
static_assert(ala:: is_constructible < ala::int32_t const>::value == std:: is_constructible < ala::int32_t const>::value, "");
static_assert(ala:: is_constructible < ala::int32_t volatile>::value == std:: is_constructible < ala::int32_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::int32_t const volatile>::value == std:: is_constructible < ala::int32_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::int32_t *>::value == std:: is_constructible < ala::int32_t *>::value, "");
static_assert(ala:: is_constructible < ala::int32_t const*>::value == std:: is_constructible < ala::int32_t const*>::value, "");
static_assert(ala:: is_constructible < ala::int32_t volatile*>::value == std:: is_constructible < ala::int32_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::int32_t const volatile*>::value == std:: is_constructible < ala::int32_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::int32_t &>::value == std:: is_constructible < ala::int32_t &>::value, "");
static_assert(ala:: is_constructible < ala::int32_t const&>::value == std:: is_constructible < ala::int32_t const&>::value, "");
static_assert(ala:: is_constructible < ala::int32_t volatile&>::value == std:: is_constructible < ala::int32_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::int32_t const volatile&>::value == std:: is_constructible < ala::int32_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::int32_t &&>::value == std:: is_constructible < ala::int32_t &&>::value, "");
static_assert(ala:: is_constructible < ala::int32_t const&&>::value == std:: is_constructible < ala::int32_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::int32_t volatile&&>::value == std:: is_constructible < ala::int32_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::int32_t const volatile&&>::value == std:: is_constructible < ala::int32_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::int32_t [8]>::value == std:: is_constructible < ala::int32_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::int32_t const [8]>::value == std:: is_constructible < ala::int32_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::int32_t volatile [8]>::value == std:: is_constructible < ala::int32_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::int32_t const volatile [8]>::value == std:: is_constructible < ala::int32_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t >::value == std:: is_constructible < ala::uint32_t >::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const>::value == std:: is_constructible < ala::uint32_t const>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t volatile>::value == std:: is_constructible < ala::uint32_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const volatile>::value == std:: is_constructible < ala::uint32_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t *>::value == std:: is_constructible < ala::uint32_t *>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const*>::value == std:: is_constructible < ala::uint32_t const*>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t volatile*>::value == std:: is_constructible < ala::uint32_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const volatile*>::value == std:: is_constructible < ala::uint32_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t &>::value == std:: is_constructible < ala::uint32_t &>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const&>::value == std:: is_constructible < ala::uint32_t const&>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t volatile&>::value == std:: is_constructible < ala::uint32_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const volatile&>::value == std:: is_constructible < ala::uint32_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t &&>::value == std:: is_constructible < ala::uint32_t &&>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const&&>::value == std:: is_constructible < ala::uint32_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t volatile&&>::value == std:: is_constructible < ala::uint32_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const volatile&&>::value == std:: is_constructible < ala::uint32_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t [8]>::value == std:: is_constructible < ala::uint32_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const [8]>::value == std:: is_constructible < ala::uint32_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t volatile [8]>::value == std:: is_constructible < ala::uint32_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint32_t const volatile [8]>::value == std:: is_constructible < ala::uint32_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::int64_t >::value == std:: is_constructible < ala::int64_t >::value, "");
static_assert(ala:: is_constructible < ala::int64_t const>::value == std:: is_constructible < ala::int64_t const>::value, "");
static_assert(ala:: is_constructible < ala::int64_t volatile>::value == std:: is_constructible < ala::int64_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::int64_t const volatile>::value == std:: is_constructible < ala::int64_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::int64_t *>::value == std:: is_constructible < ala::int64_t *>::value, "");
static_assert(ala:: is_constructible < ala::int64_t const*>::value == std:: is_constructible < ala::int64_t const*>::value, "");
static_assert(ala:: is_constructible < ala::int64_t volatile*>::value == std:: is_constructible < ala::int64_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::int64_t const volatile*>::value == std:: is_constructible < ala::int64_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::int64_t &>::value == std:: is_constructible < ala::int64_t &>::value, "");
static_assert(ala:: is_constructible < ala::int64_t const&>::value == std:: is_constructible < ala::int64_t const&>::value, "");
static_assert(ala:: is_constructible < ala::int64_t volatile&>::value == std:: is_constructible < ala::int64_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::int64_t const volatile&>::value == std:: is_constructible < ala::int64_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::int64_t &&>::value == std:: is_constructible < ala::int64_t &&>::value, "");
static_assert(ala:: is_constructible < ala::int64_t const&&>::value == std:: is_constructible < ala::int64_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::int64_t volatile&&>::value == std:: is_constructible < ala::int64_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::int64_t const volatile&&>::value == std:: is_constructible < ala::int64_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::int64_t [8]>::value == std:: is_constructible < ala::int64_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::int64_t const [8]>::value == std:: is_constructible < ala::int64_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::int64_t volatile [8]>::value == std:: is_constructible < ala::int64_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::int64_t const volatile [8]>::value == std:: is_constructible < ala::int64_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t >::value == std:: is_constructible < ala::uint64_t >::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const>::value == std:: is_constructible < ala::uint64_t const>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t volatile>::value == std:: is_constructible < ala::uint64_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const volatile>::value == std:: is_constructible < ala::uint64_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t *>::value == std:: is_constructible < ala::uint64_t *>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const*>::value == std:: is_constructible < ala::uint64_t const*>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t volatile*>::value == std:: is_constructible < ala::uint64_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const volatile*>::value == std:: is_constructible < ala::uint64_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t &>::value == std:: is_constructible < ala::uint64_t &>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const&>::value == std:: is_constructible < ala::uint64_t const&>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t volatile&>::value == std:: is_constructible < ala::uint64_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const volatile&>::value == std:: is_constructible < ala::uint64_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t &&>::value == std:: is_constructible < ala::uint64_t &&>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const&&>::value == std:: is_constructible < ala::uint64_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t volatile&&>::value == std:: is_constructible < ala::uint64_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const volatile&&>::value == std:: is_constructible < ala::uint64_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t [8]>::value == std:: is_constructible < ala::uint64_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const [8]>::value == std:: is_constructible < ala::uint64_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t volatile [8]>::value == std:: is_constructible < ala::uint64_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::uint64_t const volatile [8]>::value == std:: is_constructible < ala::uint64_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::size_t >::value == std:: is_constructible < ala::size_t >::value, "");
static_assert(ala:: is_constructible < ala::size_t const>::value == std:: is_constructible < ala::size_t const>::value, "");
static_assert(ala:: is_constructible < ala::size_t volatile>::value == std:: is_constructible < ala::size_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::size_t const volatile>::value == std:: is_constructible < ala::size_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::size_t *>::value == std:: is_constructible < ala::size_t *>::value, "");
static_assert(ala:: is_constructible < ala::size_t const*>::value == std:: is_constructible < ala::size_t const*>::value, "");
static_assert(ala:: is_constructible < ala::size_t volatile*>::value == std:: is_constructible < ala::size_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::size_t const volatile*>::value == std:: is_constructible < ala::size_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::size_t &>::value == std:: is_constructible < ala::size_t &>::value, "");
static_assert(ala:: is_constructible < ala::size_t const&>::value == std:: is_constructible < ala::size_t const&>::value, "");
static_assert(ala:: is_constructible < ala::size_t volatile&>::value == std:: is_constructible < ala::size_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::size_t const volatile&>::value == std:: is_constructible < ala::size_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::size_t &&>::value == std:: is_constructible < ala::size_t &&>::value, "");
static_assert(ala:: is_constructible < ala::size_t const&&>::value == std:: is_constructible < ala::size_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::size_t volatile&&>::value == std:: is_constructible < ala::size_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::size_t const volatile&&>::value == std:: is_constructible < ala::size_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::size_t [8]>::value == std:: is_constructible < ala::size_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::size_t const [8]>::value == std:: is_constructible < ala::size_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::size_t volatile [8]>::value == std:: is_constructible < ala::size_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::size_t const volatile [8]>::value == std:: is_constructible < ala::size_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t >::value == std:: is_constructible < ala::ptrdiff_t >::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const>::value == std:: is_constructible < ala::ptrdiff_t const>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t volatile>::value == std:: is_constructible < ala::ptrdiff_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const volatile>::value == std:: is_constructible < ala::ptrdiff_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t *>::value == std:: is_constructible < ala::ptrdiff_t *>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const*>::value == std:: is_constructible < ala::ptrdiff_t const*>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t volatile*>::value == std:: is_constructible < ala::ptrdiff_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const volatile*>::value == std:: is_constructible < ala::ptrdiff_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t &>::value == std:: is_constructible < ala::ptrdiff_t &>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const&>::value == std:: is_constructible < ala::ptrdiff_t const&>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t volatile&>::value == std:: is_constructible < ala::ptrdiff_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const volatile&>::value == std:: is_constructible < ala::ptrdiff_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t &&>::value == std:: is_constructible < ala::ptrdiff_t &&>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const&&>::value == std:: is_constructible < ala::ptrdiff_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t volatile&&>::value == std:: is_constructible < ala::ptrdiff_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const volatile&&>::value == std:: is_constructible < ala::ptrdiff_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t [8]>::value == std:: is_constructible < ala::ptrdiff_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const [8]>::value == std:: is_constructible < ala::ptrdiff_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t volatile [8]>::value == std:: is_constructible < ala::ptrdiff_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::ptrdiff_t const volatile [8]>::value == std:: is_constructible < ala::ptrdiff_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t >::value == std:: is_constructible < ala::intptr_t >::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const>::value == std:: is_constructible < ala::intptr_t const>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t volatile>::value == std:: is_constructible < ala::intptr_t volatile>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const volatile>::value == std:: is_constructible < ala::intptr_t const volatile>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t *>::value == std:: is_constructible < ala::intptr_t *>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const*>::value == std:: is_constructible < ala::intptr_t const*>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t volatile*>::value == std:: is_constructible < ala::intptr_t volatile*>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const volatile*>::value == std:: is_constructible < ala::intptr_t const volatile*>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t &>::value == std:: is_constructible < ala::intptr_t &>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const&>::value == std:: is_constructible < ala::intptr_t const&>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t volatile&>::value == std:: is_constructible < ala::intptr_t volatile&>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const volatile&>::value == std:: is_constructible < ala::intptr_t const volatile&>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t &&>::value == std:: is_constructible < ala::intptr_t &&>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const&&>::value == std:: is_constructible < ala::intptr_t const&&>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t volatile&&>::value == std:: is_constructible < ala::intptr_t volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const volatile&&>::value == std:: is_constructible < ala::intptr_t const volatile&&>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t [8]>::value == std:: is_constructible < ala::intptr_t [8]>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const [8]>::value == std:: is_constructible < ala::intptr_t const [8]>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t volatile [8]>::value == std:: is_constructible < ala::intptr_t volatile [8]>::value, "");
static_assert(ala:: is_constructible < ala::intptr_t const volatile [8]>::value == std:: is_constructible < ala::intptr_t const volatile [8]>::value, "");
static_assert(ala:: is_constructible < C0 >::value == std:: is_constructible < C0 >::value, "");
static_assert(ala:: is_constructible < C0 const>::value == std:: is_constructible < C0 const>::value, "");
static_assert(ala:: is_constructible < C0 volatile>::value == std:: is_constructible < C0 volatile>::value, "");
static_assert(ala:: is_constructible < C0 const volatile>::value == std:: is_constructible < C0 const volatile>::value, "");
static_assert(ala:: is_constructible < C0 *>::value == std:: is_constructible < C0 *>::value, "");
static_assert(ala:: is_constructible < C0 const*>::value == std:: is_constructible < C0 const*>::value, "");
static_assert(ala:: is_constructible < C0 volatile*>::value == std:: is_constructible < C0 volatile*>::value, "");
static_assert(ala:: is_constructible < C0 const volatile*>::value == std:: is_constructible < C0 const volatile*>::value, "");
static_assert(ala:: is_constructible < C0 &>::value == std:: is_constructible < C0 &>::value, "");
static_assert(ala:: is_constructible < C0 const&>::value == std:: is_constructible < C0 const&>::value, "");
static_assert(ala:: is_constructible < C0 volatile&>::value == std:: is_constructible < C0 volatile&>::value, "");
static_assert(ala:: is_constructible < C0 const volatile&>::value == std:: is_constructible < C0 const volatile&>::value, "");
static_assert(ala:: is_constructible < C0 &&>::value == std:: is_constructible < C0 &&>::value, "");
static_assert(ala:: is_constructible < C0 const&&>::value == std:: is_constructible < C0 const&&>::value, "");
static_assert(ala:: is_constructible < C0 volatile&&>::value == std:: is_constructible < C0 volatile&&>::value, "");
static_assert(ala:: is_constructible < C0 const volatile&&>::value == std:: is_constructible < C0 const volatile&&>::value, "");
static_assert(ala:: is_constructible < C1 >::value == std:: is_constructible < C1 >::value, "");
static_assert(ala:: is_constructible < C1 const>::value == std:: is_constructible < C1 const>::value, "");
static_assert(ala:: is_constructible < C1 volatile>::value == std:: is_constructible < C1 volatile>::value, "");
static_assert(ala:: is_constructible < C1 const volatile>::value == std:: is_constructible < C1 const volatile>::value, "");
static_assert(ala:: is_constructible < C1 *>::value == std:: is_constructible < C1 *>::value, "");
static_assert(ala:: is_constructible < C1 const*>::value == std:: is_constructible < C1 const*>::value, "");
static_assert(ala:: is_constructible < C1 volatile*>::value == std:: is_constructible < C1 volatile*>::value, "");
static_assert(ala:: is_constructible < C1 const volatile*>::value == std:: is_constructible < C1 const volatile*>::value, "");
static_assert(ala:: is_constructible < C1 &>::value == std:: is_constructible < C1 &>::value, "");
static_assert(ala:: is_constructible < C1 const&>::value == std:: is_constructible < C1 const&>::value, "");
static_assert(ala:: is_constructible < C1 volatile&>::value == std:: is_constructible < C1 volatile&>::value, "");
static_assert(ala:: is_constructible < C1 const volatile&>::value == std:: is_constructible < C1 const volatile&>::value, "");
static_assert(ala:: is_constructible < C1 &&>::value == std:: is_constructible < C1 &&>::value, "");
static_assert(ala:: is_constructible < C1 const&&>::value == std:: is_constructible < C1 const&&>::value, "");
static_assert(ala:: is_constructible < C1 volatile&&>::value == std:: is_constructible < C1 volatile&&>::value, "");
static_assert(ala:: is_constructible < C1 const volatile&&>::value == std:: is_constructible < C1 const volatile&&>::value, "");
static_assert(ala:: is_constructible < C2 >::value == std:: is_constructible < C2 >::value, "");
static_assert(ala:: is_constructible < C2 const>::value == std:: is_constructible < C2 const>::value, "");
static_assert(ala:: is_constructible < C2 volatile>::value == std:: is_constructible < C2 volatile>::value, "");
static_assert(ala:: is_constructible < C2 const volatile>::value == std:: is_constructible < C2 const volatile>::value, "");
static_assert(ala:: is_constructible < C2 *>::value == std:: is_constructible < C2 *>::value, "");
static_assert(ala:: is_constructible < C2 const*>::value == std:: is_constructible < C2 const*>::value, "");
static_assert(ala:: is_constructible < C2 volatile*>::value == std:: is_constructible < C2 volatile*>::value, "");
static_assert(ala:: is_constructible < C2 const volatile*>::value == std:: is_constructible < C2 const volatile*>::value, "");
static_assert(ala:: is_constructible < C2 &>::value == std:: is_constructible < C2 &>::value, "");
static_assert(ala:: is_constructible < C2 const&>::value == std:: is_constructible < C2 const&>::value, "");
static_assert(ala:: is_constructible < C2 volatile&>::value == std:: is_constructible < C2 volatile&>::value, "");
static_assert(ala:: is_constructible < C2 const volatile&>::value == std:: is_constructible < C2 const volatile&>::value, "");
static_assert(ala:: is_constructible < C2 &&>::value == std:: is_constructible < C2 &&>::value, "");
static_assert(ala:: is_constructible < C2 const&&>::value == std:: is_constructible < C2 const&&>::value, "");
static_assert(ala:: is_constructible < C2 volatile&&>::value == std:: is_constructible < C2 volatile&&>::value, "");
static_assert(ala:: is_constructible < C2 const volatile&&>::value == std:: is_constructible < C2 const volatile&&>::value, "");
static_assert(ala:: is_constructible < S0 >::value == std:: is_constructible < S0 >::value, "");
static_assert(ala:: is_constructible < S0 const>::value == std:: is_constructible < S0 const>::value, "");
static_assert(ala:: is_constructible < S0 volatile>::value == std:: is_constructible < S0 volatile>::value, "");
static_assert(ala:: is_constructible < S0 const volatile>::value == std:: is_constructible < S0 const volatile>::value, "");
static_assert(ala:: is_constructible < S0 *>::value == std:: is_constructible < S0 *>::value, "");
static_assert(ala:: is_constructible < S0 const*>::value == std:: is_constructible < S0 const*>::value, "");
static_assert(ala:: is_constructible < S0 volatile*>::value == std:: is_constructible < S0 volatile*>::value, "");
static_assert(ala:: is_constructible < S0 const volatile*>::value == std:: is_constructible < S0 const volatile*>::value, "");
static_assert(ala:: is_constructible < S0 &>::value == std:: is_constructible < S0 &>::value, "");
static_assert(ala:: is_constructible < S0 const&>::value == std:: is_constructible < S0 const&>::value, "");
static_assert(ala:: is_constructible < S0 volatile&>::value == std:: is_constructible < S0 volatile&>::value, "");
static_assert(ala:: is_constructible < S0 const volatile&>::value == std:: is_constructible < S0 const volatile&>::value, "");
static_assert(ala:: is_constructible < S0 &&>::value == std:: is_constructible < S0 &&>::value, "");
static_assert(ala:: is_constructible < S0 const&&>::value == std:: is_constructible < S0 const&&>::value, "");
static_assert(ala:: is_constructible < S0 volatile&&>::value == std:: is_constructible < S0 volatile&&>::value, "");
static_assert(ala:: is_constructible < S0 const volatile&&>::value == std:: is_constructible < S0 const volatile&&>::value, "");
static_assert(ala:: is_constructible < S1 >::value == std:: is_constructible < S1 >::value, "");
static_assert(ala:: is_constructible < S1 const>::value == std:: is_constructible < S1 const>::value, "");
static_assert(ala:: is_constructible < S1 volatile>::value == std:: is_constructible < S1 volatile>::value, "");
static_assert(ala:: is_constructible < S1 const volatile>::value == std:: is_constructible < S1 const volatile>::value, "");
static_assert(ala:: is_constructible < S1 *>::value == std:: is_constructible < S1 *>::value, "");
static_assert(ala:: is_constructible < S1 const*>::value == std:: is_constructible < S1 const*>::value, "");
static_assert(ala:: is_constructible < S1 volatile*>::value == std:: is_constructible < S1 volatile*>::value, "");
static_assert(ala:: is_constructible < S1 const volatile*>::value == std:: is_constructible < S1 const volatile*>::value, "");
static_assert(ala:: is_constructible < S1 &>::value == std:: is_constructible < S1 &>::value, "");
static_assert(ala:: is_constructible < S1 const&>::value == std:: is_constructible < S1 const&>::value, "");
static_assert(ala:: is_constructible < S1 volatile&>::value == std:: is_constructible < S1 volatile&>::value, "");
static_assert(ala:: is_constructible < S1 const volatile&>::value == std:: is_constructible < S1 const volatile&>::value, "");
static_assert(ala:: is_constructible < S1 &&>::value == std:: is_constructible < S1 &&>::value, "");
static_assert(ala:: is_constructible < S1 const&&>::value == std:: is_constructible < S1 const&&>::value, "");
static_assert(ala:: is_constructible < S1 volatile&&>::value == std:: is_constructible < S1 volatile&&>::value, "");
static_assert(ala:: is_constructible < S1 const volatile&&>::value == std:: is_constructible < S1 const volatile&&>::value, "");
static_assert(ala:: is_constructible < S2 >::value == std:: is_constructible < S2 >::value, "");
static_assert(ala:: is_constructible < S2 const>::value == std:: is_constructible < S2 const>::value, "");
static_assert(ala:: is_constructible < S2 volatile>::value == std:: is_constructible < S2 volatile>::value, "");
static_assert(ala:: is_constructible < S2 const volatile>::value == std:: is_constructible < S2 const volatile>::value, "");
static_assert(ala:: is_constructible < S2 *>::value == std:: is_constructible < S2 *>::value, "");
static_assert(ala:: is_constructible < S2 const*>::value == std:: is_constructible < S2 const*>::value, "");
static_assert(ala:: is_constructible < S2 volatile*>::value == std:: is_constructible < S2 volatile*>::value, "");
static_assert(ala:: is_constructible < S2 const volatile*>::value == std:: is_constructible < S2 const volatile*>::value, "");
static_assert(ala:: is_constructible < S2 &>::value == std:: is_constructible < S2 &>::value, "");
static_assert(ala:: is_constructible < S2 const&>::value == std:: is_constructible < S2 const&>::value, "");
static_assert(ala:: is_constructible < S2 volatile&>::value == std:: is_constructible < S2 volatile&>::value, "");
static_assert(ala:: is_constructible < S2 const volatile&>::value == std:: is_constructible < S2 const volatile&>::value, "");
static_assert(ala:: is_constructible < S2 &&>::value == std:: is_constructible < S2 &&>::value, "");
static_assert(ala:: is_constructible < S2 const&&>::value == std:: is_constructible < S2 const&&>::value, "");
static_assert(ala:: is_constructible < S2 volatile&&>::value == std:: is_constructible < S2 volatile&&>::value, "");
static_assert(ala:: is_constructible < S2 const volatile&&>::value == std:: is_constructible < S2 const volatile&&>::value, "");
static_assert(ala:: is_constructible < E >::value == std:: is_constructible < E >::value, "");
static_assert(ala:: is_constructible < E const>::value == std:: is_constructible < E const>::value, "");
static_assert(ala:: is_constructible < E volatile>::value == std:: is_constructible < E volatile>::value, "");
static_assert(ala:: is_constructible < E const volatile>::value == std:: is_constructible < E const volatile>::value, "");
static_assert(ala:: is_constructible < E *>::value == std:: is_constructible < E *>::value, "");
static_assert(ala:: is_constructible < E const*>::value == std:: is_constructible < E const*>::value, "");
static_assert(ala:: is_constructible < E volatile*>::value == std:: is_constructible < E volatile*>::value, "");
static_assert(ala:: is_constructible < E const volatile*>::value == std:: is_constructible < E const volatile*>::value, "");
static_assert(ala:: is_constructible < E &>::value == std:: is_constructible < E &>::value, "");
static_assert(ala:: is_constructible < E const&>::value == std:: is_constructible < E const&>::value, "");
static_assert(ala:: is_constructible < E volatile&>::value == std:: is_constructible < E volatile&>::value, "");
static_assert(ala:: is_constructible < E const volatile&>::value == std:: is_constructible < E const volatile&>::value, "");
static_assert(ala:: is_constructible < E &&>::value == std:: is_constructible < E &&>::value, "");
static_assert(ala:: is_constructible < E const&&>::value == std:: is_constructible < E const&&>::value, "");
static_assert(ala:: is_constructible < E volatile&&>::value == std:: is_constructible < E volatile&&>::value, "");
static_assert(ala:: is_constructible < E const volatile&&>::value == std:: is_constructible < E const volatile&&>::value, "");
static_assert(ala:: is_constructible < U >::value == std:: is_constructible < U >::value, "");
static_assert(ala:: is_constructible < U const>::value == std:: is_constructible < U const>::value, "");
static_assert(ala:: is_constructible < U volatile>::value == std:: is_constructible < U volatile>::value, "");
static_assert(ala:: is_constructible < U const volatile>::value == std:: is_constructible < U const volatile>::value, "");
static_assert(ala:: is_constructible < U *>::value == std:: is_constructible < U *>::value, "");
static_assert(ala:: is_constructible < U const*>::value == std:: is_constructible < U const*>::value, "");
static_assert(ala:: is_constructible < U volatile*>::value == std:: is_constructible < U volatile*>::value, "");
static_assert(ala:: is_constructible < U const volatile*>::value == std:: is_constructible < U const volatile*>::value, "");
static_assert(ala:: is_constructible < U &>::value == std:: is_constructible < U &>::value, "");
static_assert(ala:: is_constructible < U const&>::value == std:: is_constructible < U const&>::value, "");
static_assert(ala:: is_constructible < U volatile&>::value == std:: is_constructible < U volatile&>::value, "");
static_assert(ala:: is_constructible < U const volatile&>::value == std:: is_constructible < U const volatile&>::value, "");
static_assert(ala:: is_constructible < U &&>::value == std:: is_constructible < U &&>::value, "");
static_assert(ala:: is_constructible < U const&&>::value == std:: is_constructible < U const&&>::value, "");
static_assert(ala:: is_constructible < U volatile&&>::value == std:: is_constructible < U volatile&&>::value, "");
static_assert(ala:: is_constructible < U const volatile&&>::value == std:: is_constructible < U const volatile&&>::value, "");
static_assert(ala:: is_constructible < X0 >::value == std:: is_constructible < X0 >::value, "");
static_assert(ala:: is_constructible < X0 const>::value == std:: is_constructible < X0 const>::value, "");
static_assert(ala:: is_constructible < X0 volatile>::value == std:: is_constructible < X0 volatile>::value, "");
static_assert(ala:: is_constructible < X0 const volatile>::value == std:: is_constructible < X0 const volatile>::value, "");
static_assert(ala:: is_constructible < X0 *>::value == std:: is_constructible < X0 *>::value, "");
static_assert(ala:: is_constructible < X0 const*>::value == std:: is_constructible < X0 const*>::value, "");
static_assert(ala:: is_constructible < X0 volatile*>::value == std:: is_constructible < X0 volatile*>::value, "");
static_assert(ala:: is_constructible < X0 const volatile*>::value == std:: is_constructible < X0 const volatile*>::value, "");
static_assert(ala:: is_constructible < X0 &>::value == std:: is_constructible < X0 &>::value, "");
static_assert(ala:: is_constructible < X0 const&>::value == std:: is_constructible < X0 const&>::value, "");
static_assert(ala:: is_constructible < X0 volatile&>::value == std:: is_constructible < X0 volatile&>::value, "");
static_assert(ala:: is_constructible < X0 const volatile&>::value == std:: is_constructible < X0 const volatile&>::value, "");
static_assert(ala:: is_constructible < X0 &&>::value == std:: is_constructible < X0 &&>::value, "");
static_assert(ala:: is_constructible < X0 const&&>::value == std:: is_constructible < X0 const&&>::value, "");
static_assert(ala:: is_constructible < X0 volatile&&>::value == std:: is_constructible < X0 volatile&&>::value, "");
static_assert(ala:: is_constructible < X0 const volatile&&>::value == std:: is_constructible < X0 const volatile&&>::value, "");
static_assert(ala:: is_constructible < X1 >::value == std:: is_constructible < X1 >::value, "");
static_assert(ala:: is_constructible < X1 const>::value == std:: is_constructible < X1 const>::value, "");
static_assert(ala:: is_constructible < X1 volatile>::value == std:: is_constructible < X1 volatile>::value, "");
static_assert(ala:: is_constructible < X1 const volatile>::value == std:: is_constructible < X1 const volatile>::value, "");
static_assert(ala:: is_constructible < X1 *>::value == std:: is_constructible < X1 *>::value, "");
static_assert(ala:: is_constructible < X1 const*>::value == std:: is_constructible < X1 const*>::value, "");
static_assert(ala:: is_constructible < X1 volatile*>::value == std:: is_constructible < X1 volatile*>::value, "");
static_assert(ala:: is_constructible < X1 const volatile*>::value == std:: is_constructible < X1 const volatile*>::value, "");
static_assert(ala:: is_constructible < X1 &>::value == std:: is_constructible < X1 &>::value, "");
static_assert(ala:: is_constructible < X1 const&>::value == std:: is_constructible < X1 const&>::value, "");
static_assert(ala:: is_constructible < X1 volatile&>::value == std:: is_constructible < X1 volatile&>::value, "");
static_assert(ala:: is_constructible < X1 const volatile&>::value == std:: is_constructible < X1 const volatile&>::value, "");
static_assert(ala:: is_constructible < X1 &&>::value == std:: is_constructible < X1 &&>::value, "");
static_assert(ala:: is_constructible < X1 const&&>::value == std:: is_constructible < X1 const&&>::value, "");
static_assert(ala:: is_constructible < X1 volatile&&>::value == std:: is_constructible < X1 volatile&&>::value, "");
static_assert(ala:: is_constructible < X1 const volatile&&>::value == std:: is_constructible < X1 const volatile&&>::value, "");
static_assert(ala:: is_constructible < X2 >::value == std:: is_constructible < X2 >::value, "");
static_assert(ala:: is_constructible < X2 const>::value == std:: is_constructible < X2 const>::value, "");
static_assert(ala:: is_constructible < X2 volatile>::value == std:: is_constructible < X2 volatile>::value, "");
static_assert(ala:: is_constructible < X2 const volatile>::value == std:: is_constructible < X2 const volatile>::value, "");
static_assert(ala:: is_constructible < X2 *>::value == std:: is_constructible < X2 *>::value, "");
static_assert(ala:: is_constructible < X2 const*>::value == std:: is_constructible < X2 const*>::value, "");
static_assert(ala:: is_constructible < X2 volatile*>::value == std:: is_constructible < X2 volatile*>::value, "");
static_assert(ala:: is_constructible < X2 const volatile*>::value == std:: is_constructible < X2 const volatile*>::value, "");
static_assert(ala:: is_constructible < X2 &>::value == std:: is_constructible < X2 &>::value, "");
static_assert(ala:: is_constructible < X2 const&>::value == std:: is_constructible < X2 const&>::value, "");
static_assert(ala:: is_constructible < X2 volatile&>::value == std:: is_constructible < X2 volatile&>::value, "");
static_assert(ala:: is_constructible < X2 const volatile&>::value == std:: is_constructible < X2 const volatile&>::value, "");
static_assert(ala:: is_constructible < X2 &&>::value == std:: is_constructible < X2 &&>::value, "");
static_assert(ala:: is_constructible < X2 const&&>::value == std:: is_constructible < X2 const&&>::value, "");
static_assert(ala:: is_constructible < X2 volatile&&>::value == std:: is_constructible < X2 volatile&&>::value, "");
static_assert(ala:: is_constructible < X2 const volatile&&>::value == std:: is_constructible < X2 const volatile&&>::value, "");
static_assert(ala:: is_constructible < X3 >::value == std:: is_constructible < X3 >::value, "");
static_assert(ala:: is_constructible < X3 const>::value == std:: is_constructible < X3 const>::value, "");
static_assert(ala:: is_constructible < X3 volatile>::value == std:: is_constructible < X3 volatile>::value, "");
static_assert(ala:: is_constructible < X3 const volatile>::value == std:: is_constructible < X3 const volatile>::value, "");
static_assert(ala:: is_constructible < X3 *>::value == std:: is_constructible < X3 *>::value, "");
static_assert(ala:: is_constructible < X3 const*>::value == std:: is_constructible < X3 const*>::value, "");
static_assert(ala:: is_constructible < X3 volatile*>::value == std:: is_constructible < X3 volatile*>::value, "");
static_assert(ala:: is_constructible < X3 const volatile*>::value == std:: is_constructible < X3 const volatile*>::value, "");
static_assert(ala:: is_constructible < X3 &>::value == std:: is_constructible < X3 &>::value, "");
static_assert(ala:: is_constructible < X3 const&>::value == std:: is_constructible < X3 const&>::value, "");
static_assert(ala:: is_constructible < X3 volatile&>::value == std:: is_constructible < X3 volatile&>::value, "");
static_assert(ala:: is_constructible < X3 const volatile&>::value == std:: is_constructible < X3 const volatile&>::value, "");
static_assert(ala:: is_constructible < X3 &&>::value == std:: is_constructible < X3 &&>::value, "");
static_assert(ala:: is_constructible < X3 const&&>::value == std:: is_constructible < X3 const&&>::value, "");
static_assert(ala:: is_constructible < X3 volatile&&>::value == std:: is_constructible < X3 volatile&&>::value, "");
static_assert(ala:: is_constructible < X3 const volatile&&>::value == std:: is_constructible < X3 const volatile&&>::value, "");
static_assert(ala:: is_constructible < X4 >::value == std:: is_constructible < X4 >::value, "");
static_assert(ala:: is_constructible < X4 const>::value == std:: is_constructible < X4 const>::value, "");
static_assert(ala:: is_constructible < X4 volatile>::value == std:: is_constructible < X4 volatile>::value, "");
static_assert(ala:: is_constructible < X4 const volatile>::value == std:: is_constructible < X4 const volatile>::value, "");
static_assert(ala:: is_constructible < X4 *>::value == std:: is_constructible < X4 *>::value, "");
static_assert(ala:: is_constructible < X4 const*>::value == std:: is_constructible < X4 const*>::value, "");
static_assert(ala:: is_constructible < X4 volatile*>::value == std:: is_constructible < X4 volatile*>::value, "");
static_assert(ala:: is_constructible < X4 const volatile*>::value == std:: is_constructible < X4 const volatile*>::value, "");
static_assert(ala:: is_constructible < X4 &>::value == std:: is_constructible < X4 &>::value, "");
static_assert(ala:: is_constructible < X4 const&>::value == std:: is_constructible < X4 const&>::value, "");
static_assert(ala:: is_constructible < X4 volatile&>::value == std:: is_constructible < X4 volatile&>::value, "");
static_assert(ala:: is_constructible < X4 const volatile&>::value == std:: is_constructible < X4 const volatile&>::value, "");
static_assert(ala:: is_constructible < X4 &&>::value == std:: is_constructible < X4 &&>::value, "");
static_assert(ala:: is_constructible < X4 const&&>::value == std:: is_constructible < X4 const&&>::value, "");
static_assert(ala:: is_constructible < X4 volatile&&>::value == std:: is_constructible < X4 volatile&&>::value, "");
static_assert(ala:: is_constructible < X4 const volatile&&>::value == std:: is_constructible < X4 const volatile&&>::value, "");
static_assert(ala:: is_constructible < X5 >::value == std:: is_constructible < X5 >::value, "");
static_assert(ala:: is_constructible < X5 const>::value == std:: is_constructible < X5 const>::value, "");
static_assert(ala:: is_constructible < X5 volatile>::value == std:: is_constructible < X5 volatile>::value, "");
static_assert(ala:: is_constructible < X5 const volatile>::value == std:: is_constructible < X5 const volatile>::value, "");
static_assert(ala:: is_constructible < X5 *>::value == std:: is_constructible < X5 *>::value, "");
static_assert(ala:: is_constructible < X5 const*>::value == std:: is_constructible < X5 const*>::value, "");
static_assert(ala:: is_constructible < X5 volatile*>::value == std:: is_constructible < X5 volatile*>::value, "");
static_assert(ala:: is_constructible < X5 const volatile*>::value == std:: is_constructible < X5 const volatile*>::value, "");
static_assert(ala:: is_constructible < X5 &>::value == std:: is_constructible < X5 &>::value, "");
static_assert(ala:: is_constructible < X5 const&>::value == std:: is_constructible < X5 const&>::value, "");
static_assert(ala:: is_constructible < X5 volatile&>::value == std:: is_constructible < X5 volatile&>::value, "");
static_assert(ala:: is_constructible < X5 const volatile&>::value == std:: is_constructible < X5 const volatile&>::value, "");
static_assert(ala:: is_constructible < X5 &&>::value == std:: is_constructible < X5 &&>::value, "");
static_assert(ala:: is_constructible < X5 const&&>::value == std:: is_constructible < X5 const&&>::value, "");
static_assert(ala:: is_constructible < X5 volatile&&>::value == std:: is_constructible < X5 volatile&&>::value, "");
static_assert(ala:: is_constructible < X5 const volatile&&>::value == std:: is_constructible < X5 const volatile&&>::value, "");
static_assert(ala:: is_constructible < X6 >::value == std:: is_constructible < X6 >::value, "");
static_assert(ala:: is_constructible < X6 const>::value == std:: is_constructible < X6 const>::value, "");
static_assert(ala:: is_constructible < X6 volatile>::value == std:: is_constructible < X6 volatile>::value, "");
static_assert(ala:: is_constructible < X6 const volatile>::value == std:: is_constructible < X6 const volatile>::value, "");
static_assert(ala:: is_constructible < X6 *>::value == std:: is_constructible < X6 *>::value, "");
static_assert(ala:: is_constructible < X6 const*>::value == std:: is_constructible < X6 const*>::value, "");
static_assert(ala:: is_constructible < X6 volatile*>::value == std:: is_constructible < X6 volatile*>::value, "");
static_assert(ala:: is_constructible < X6 const volatile*>::value == std:: is_constructible < X6 const volatile*>::value, "");
static_assert(ala:: is_constructible < X6 &>::value == std:: is_constructible < X6 &>::value, "");
static_assert(ala:: is_constructible < X6 const&>::value == std:: is_constructible < X6 const&>::value, "");
static_assert(ala:: is_constructible < X6 volatile&>::value == std:: is_constructible < X6 volatile&>::value, "");
static_assert(ala:: is_constructible < X6 const volatile&>::value == std:: is_constructible < X6 const volatile&>::value, "");
static_assert(ala:: is_constructible < X6 &&>::value == std:: is_constructible < X6 &&>::value, "");
static_assert(ala:: is_constructible < X6 const&&>::value == std:: is_constructible < X6 const&&>::value, "");
static_assert(ala:: is_constructible < X6 volatile&&>::value == std:: is_constructible < X6 volatile&&>::value, "");
static_assert(ala:: is_constructible < X6 const volatile&&>::value == std:: is_constructible < X6 const volatile&&>::value, "");
 
static_assert(ala:: is_trivially_constructible < void >::value == std:: is_trivially_constructible < void >::value, "");
static_assert(ala:: is_trivially_constructible < void const>::value == std:: is_trivially_constructible < void const>::value, "");
static_assert(ala:: is_trivially_constructible < void volatile>::value == std:: is_trivially_constructible < void volatile>::value, "");
static_assert(ala:: is_trivially_constructible < void const volatile>::value == std:: is_trivially_constructible < void const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < void *>::value == std:: is_trivially_constructible < void *>::value, "");
static_assert(ala:: is_trivially_constructible < void const*>::value == std:: is_trivially_constructible < void const*>::value, "");
static_assert(ala:: is_trivially_constructible < void volatile*>::value == std:: is_trivially_constructible < void volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < void const volatile*>::value == std:: is_trivially_constructible < void const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < char >::value == std:: is_trivially_constructible < char >::value, "");
static_assert(ala:: is_trivially_constructible < char const>::value == std:: is_trivially_constructible < char const>::value, "");
static_assert(ala:: is_trivially_constructible < char volatile>::value == std:: is_trivially_constructible < char volatile>::value, "");
static_assert(ala:: is_trivially_constructible < char const volatile>::value == std:: is_trivially_constructible < char const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < char *>::value == std:: is_trivially_constructible < char *>::value, "");
static_assert(ala:: is_trivially_constructible < char const*>::value == std:: is_trivially_constructible < char const*>::value, "");
static_assert(ala:: is_trivially_constructible < char volatile*>::value == std:: is_trivially_constructible < char volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < char const volatile*>::value == std:: is_trivially_constructible < char const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < char &>::value == std:: is_trivially_constructible < char &>::value, "");
static_assert(ala:: is_trivially_constructible < char const&>::value == std:: is_trivially_constructible < char const&>::value, "");
static_assert(ala:: is_trivially_constructible < char volatile&>::value == std:: is_trivially_constructible < char volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < char const volatile&>::value == std:: is_trivially_constructible < char const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < char &&>::value == std:: is_trivially_constructible < char &&>::value, "");
static_assert(ala:: is_trivially_constructible < char const&&>::value == std:: is_trivially_constructible < char const&&>::value, "");
static_assert(ala:: is_trivially_constructible < char volatile&&>::value == std:: is_trivially_constructible < char volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < char const volatile&&>::value == std:: is_trivially_constructible < char const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < char [8]>::value == std:: is_trivially_constructible < char [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char const [8]>::value == std:: is_trivially_constructible < char const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char volatile [8]>::value == std:: is_trivially_constructible < char volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char const volatile [8]>::value == std:: is_trivially_constructible < char const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < int >::value == std:: is_trivially_constructible < int >::value, "");
static_assert(ala:: is_trivially_constructible < int const>::value == std:: is_trivially_constructible < int const>::value, "");
static_assert(ala:: is_trivially_constructible < int volatile>::value == std:: is_trivially_constructible < int volatile>::value, "");
static_assert(ala:: is_trivially_constructible < int const volatile>::value == std:: is_trivially_constructible < int const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < int *>::value == std:: is_trivially_constructible < int *>::value, "");
static_assert(ala:: is_trivially_constructible < int const*>::value == std:: is_trivially_constructible < int const*>::value, "");
static_assert(ala:: is_trivially_constructible < int volatile*>::value == std:: is_trivially_constructible < int volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < int const volatile*>::value == std:: is_trivially_constructible < int const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < int &>::value == std:: is_trivially_constructible < int &>::value, "");
static_assert(ala:: is_trivially_constructible < int const&>::value == std:: is_trivially_constructible < int const&>::value, "");
static_assert(ala:: is_trivially_constructible < int volatile&>::value == std:: is_trivially_constructible < int volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < int const volatile&>::value == std:: is_trivially_constructible < int const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < int &&>::value == std:: is_trivially_constructible < int &&>::value, "");
static_assert(ala:: is_trivially_constructible < int const&&>::value == std:: is_trivially_constructible < int const&&>::value, "");
static_assert(ala:: is_trivially_constructible < int volatile&&>::value == std:: is_trivially_constructible < int volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < int const volatile&&>::value == std:: is_trivially_constructible < int const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < int [8]>::value == std:: is_trivially_constructible < int [8]>::value, "");
static_assert(ala:: is_trivially_constructible < int const [8]>::value == std:: is_trivially_constructible < int const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < int volatile [8]>::value == std:: is_trivially_constructible < int volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < int const volatile [8]>::value == std:: is_trivially_constructible < int const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long >::value == std:: is_trivially_constructible < long >::value, "");
static_assert(ala:: is_trivially_constructible < long const>::value == std:: is_trivially_constructible < long const>::value, "");
static_assert(ala:: is_trivially_constructible < long volatile>::value == std:: is_trivially_constructible < long volatile>::value, "");
static_assert(ala:: is_trivially_constructible < long const volatile>::value == std:: is_trivially_constructible < long const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < long *>::value == std:: is_trivially_constructible < long *>::value, "");
static_assert(ala:: is_trivially_constructible < long const*>::value == std:: is_trivially_constructible < long const*>::value, "");
static_assert(ala:: is_trivially_constructible < long volatile*>::value == std:: is_trivially_constructible < long volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < long const volatile*>::value == std:: is_trivially_constructible < long const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < long &>::value == std:: is_trivially_constructible < long &>::value, "");
static_assert(ala:: is_trivially_constructible < long const&>::value == std:: is_trivially_constructible < long const&>::value, "");
static_assert(ala:: is_trivially_constructible < long volatile&>::value == std:: is_trivially_constructible < long volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < long const volatile&>::value == std:: is_trivially_constructible < long const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < long &&>::value == std:: is_trivially_constructible < long &&>::value, "");
static_assert(ala:: is_trivially_constructible < long const&&>::value == std:: is_trivially_constructible < long const&&>::value, "");
static_assert(ala:: is_trivially_constructible < long volatile&&>::value == std:: is_trivially_constructible < long volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < long const volatile&&>::value == std:: is_trivially_constructible < long const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < long [8]>::value == std:: is_trivially_constructible < long [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long const [8]>::value == std:: is_trivially_constructible < long const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long volatile [8]>::value == std:: is_trivially_constructible < long volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long const volatile [8]>::value == std:: is_trivially_constructible < long const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long long >::value == std:: is_trivially_constructible < long long >::value, "");
static_assert(ala:: is_trivially_constructible < long long const>::value == std:: is_trivially_constructible < long long const>::value, "");
static_assert(ala:: is_trivially_constructible < long long volatile>::value == std:: is_trivially_constructible < long long volatile>::value, "");
static_assert(ala:: is_trivially_constructible < long long const volatile>::value == std:: is_trivially_constructible < long long const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < long long *>::value == std:: is_trivially_constructible < long long *>::value, "");
static_assert(ala:: is_trivially_constructible < long long const*>::value == std:: is_trivially_constructible < long long const*>::value, "");
static_assert(ala:: is_trivially_constructible < long long volatile*>::value == std:: is_trivially_constructible < long long volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < long long const volatile*>::value == std:: is_trivially_constructible < long long const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < long long &>::value == std:: is_trivially_constructible < long long &>::value, "");
static_assert(ala:: is_trivially_constructible < long long const&>::value == std:: is_trivially_constructible < long long const&>::value, "");
static_assert(ala:: is_trivially_constructible < long long volatile&>::value == std:: is_trivially_constructible < long long volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < long long const volatile&>::value == std:: is_trivially_constructible < long long const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < long long &&>::value == std:: is_trivially_constructible < long long &&>::value, "");
static_assert(ala:: is_trivially_constructible < long long const&&>::value == std:: is_trivially_constructible < long long const&&>::value, "");
static_assert(ala:: is_trivially_constructible < long long volatile&&>::value == std:: is_trivially_constructible < long long volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < long long const volatile&&>::value == std:: is_trivially_constructible < long long const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < long long [8]>::value == std:: is_trivially_constructible < long long [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long long const [8]>::value == std:: is_trivially_constructible < long long const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long long volatile [8]>::value == std:: is_trivially_constructible < long long volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long long const volatile [8]>::value == std:: is_trivially_constructible < long long const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < float >::value == std:: is_trivially_constructible < float >::value, "");
static_assert(ala:: is_trivially_constructible < float const>::value == std:: is_trivially_constructible < float const>::value, "");
static_assert(ala:: is_trivially_constructible < float volatile>::value == std:: is_trivially_constructible < float volatile>::value, "");
static_assert(ala:: is_trivially_constructible < float const volatile>::value == std:: is_trivially_constructible < float const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < float *>::value == std:: is_trivially_constructible < float *>::value, "");
static_assert(ala:: is_trivially_constructible < float const*>::value == std:: is_trivially_constructible < float const*>::value, "");
static_assert(ala:: is_trivially_constructible < float volatile*>::value == std:: is_trivially_constructible < float volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < float const volatile*>::value == std:: is_trivially_constructible < float const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < float &>::value == std:: is_trivially_constructible < float &>::value, "");
static_assert(ala:: is_trivially_constructible < float const&>::value == std:: is_trivially_constructible < float const&>::value, "");
static_assert(ala:: is_trivially_constructible < float volatile&>::value == std:: is_trivially_constructible < float volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < float const volatile&>::value == std:: is_trivially_constructible < float const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < float &&>::value == std:: is_trivially_constructible < float &&>::value, "");
static_assert(ala:: is_trivially_constructible < float const&&>::value == std:: is_trivially_constructible < float const&&>::value, "");
static_assert(ala:: is_trivially_constructible < float volatile&&>::value == std:: is_trivially_constructible < float volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < float const volatile&&>::value == std:: is_trivially_constructible < float const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < float [8]>::value == std:: is_trivially_constructible < float [8]>::value, "");
static_assert(ala:: is_trivially_constructible < float const [8]>::value == std:: is_trivially_constructible < float const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < float volatile [8]>::value == std:: is_trivially_constructible < float volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < float const volatile [8]>::value == std:: is_trivially_constructible < float const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < double >::value == std:: is_trivially_constructible < double >::value, "");
static_assert(ala:: is_trivially_constructible < double const>::value == std:: is_trivially_constructible < double const>::value, "");
static_assert(ala:: is_trivially_constructible < double volatile>::value == std:: is_trivially_constructible < double volatile>::value, "");
static_assert(ala:: is_trivially_constructible < double const volatile>::value == std:: is_trivially_constructible < double const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < double *>::value == std:: is_trivially_constructible < double *>::value, "");
static_assert(ala:: is_trivially_constructible < double const*>::value == std:: is_trivially_constructible < double const*>::value, "");
static_assert(ala:: is_trivially_constructible < double volatile*>::value == std:: is_trivially_constructible < double volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < double const volatile*>::value == std:: is_trivially_constructible < double const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < double &>::value == std:: is_trivially_constructible < double &>::value, "");
static_assert(ala:: is_trivially_constructible < double const&>::value == std:: is_trivially_constructible < double const&>::value, "");
static_assert(ala:: is_trivially_constructible < double volatile&>::value == std:: is_trivially_constructible < double volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < double const volatile&>::value == std:: is_trivially_constructible < double const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < double &&>::value == std:: is_trivially_constructible < double &&>::value, "");
static_assert(ala:: is_trivially_constructible < double const&&>::value == std:: is_trivially_constructible < double const&&>::value, "");
static_assert(ala:: is_trivially_constructible < double volatile&&>::value == std:: is_trivially_constructible < double volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < double const volatile&&>::value == std:: is_trivially_constructible < double const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < double [8]>::value == std:: is_trivially_constructible < double [8]>::value, "");
static_assert(ala:: is_trivially_constructible < double const [8]>::value == std:: is_trivially_constructible < double const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < double volatile [8]>::value == std:: is_trivially_constructible < double volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < double const volatile [8]>::value == std:: is_trivially_constructible < double const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long double >::value == std:: is_trivially_constructible < long double >::value, "");
static_assert(ala:: is_trivially_constructible < long double const>::value == std:: is_trivially_constructible < long double const>::value, "");
static_assert(ala:: is_trivially_constructible < long double volatile>::value == std:: is_trivially_constructible < long double volatile>::value, "");
static_assert(ala:: is_trivially_constructible < long double const volatile>::value == std:: is_trivially_constructible < long double const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < long double *>::value == std:: is_trivially_constructible < long double *>::value, "");
static_assert(ala:: is_trivially_constructible < long double const*>::value == std:: is_trivially_constructible < long double const*>::value, "");
static_assert(ala:: is_trivially_constructible < long double volatile*>::value == std:: is_trivially_constructible < long double volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < long double const volatile*>::value == std:: is_trivially_constructible < long double const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < long double &>::value == std:: is_trivially_constructible < long double &>::value, "");
static_assert(ala:: is_trivially_constructible < long double const&>::value == std:: is_trivially_constructible < long double const&>::value, "");
static_assert(ala:: is_trivially_constructible < long double volatile&>::value == std:: is_trivially_constructible < long double volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < long double const volatile&>::value == std:: is_trivially_constructible < long double const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < long double &&>::value == std:: is_trivially_constructible < long double &&>::value, "");
static_assert(ala:: is_trivially_constructible < long double const&&>::value == std:: is_trivially_constructible < long double const&&>::value, "");
static_assert(ala:: is_trivially_constructible < long double volatile&&>::value == std:: is_trivially_constructible < long double volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < long double const volatile&&>::value == std:: is_trivially_constructible < long double const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < long double [8]>::value == std:: is_trivially_constructible < long double [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long double const [8]>::value == std:: is_trivially_constructible < long double const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long double volatile [8]>::value == std:: is_trivially_constructible < long double volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < long double const volatile [8]>::value == std:: is_trivially_constructible < long double const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t >::value == std:: is_trivially_constructible < wchar_t >::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const>::value == std:: is_trivially_constructible < wchar_t const>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t volatile>::value == std:: is_trivially_constructible < wchar_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const volatile>::value == std:: is_trivially_constructible < wchar_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t *>::value == std:: is_trivially_constructible < wchar_t *>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const*>::value == std:: is_trivially_constructible < wchar_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t volatile*>::value == std:: is_trivially_constructible < wchar_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const volatile*>::value == std:: is_trivially_constructible < wchar_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t &>::value == std:: is_trivially_constructible < wchar_t &>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const&>::value == std:: is_trivially_constructible < wchar_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t volatile&>::value == std:: is_trivially_constructible < wchar_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const volatile&>::value == std:: is_trivially_constructible < wchar_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t &&>::value == std:: is_trivially_constructible < wchar_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const&&>::value == std:: is_trivially_constructible < wchar_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t volatile&&>::value == std:: is_trivially_constructible < wchar_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const volatile&&>::value == std:: is_trivially_constructible < wchar_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t [8]>::value == std:: is_trivially_constructible < wchar_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const [8]>::value == std:: is_trivially_constructible < wchar_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t volatile [8]>::value == std:: is_trivially_constructible < wchar_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < wchar_t const volatile [8]>::value == std:: is_trivially_constructible < wchar_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t >::value == std:: is_trivially_constructible < char16_t >::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const>::value == std:: is_trivially_constructible < char16_t const>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t volatile>::value == std:: is_trivially_constructible < char16_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const volatile>::value == std:: is_trivially_constructible < char16_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t *>::value == std:: is_trivially_constructible < char16_t *>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const*>::value == std:: is_trivially_constructible < char16_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t volatile*>::value == std:: is_trivially_constructible < char16_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const volatile*>::value == std:: is_trivially_constructible < char16_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t &>::value == std:: is_trivially_constructible < char16_t &>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const&>::value == std:: is_trivially_constructible < char16_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t volatile&>::value == std:: is_trivially_constructible < char16_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const volatile&>::value == std:: is_trivially_constructible < char16_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t &&>::value == std:: is_trivially_constructible < char16_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const&&>::value == std:: is_trivially_constructible < char16_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t volatile&&>::value == std:: is_trivially_constructible < char16_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const volatile&&>::value == std:: is_trivially_constructible < char16_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t [8]>::value == std:: is_trivially_constructible < char16_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const [8]>::value == std:: is_trivially_constructible < char16_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t volatile [8]>::value == std:: is_trivially_constructible < char16_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char16_t const volatile [8]>::value == std:: is_trivially_constructible < char16_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t >::value == std:: is_trivially_constructible < char32_t >::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const>::value == std:: is_trivially_constructible < char32_t const>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t volatile>::value == std:: is_trivially_constructible < char32_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const volatile>::value == std:: is_trivially_constructible < char32_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t *>::value == std:: is_trivially_constructible < char32_t *>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const*>::value == std:: is_trivially_constructible < char32_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t volatile*>::value == std:: is_trivially_constructible < char32_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const volatile*>::value == std:: is_trivially_constructible < char32_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t &>::value == std:: is_trivially_constructible < char32_t &>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const&>::value == std:: is_trivially_constructible < char32_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t volatile&>::value == std:: is_trivially_constructible < char32_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const volatile&>::value == std:: is_trivially_constructible < char32_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t &&>::value == std:: is_trivially_constructible < char32_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const&&>::value == std:: is_trivially_constructible < char32_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t volatile&&>::value == std:: is_trivially_constructible < char32_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const volatile&&>::value == std:: is_trivially_constructible < char32_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t [8]>::value == std:: is_trivially_constructible < char32_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const [8]>::value == std:: is_trivially_constructible < char32_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t volatile [8]>::value == std:: is_trivially_constructible < char32_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < char32_t const volatile [8]>::value == std:: is_trivially_constructible < char32_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t >::value == std:: is_trivially_constructible < ala::int8_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const>::value == std:: is_trivially_constructible < ala::int8_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t volatile>::value == std:: is_trivially_constructible < ala::int8_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const volatile>::value == std:: is_trivially_constructible < ala::int8_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t *>::value == std:: is_trivially_constructible < ala::int8_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const*>::value == std:: is_trivially_constructible < ala::int8_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t volatile*>::value == std:: is_trivially_constructible < ala::int8_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const volatile*>::value == std:: is_trivially_constructible < ala::int8_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t &>::value == std:: is_trivially_constructible < ala::int8_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const&>::value == std:: is_trivially_constructible < ala::int8_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t volatile&>::value == std:: is_trivially_constructible < ala::int8_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const volatile&>::value == std:: is_trivially_constructible < ala::int8_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t &&>::value == std:: is_trivially_constructible < ala::int8_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const&&>::value == std:: is_trivially_constructible < ala::int8_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t volatile&&>::value == std:: is_trivially_constructible < ala::int8_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const volatile&&>::value == std:: is_trivially_constructible < ala::int8_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t [8]>::value == std:: is_trivially_constructible < ala::int8_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const [8]>::value == std:: is_trivially_constructible < ala::int8_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t volatile [8]>::value == std:: is_trivially_constructible < ala::int8_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int8_t const volatile [8]>::value == std:: is_trivially_constructible < ala::int8_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t >::value == std:: is_trivially_constructible < ala::uint8_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const>::value == std:: is_trivially_constructible < ala::uint8_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t volatile>::value == std:: is_trivially_constructible < ala::uint8_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const volatile>::value == std:: is_trivially_constructible < ala::uint8_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t *>::value == std:: is_trivially_constructible < ala::uint8_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const*>::value == std:: is_trivially_constructible < ala::uint8_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t volatile*>::value == std:: is_trivially_constructible < ala::uint8_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const volatile*>::value == std:: is_trivially_constructible < ala::uint8_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t &>::value == std:: is_trivially_constructible < ala::uint8_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const&>::value == std:: is_trivially_constructible < ala::uint8_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t volatile&>::value == std:: is_trivially_constructible < ala::uint8_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const volatile&>::value == std:: is_trivially_constructible < ala::uint8_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t &&>::value == std:: is_trivially_constructible < ala::uint8_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const&&>::value == std:: is_trivially_constructible < ala::uint8_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t volatile&&>::value == std:: is_trivially_constructible < ala::uint8_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const volatile&&>::value == std:: is_trivially_constructible < ala::uint8_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t [8]>::value == std:: is_trivially_constructible < ala::uint8_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const [8]>::value == std:: is_trivially_constructible < ala::uint8_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t volatile [8]>::value == std:: is_trivially_constructible < ala::uint8_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint8_t const volatile [8]>::value == std:: is_trivially_constructible < ala::uint8_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t >::value == std:: is_trivially_constructible < ala::int16_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const>::value == std:: is_trivially_constructible < ala::int16_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t volatile>::value == std:: is_trivially_constructible < ala::int16_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const volatile>::value == std:: is_trivially_constructible < ala::int16_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t *>::value == std:: is_trivially_constructible < ala::int16_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const*>::value == std:: is_trivially_constructible < ala::int16_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t volatile*>::value == std:: is_trivially_constructible < ala::int16_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const volatile*>::value == std:: is_trivially_constructible < ala::int16_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t &>::value == std:: is_trivially_constructible < ala::int16_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const&>::value == std:: is_trivially_constructible < ala::int16_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t volatile&>::value == std:: is_trivially_constructible < ala::int16_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const volatile&>::value == std:: is_trivially_constructible < ala::int16_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t &&>::value == std:: is_trivially_constructible < ala::int16_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const&&>::value == std:: is_trivially_constructible < ala::int16_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t volatile&&>::value == std:: is_trivially_constructible < ala::int16_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const volatile&&>::value == std:: is_trivially_constructible < ala::int16_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t [8]>::value == std:: is_trivially_constructible < ala::int16_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const [8]>::value == std:: is_trivially_constructible < ala::int16_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t volatile [8]>::value == std:: is_trivially_constructible < ala::int16_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int16_t const volatile [8]>::value == std:: is_trivially_constructible < ala::int16_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t >::value == std:: is_trivially_constructible < ala::uint16_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const>::value == std:: is_trivially_constructible < ala::uint16_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t volatile>::value == std:: is_trivially_constructible < ala::uint16_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const volatile>::value == std:: is_trivially_constructible < ala::uint16_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t *>::value == std:: is_trivially_constructible < ala::uint16_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const*>::value == std:: is_trivially_constructible < ala::uint16_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t volatile*>::value == std:: is_trivially_constructible < ala::uint16_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const volatile*>::value == std:: is_trivially_constructible < ala::uint16_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t &>::value == std:: is_trivially_constructible < ala::uint16_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const&>::value == std:: is_trivially_constructible < ala::uint16_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t volatile&>::value == std:: is_trivially_constructible < ala::uint16_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const volatile&>::value == std:: is_trivially_constructible < ala::uint16_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t &&>::value == std:: is_trivially_constructible < ala::uint16_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const&&>::value == std:: is_trivially_constructible < ala::uint16_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t volatile&&>::value == std:: is_trivially_constructible < ala::uint16_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const volatile&&>::value == std:: is_trivially_constructible < ala::uint16_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t [8]>::value == std:: is_trivially_constructible < ala::uint16_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const [8]>::value == std:: is_trivially_constructible < ala::uint16_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t volatile [8]>::value == std:: is_trivially_constructible < ala::uint16_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint16_t const volatile [8]>::value == std:: is_trivially_constructible < ala::uint16_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t >::value == std:: is_trivially_constructible < ala::int32_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const>::value == std:: is_trivially_constructible < ala::int32_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t volatile>::value == std:: is_trivially_constructible < ala::int32_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const volatile>::value == std:: is_trivially_constructible < ala::int32_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t *>::value == std:: is_trivially_constructible < ala::int32_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const*>::value == std:: is_trivially_constructible < ala::int32_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t volatile*>::value == std:: is_trivially_constructible < ala::int32_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const volatile*>::value == std:: is_trivially_constructible < ala::int32_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t &>::value == std:: is_trivially_constructible < ala::int32_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const&>::value == std:: is_trivially_constructible < ala::int32_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t volatile&>::value == std:: is_trivially_constructible < ala::int32_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const volatile&>::value == std:: is_trivially_constructible < ala::int32_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t &&>::value == std:: is_trivially_constructible < ala::int32_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const&&>::value == std:: is_trivially_constructible < ala::int32_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t volatile&&>::value == std:: is_trivially_constructible < ala::int32_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const volatile&&>::value == std:: is_trivially_constructible < ala::int32_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t [8]>::value == std:: is_trivially_constructible < ala::int32_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const [8]>::value == std:: is_trivially_constructible < ala::int32_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t volatile [8]>::value == std:: is_trivially_constructible < ala::int32_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int32_t const volatile [8]>::value == std:: is_trivially_constructible < ala::int32_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t >::value == std:: is_trivially_constructible < ala::uint32_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const>::value == std:: is_trivially_constructible < ala::uint32_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t volatile>::value == std:: is_trivially_constructible < ala::uint32_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const volatile>::value == std:: is_trivially_constructible < ala::uint32_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t *>::value == std:: is_trivially_constructible < ala::uint32_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const*>::value == std:: is_trivially_constructible < ala::uint32_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t volatile*>::value == std:: is_trivially_constructible < ala::uint32_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const volatile*>::value == std:: is_trivially_constructible < ala::uint32_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t &>::value == std:: is_trivially_constructible < ala::uint32_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const&>::value == std:: is_trivially_constructible < ala::uint32_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t volatile&>::value == std:: is_trivially_constructible < ala::uint32_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const volatile&>::value == std:: is_trivially_constructible < ala::uint32_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t &&>::value == std:: is_trivially_constructible < ala::uint32_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const&&>::value == std:: is_trivially_constructible < ala::uint32_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t volatile&&>::value == std:: is_trivially_constructible < ala::uint32_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const volatile&&>::value == std:: is_trivially_constructible < ala::uint32_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t [8]>::value == std:: is_trivially_constructible < ala::uint32_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const [8]>::value == std:: is_trivially_constructible < ala::uint32_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t volatile [8]>::value == std:: is_trivially_constructible < ala::uint32_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint32_t const volatile [8]>::value == std:: is_trivially_constructible < ala::uint32_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t >::value == std:: is_trivially_constructible < ala::int64_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const>::value == std:: is_trivially_constructible < ala::int64_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t volatile>::value == std:: is_trivially_constructible < ala::int64_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const volatile>::value == std:: is_trivially_constructible < ala::int64_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t *>::value == std:: is_trivially_constructible < ala::int64_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const*>::value == std:: is_trivially_constructible < ala::int64_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t volatile*>::value == std:: is_trivially_constructible < ala::int64_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const volatile*>::value == std:: is_trivially_constructible < ala::int64_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t &>::value == std:: is_trivially_constructible < ala::int64_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const&>::value == std:: is_trivially_constructible < ala::int64_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t volatile&>::value == std:: is_trivially_constructible < ala::int64_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const volatile&>::value == std:: is_trivially_constructible < ala::int64_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t &&>::value == std:: is_trivially_constructible < ala::int64_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const&&>::value == std:: is_trivially_constructible < ala::int64_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t volatile&&>::value == std:: is_trivially_constructible < ala::int64_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const volatile&&>::value == std:: is_trivially_constructible < ala::int64_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t [8]>::value == std:: is_trivially_constructible < ala::int64_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const [8]>::value == std:: is_trivially_constructible < ala::int64_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t volatile [8]>::value == std:: is_trivially_constructible < ala::int64_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::int64_t const volatile [8]>::value == std:: is_trivially_constructible < ala::int64_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t >::value == std:: is_trivially_constructible < ala::uint64_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const>::value == std:: is_trivially_constructible < ala::uint64_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t volatile>::value == std:: is_trivially_constructible < ala::uint64_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const volatile>::value == std:: is_trivially_constructible < ala::uint64_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t *>::value == std:: is_trivially_constructible < ala::uint64_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const*>::value == std:: is_trivially_constructible < ala::uint64_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t volatile*>::value == std:: is_trivially_constructible < ala::uint64_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const volatile*>::value == std:: is_trivially_constructible < ala::uint64_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t &>::value == std:: is_trivially_constructible < ala::uint64_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const&>::value == std:: is_trivially_constructible < ala::uint64_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t volatile&>::value == std:: is_trivially_constructible < ala::uint64_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const volatile&>::value == std:: is_trivially_constructible < ala::uint64_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t &&>::value == std:: is_trivially_constructible < ala::uint64_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const&&>::value == std:: is_trivially_constructible < ala::uint64_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t volatile&&>::value == std:: is_trivially_constructible < ala::uint64_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const volatile&&>::value == std:: is_trivially_constructible < ala::uint64_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t [8]>::value == std:: is_trivially_constructible < ala::uint64_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const [8]>::value == std:: is_trivially_constructible < ala::uint64_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t volatile [8]>::value == std:: is_trivially_constructible < ala::uint64_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::uint64_t const volatile [8]>::value == std:: is_trivially_constructible < ala::uint64_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t >::value == std:: is_trivially_constructible < ala::size_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const>::value == std:: is_trivially_constructible < ala::size_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t volatile>::value == std:: is_trivially_constructible < ala::size_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const volatile>::value == std:: is_trivially_constructible < ala::size_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t *>::value == std:: is_trivially_constructible < ala::size_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const*>::value == std:: is_trivially_constructible < ala::size_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t volatile*>::value == std:: is_trivially_constructible < ala::size_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const volatile*>::value == std:: is_trivially_constructible < ala::size_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t &>::value == std:: is_trivially_constructible < ala::size_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const&>::value == std:: is_trivially_constructible < ala::size_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t volatile&>::value == std:: is_trivially_constructible < ala::size_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const volatile&>::value == std:: is_trivially_constructible < ala::size_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t &&>::value == std:: is_trivially_constructible < ala::size_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const&&>::value == std:: is_trivially_constructible < ala::size_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t volatile&&>::value == std:: is_trivially_constructible < ala::size_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const volatile&&>::value == std:: is_trivially_constructible < ala::size_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t [8]>::value == std:: is_trivially_constructible < ala::size_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const [8]>::value == std:: is_trivially_constructible < ala::size_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t volatile [8]>::value == std:: is_trivially_constructible < ala::size_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::size_t const volatile [8]>::value == std:: is_trivially_constructible < ala::size_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t >::value == std:: is_trivially_constructible < ala::ptrdiff_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const>::value == std:: is_trivially_constructible < ala::ptrdiff_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t volatile>::value == std:: is_trivially_constructible < ala::ptrdiff_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const volatile>::value == std:: is_trivially_constructible < ala::ptrdiff_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t *>::value == std:: is_trivially_constructible < ala::ptrdiff_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const*>::value == std:: is_trivially_constructible < ala::ptrdiff_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t volatile*>::value == std:: is_trivially_constructible < ala::ptrdiff_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const volatile*>::value == std:: is_trivially_constructible < ala::ptrdiff_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t &>::value == std:: is_trivially_constructible < ala::ptrdiff_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const&>::value == std:: is_trivially_constructible < ala::ptrdiff_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t volatile&>::value == std:: is_trivially_constructible < ala::ptrdiff_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const volatile&>::value == std:: is_trivially_constructible < ala::ptrdiff_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t &&>::value == std:: is_trivially_constructible < ala::ptrdiff_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const&&>::value == std:: is_trivially_constructible < ala::ptrdiff_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t volatile&&>::value == std:: is_trivially_constructible < ala::ptrdiff_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const volatile&&>::value == std:: is_trivially_constructible < ala::ptrdiff_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t [8]>::value == std:: is_trivially_constructible < ala::ptrdiff_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const [8]>::value == std:: is_trivially_constructible < ala::ptrdiff_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t volatile [8]>::value == std:: is_trivially_constructible < ala::ptrdiff_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::ptrdiff_t const volatile [8]>::value == std:: is_trivially_constructible < ala::ptrdiff_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t >::value == std:: is_trivially_constructible < ala::intptr_t >::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const>::value == std:: is_trivially_constructible < ala::intptr_t const>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t volatile>::value == std:: is_trivially_constructible < ala::intptr_t volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const volatile>::value == std:: is_trivially_constructible < ala::intptr_t const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t *>::value == std:: is_trivially_constructible < ala::intptr_t *>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const*>::value == std:: is_trivially_constructible < ala::intptr_t const*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t volatile*>::value == std:: is_trivially_constructible < ala::intptr_t volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const volatile*>::value == std:: is_trivially_constructible < ala::intptr_t const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t &>::value == std:: is_trivially_constructible < ala::intptr_t &>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const&>::value == std:: is_trivially_constructible < ala::intptr_t const&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t volatile&>::value == std:: is_trivially_constructible < ala::intptr_t volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const volatile&>::value == std:: is_trivially_constructible < ala::intptr_t const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t &&>::value == std:: is_trivially_constructible < ala::intptr_t &&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const&&>::value == std:: is_trivially_constructible < ala::intptr_t const&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t volatile&&>::value == std:: is_trivially_constructible < ala::intptr_t volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const volatile&&>::value == std:: is_trivially_constructible < ala::intptr_t const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t [8]>::value == std:: is_trivially_constructible < ala::intptr_t [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const [8]>::value == std:: is_trivially_constructible < ala::intptr_t const [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t volatile [8]>::value == std:: is_trivially_constructible < ala::intptr_t volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < ala::intptr_t const volatile [8]>::value == std:: is_trivially_constructible < ala::intptr_t const volatile [8]>::value, "");
static_assert(ala:: is_trivially_constructible < C0 >::value == std:: is_trivially_constructible < C0 >::value, "");
static_assert(ala:: is_trivially_constructible < C0 const>::value == std:: is_trivially_constructible < C0 const>::value, "");
static_assert(ala:: is_trivially_constructible < C0 volatile>::value == std:: is_trivially_constructible < C0 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < C0 const volatile>::value == std:: is_trivially_constructible < C0 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < C0 *>::value == std:: is_trivially_constructible < C0 *>::value, "");
static_assert(ala:: is_trivially_constructible < C0 const*>::value == std:: is_trivially_constructible < C0 const*>::value, "");
static_assert(ala:: is_trivially_constructible < C0 volatile*>::value == std:: is_trivially_constructible < C0 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < C0 const volatile*>::value == std:: is_trivially_constructible < C0 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < C0 &>::value == std:: is_trivially_constructible < C0 &>::value, "");
static_assert(ala:: is_trivially_constructible < C0 const&>::value == std:: is_trivially_constructible < C0 const&>::value, "");
static_assert(ala:: is_trivially_constructible < C0 volatile&>::value == std:: is_trivially_constructible < C0 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < C0 const volatile&>::value == std:: is_trivially_constructible < C0 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < C0 &&>::value == std:: is_trivially_constructible < C0 &&>::value, "");
static_assert(ala:: is_trivially_constructible < C0 const&&>::value == std:: is_trivially_constructible < C0 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < C0 volatile&&>::value == std:: is_trivially_constructible < C0 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < C0 const volatile&&>::value == std:: is_trivially_constructible < C0 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < C1 >::value == std:: is_trivially_constructible < C1 >::value, "");
static_assert(ala:: is_trivially_constructible < C1 const>::value == std:: is_trivially_constructible < C1 const>::value, "");
static_assert(ala:: is_trivially_constructible < C1 volatile>::value == std:: is_trivially_constructible < C1 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < C1 const volatile>::value == std:: is_trivially_constructible < C1 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < C1 *>::value == std:: is_trivially_constructible < C1 *>::value, "");
static_assert(ala:: is_trivially_constructible < C1 const*>::value == std:: is_trivially_constructible < C1 const*>::value, "");
static_assert(ala:: is_trivially_constructible < C1 volatile*>::value == std:: is_trivially_constructible < C1 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < C1 const volatile*>::value == std:: is_trivially_constructible < C1 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < C1 &>::value == std:: is_trivially_constructible < C1 &>::value, "");
static_assert(ala:: is_trivially_constructible < C1 const&>::value == std:: is_trivially_constructible < C1 const&>::value, "");
static_assert(ala:: is_trivially_constructible < C1 volatile&>::value == std:: is_trivially_constructible < C1 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < C1 const volatile&>::value == std:: is_trivially_constructible < C1 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < C1 &&>::value == std:: is_trivially_constructible < C1 &&>::value, "");
static_assert(ala:: is_trivially_constructible < C1 const&&>::value == std:: is_trivially_constructible < C1 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < C1 volatile&&>::value == std:: is_trivially_constructible < C1 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < C1 const volatile&&>::value == std:: is_trivially_constructible < C1 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < C2 >::value == std:: is_trivially_constructible < C2 >::value, "");
static_assert(ala:: is_trivially_constructible < C2 const>::value == std:: is_trivially_constructible < C2 const>::value, "");
static_assert(ala:: is_trivially_constructible < C2 volatile>::value == std:: is_trivially_constructible < C2 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < C2 const volatile>::value == std:: is_trivially_constructible < C2 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < C2 *>::value == std:: is_trivially_constructible < C2 *>::value, "");
static_assert(ala:: is_trivially_constructible < C2 const*>::value == std:: is_trivially_constructible < C2 const*>::value, "");
static_assert(ala:: is_trivially_constructible < C2 volatile*>::value == std:: is_trivially_constructible < C2 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < C2 const volatile*>::value == std:: is_trivially_constructible < C2 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < C2 &>::value == std:: is_trivially_constructible < C2 &>::value, "");
static_assert(ala:: is_trivially_constructible < C2 const&>::value == std:: is_trivially_constructible < C2 const&>::value, "");
static_assert(ala:: is_trivially_constructible < C2 volatile&>::value == std:: is_trivially_constructible < C2 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < C2 const volatile&>::value == std:: is_trivially_constructible < C2 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < C2 &&>::value == std:: is_trivially_constructible < C2 &&>::value, "");
static_assert(ala:: is_trivially_constructible < C2 const&&>::value == std:: is_trivially_constructible < C2 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < C2 volatile&&>::value == std:: is_trivially_constructible < C2 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < C2 const volatile&&>::value == std:: is_trivially_constructible < C2 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < S0 >::value == std:: is_trivially_constructible < S0 >::value, "");
static_assert(ala:: is_trivially_constructible < S0 const>::value == std:: is_trivially_constructible < S0 const>::value, "");
static_assert(ala:: is_trivially_constructible < S0 volatile>::value == std:: is_trivially_constructible < S0 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < S0 const volatile>::value == std:: is_trivially_constructible < S0 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < S0 *>::value == std:: is_trivially_constructible < S0 *>::value, "");
static_assert(ala:: is_trivially_constructible < S0 const*>::value == std:: is_trivially_constructible < S0 const*>::value, "");
static_assert(ala:: is_trivially_constructible < S0 volatile*>::value == std:: is_trivially_constructible < S0 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < S0 const volatile*>::value == std:: is_trivially_constructible < S0 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < S0 &>::value == std:: is_trivially_constructible < S0 &>::value, "");
static_assert(ala:: is_trivially_constructible < S0 const&>::value == std:: is_trivially_constructible < S0 const&>::value, "");
static_assert(ala:: is_trivially_constructible < S0 volatile&>::value == std:: is_trivially_constructible < S0 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < S0 const volatile&>::value == std:: is_trivially_constructible < S0 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < S0 &&>::value == std:: is_trivially_constructible < S0 &&>::value, "");
static_assert(ala:: is_trivially_constructible < S0 const&&>::value == std:: is_trivially_constructible < S0 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < S0 volatile&&>::value == std:: is_trivially_constructible < S0 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < S0 const volatile&&>::value == std:: is_trivially_constructible < S0 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < S1 >::value == std:: is_trivially_constructible < S1 >::value, "");
static_assert(ala:: is_trivially_constructible < S1 const>::value == std:: is_trivially_constructible < S1 const>::value, "");
static_assert(ala:: is_trivially_constructible < S1 volatile>::value == std:: is_trivially_constructible < S1 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < S1 const volatile>::value == std:: is_trivially_constructible < S1 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < S1 *>::value == std:: is_trivially_constructible < S1 *>::value, "");
static_assert(ala:: is_trivially_constructible < S1 const*>::value == std:: is_trivially_constructible < S1 const*>::value, "");
static_assert(ala:: is_trivially_constructible < S1 volatile*>::value == std:: is_trivially_constructible < S1 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < S1 const volatile*>::value == std:: is_trivially_constructible < S1 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < S1 &>::value == std:: is_trivially_constructible < S1 &>::value, "");
static_assert(ala:: is_trivially_constructible < S1 const&>::value == std:: is_trivially_constructible < S1 const&>::value, "");
static_assert(ala:: is_trivially_constructible < S1 volatile&>::value == std:: is_trivially_constructible < S1 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < S1 const volatile&>::value == std:: is_trivially_constructible < S1 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < S1 &&>::value == std:: is_trivially_constructible < S1 &&>::value, "");
static_assert(ala:: is_trivially_constructible < S1 const&&>::value == std:: is_trivially_constructible < S1 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < S1 volatile&&>::value == std:: is_trivially_constructible < S1 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < S1 const volatile&&>::value == std:: is_trivially_constructible < S1 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < S2 >::value == std:: is_trivially_constructible < S2 >::value, "");
static_assert(ala:: is_trivially_constructible < S2 const>::value == std:: is_trivially_constructible < S2 const>::value, "");
static_assert(ala:: is_trivially_constructible < S2 volatile>::value == std:: is_trivially_constructible < S2 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < S2 const volatile>::value == std:: is_trivially_constructible < S2 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < S2 *>::value == std:: is_trivially_constructible < S2 *>::value, "");
static_assert(ala:: is_trivially_constructible < S2 const*>::value == std:: is_trivially_constructible < S2 const*>::value, "");
static_assert(ala:: is_trivially_constructible < S2 volatile*>::value == std:: is_trivially_constructible < S2 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < S2 const volatile*>::value == std:: is_trivially_constructible < S2 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < S2 &>::value == std:: is_trivially_constructible < S2 &>::value, "");
static_assert(ala:: is_trivially_constructible < S2 const&>::value == std:: is_trivially_constructible < S2 const&>::value, "");
static_assert(ala:: is_trivially_constructible < S2 volatile&>::value == std:: is_trivially_constructible < S2 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < S2 const volatile&>::value == std:: is_trivially_constructible < S2 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < S2 &&>::value == std:: is_trivially_constructible < S2 &&>::value, "");
static_assert(ala:: is_trivially_constructible < S2 const&&>::value == std:: is_trivially_constructible < S2 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < S2 volatile&&>::value == std:: is_trivially_constructible < S2 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < S2 const volatile&&>::value == std:: is_trivially_constructible < S2 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < E >::value == std:: is_trivially_constructible < E >::value, "");
static_assert(ala:: is_trivially_constructible < E const>::value == std:: is_trivially_constructible < E const>::value, "");
static_assert(ala:: is_trivially_constructible < E volatile>::value == std:: is_trivially_constructible < E volatile>::value, "");
static_assert(ala:: is_trivially_constructible < E const volatile>::value == std:: is_trivially_constructible < E const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < E *>::value == std:: is_trivially_constructible < E *>::value, "");
static_assert(ala:: is_trivially_constructible < E const*>::value == std:: is_trivially_constructible < E const*>::value, "");
static_assert(ala:: is_trivially_constructible < E volatile*>::value == std:: is_trivially_constructible < E volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < E const volatile*>::value == std:: is_trivially_constructible < E const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < E &>::value == std:: is_trivially_constructible < E &>::value, "");
static_assert(ala:: is_trivially_constructible < E const&>::value == std:: is_trivially_constructible < E const&>::value, "");
static_assert(ala:: is_trivially_constructible < E volatile&>::value == std:: is_trivially_constructible < E volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < E const volatile&>::value == std:: is_trivially_constructible < E const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < E &&>::value == std:: is_trivially_constructible < E &&>::value, "");
static_assert(ala:: is_trivially_constructible < E const&&>::value == std:: is_trivially_constructible < E const&&>::value, "");
static_assert(ala:: is_trivially_constructible < E volatile&&>::value == std:: is_trivially_constructible < E volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < E const volatile&&>::value == std:: is_trivially_constructible < E const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < U >::value == std:: is_trivially_constructible < U >::value, "");
static_assert(ala:: is_trivially_constructible < U const>::value == std:: is_trivially_constructible < U const>::value, "");
static_assert(ala:: is_trivially_constructible < U volatile>::value == std:: is_trivially_constructible < U volatile>::value, "");
static_assert(ala:: is_trivially_constructible < U const volatile>::value == std:: is_trivially_constructible < U const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < U *>::value == std:: is_trivially_constructible < U *>::value, "");
static_assert(ala:: is_trivially_constructible < U const*>::value == std:: is_trivially_constructible < U const*>::value, "");
static_assert(ala:: is_trivially_constructible < U volatile*>::value == std:: is_trivially_constructible < U volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < U const volatile*>::value == std:: is_trivially_constructible < U const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < U &>::value == std:: is_trivially_constructible < U &>::value, "");
static_assert(ala:: is_trivially_constructible < U const&>::value == std:: is_trivially_constructible < U const&>::value, "");
static_assert(ala:: is_trivially_constructible < U volatile&>::value == std:: is_trivially_constructible < U volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < U const volatile&>::value == std:: is_trivially_constructible < U const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < U &&>::value == std:: is_trivially_constructible < U &&>::value, "");
static_assert(ala:: is_trivially_constructible < U const&&>::value == std:: is_trivially_constructible < U const&&>::value, "");
static_assert(ala:: is_trivially_constructible < U volatile&&>::value == std:: is_trivially_constructible < U volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < U const volatile&&>::value == std:: is_trivially_constructible < U const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X0 >::value == std:: is_trivially_constructible < X0 >::value, "");
static_assert(ala:: is_trivially_constructible < X0 const>::value == std:: is_trivially_constructible < X0 const>::value, "");
static_assert(ala:: is_trivially_constructible < X0 volatile>::value == std:: is_trivially_constructible < X0 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X0 const volatile>::value == std:: is_trivially_constructible < X0 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X0 *>::value == std:: is_trivially_constructible < X0 *>::value, "");
static_assert(ala:: is_trivially_constructible < X0 const*>::value == std:: is_trivially_constructible < X0 const*>::value, "");
static_assert(ala:: is_trivially_constructible < X0 volatile*>::value == std:: is_trivially_constructible < X0 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X0 const volatile*>::value == std:: is_trivially_constructible < X0 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X0 &>::value == std:: is_trivially_constructible < X0 &>::value, "");
static_assert(ala:: is_trivially_constructible < X0 const&>::value == std:: is_trivially_constructible < X0 const&>::value, "");
static_assert(ala:: is_trivially_constructible < X0 volatile&>::value == std:: is_trivially_constructible < X0 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X0 const volatile&>::value == std:: is_trivially_constructible < X0 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X0 &&>::value == std:: is_trivially_constructible < X0 &&>::value, "");
static_assert(ala:: is_trivially_constructible < X0 const&&>::value == std:: is_trivially_constructible < X0 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < X0 volatile&&>::value == std:: is_trivially_constructible < X0 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X0 const volatile&&>::value == std:: is_trivially_constructible < X0 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X1 >::value == std:: is_trivially_constructible < X1 >::value, "");
static_assert(ala:: is_trivially_constructible < X1 const>::value == std:: is_trivially_constructible < X1 const>::value, "");
static_assert(ala:: is_trivially_constructible < X1 volatile>::value == std:: is_trivially_constructible < X1 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X1 const volatile>::value == std:: is_trivially_constructible < X1 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X1 *>::value == std:: is_trivially_constructible < X1 *>::value, "");
static_assert(ala:: is_trivially_constructible < X1 const*>::value == std:: is_trivially_constructible < X1 const*>::value, "");
static_assert(ala:: is_trivially_constructible < X1 volatile*>::value == std:: is_trivially_constructible < X1 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X1 const volatile*>::value == std:: is_trivially_constructible < X1 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X1 &>::value == std:: is_trivially_constructible < X1 &>::value, "");
static_assert(ala:: is_trivially_constructible < X1 const&>::value == std:: is_trivially_constructible < X1 const&>::value, "");
static_assert(ala:: is_trivially_constructible < X1 volatile&>::value == std:: is_trivially_constructible < X1 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X1 const volatile&>::value == std:: is_trivially_constructible < X1 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X1 &&>::value == std:: is_trivially_constructible < X1 &&>::value, "");
static_assert(ala:: is_trivially_constructible < X1 const&&>::value == std:: is_trivially_constructible < X1 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < X1 volatile&&>::value == std:: is_trivially_constructible < X1 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X1 const volatile&&>::value == std:: is_trivially_constructible < X1 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X2 >::value == std:: is_trivially_constructible < X2 >::value, "");
static_assert(ala:: is_trivially_constructible < X2 const>::value == std:: is_trivially_constructible < X2 const>::value, "");
static_assert(ala:: is_trivially_constructible < X2 volatile>::value == std:: is_trivially_constructible < X2 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X2 const volatile>::value == std:: is_trivially_constructible < X2 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X2 *>::value == std:: is_trivially_constructible < X2 *>::value, "");
static_assert(ala:: is_trivially_constructible < X2 const*>::value == std:: is_trivially_constructible < X2 const*>::value, "");
static_assert(ala:: is_trivially_constructible < X2 volatile*>::value == std:: is_trivially_constructible < X2 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X2 const volatile*>::value == std:: is_trivially_constructible < X2 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X2 &>::value == std:: is_trivially_constructible < X2 &>::value, "");
static_assert(ala:: is_trivially_constructible < X2 const&>::value == std:: is_trivially_constructible < X2 const&>::value, "");
static_assert(ala:: is_trivially_constructible < X2 volatile&>::value == std:: is_trivially_constructible < X2 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X2 const volatile&>::value == std:: is_trivially_constructible < X2 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X2 &&>::value == std:: is_trivially_constructible < X2 &&>::value, "");
static_assert(ala:: is_trivially_constructible < X2 const&&>::value == std:: is_trivially_constructible < X2 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < X2 volatile&&>::value == std:: is_trivially_constructible < X2 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X2 const volatile&&>::value == std:: is_trivially_constructible < X2 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X3 >::value == std:: is_trivially_constructible < X3 >::value, "");
static_assert(ala:: is_trivially_constructible < X3 const>::value == std:: is_trivially_constructible < X3 const>::value, "");
static_assert(ala:: is_trivially_constructible < X3 volatile>::value == std:: is_trivially_constructible < X3 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X3 const volatile>::value == std:: is_trivially_constructible < X3 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X3 *>::value == std:: is_trivially_constructible < X3 *>::value, "");
static_assert(ala:: is_trivially_constructible < X3 const*>::value == std:: is_trivially_constructible < X3 const*>::value, "");
static_assert(ala:: is_trivially_constructible < X3 volatile*>::value == std:: is_trivially_constructible < X3 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X3 const volatile*>::value == std:: is_trivially_constructible < X3 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X3 &>::value == std:: is_trivially_constructible < X3 &>::value, "");
static_assert(ala:: is_trivially_constructible < X3 const&>::value == std:: is_trivially_constructible < X3 const&>::value, "");
static_assert(ala:: is_trivially_constructible < X3 volatile&>::value == std:: is_trivially_constructible < X3 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X3 const volatile&>::value == std:: is_trivially_constructible < X3 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X3 &&>::value == std:: is_trivially_constructible < X3 &&>::value, "");
static_assert(ala:: is_trivially_constructible < X3 const&&>::value == std:: is_trivially_constructible < X3 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < X3 volatile&&>::value == std:: is_trivially_constructible < X3 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X3 const volatile&&>::value == std:: is_trivially_constructible < X3 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X4 >::value == std:: is_trivially_constructible < X4 >::value, "");
static_assert(ala:: is_trivially_constructible < X4 const>::value == std:: is_trivially_constructible < X4 const>::value, "");
static_assert(ala:: is_trivially_constructible < X4 volatile>::value == std:: is_trivially_constructible < X4 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X4 const volatile>::value == std:: is_trivially_constructible < X4 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X4 *>::value == std:: is_trivially_constructible < X4 *>::value, "");
static_assert(ala:: is_trivially_constructible < X4 const*>::value == std:: is_trivially_constructible < X4 const*>::value, "");
static_assert(ala:: is_trivially_constructible < X4 volatile*>::value == std:: is_trivially_constructible < X4 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X4 const volatile*>::value == std:: is_trivially_constructible < X4 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X4 &>::value == std:: is_trivially_constructible < X4 &>::value, "");
static_assert(ala:: is_trivially_constructible < X4 const&>::value == std:: is_trivially_constructible < X4 const&>::value, "");
static_assert(ala:: is_trivially_constructible < X4 volatile&>::value == std:: is_trivially_constructible < X4 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X4 const volatile&>::value == std:: is_trivially_constructible < X4 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X4 &&>::value == std:: is_trivially_constructible < X4 &&>::value, "");
static_assert(ala:: is_trivially_constructible < X4 const&&>::value == std:: is_trivially_constructible < X4 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < X4 volatile&&>::value == std:: is_trivially_constructible < X4 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X4 const volatile&&>::value == std:: is_trivially_constructible < X4 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X5 >::value == std:: is_trivially_constructible < X5 >::value, "");
static_assert(ala:: is_trivially_constructible < X5 const>::value == std:: is_trivially_constructible < X5 const>::value, "");
static_assert(ala:: is_trivially_constructible < X5 volatile>::value == std:: is_trivially_constructible < X5 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X5 const volatile>::value == std:: is_trivially_constructible < X5 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X5 *>::value == std:: is_trivially_constructible < X5 *>::value, "");
static_assert(ala:: is_trivially_constructible < X5 const*>::value == std:: is_trivially_constructible < X5 const*>::value, "");
static_assert(ala:: is_trivially_constructible < X5 volatile*>::value == std:: is_trivially_constructible < X5 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X5 const volatile*>::value == std:: is_trivially_constructible < X5 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X5 &>::value == std:: is_trivially_constructible < X5 &>::value, "");
static_assert(ala:: is_trivially_constructible < X5 const&>::value == std:: is_trivially_constructible < X5 const&>::value, "");
static_assert(ala:: is_trivially_constructible < X5 volatile&>::value == std:: is_trivially_constructible < X5 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X5 const volatile&>::value == std:: is_trivially_constructible < X5 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X5 &&>::value == std:: is_trivially_constructible < X5 &&>::value, "");
static_assert(ala:: is_trivially_constructible < X5 const&&>::value == std:: is_trivially_constructible < X5 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < X5 volatile&&>::value == std:: is_trivially_constructible < X5 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X5 const volatile&&>::value == std:: is_trivially_constructible < X5 const volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X6 >::value == std:: is_trivially_constructible < X6 >::value, "");
static_assert(ala:: is_trivially_constructible < X6 const>::value == std:: is_trivially_constructible < X6 const>::value, "");
static_assert(ala:: is_trivially_constructible < X6 volatile>::value == std:: is_trivially_constructible < X6 volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X6 const volatile>::value == std:: is_trivially_constructible < X6 const volatile>::value, "");
static_assert(ala:: is_trivially_constructible < X6 *>::value == std:: is_trivially_constructible < X6 *>::value, "");
static_assert(ala:: is_trivially_constructible < X6 const*>::value == std:: is_trivially_constructible < X6 const*>::value, "");
static_assert(ala:: is_trivially_constructible < X6 volatile*>::value == std:: is_trivially_constructible < X6 volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X6 const volatile*>::value == std:: is_trivially_constructible < X6 const volatile*>::value, "");
static_assert(ala:: is_trivially_constructible < X6 &>::value == std:: is_trivially_constructible < X6 &>::value, "");
static_assert(ala:: is_trivially_constructible < X6 const&>::value == std:: is_trivially_constructible < X6 const&>::value, "");
static_assert(ala:: is_trivially_constructible < X6 volatile&>::value == std:: is_trivially_constructible < X6 volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X6 const volatile&>::value == std:: is_trivially_constructible < X6 const volatile&>::value, "");
static_assert(ala:: is_trivially_constructible < X6 &&>::value == std:: is_trivially_constructible < X6 &&>::value, "");
static_assert(ala:: is_trivially_constructible < X6 const&&>::value == std:: is_trivially_constructible < X6 const&&>::value, "");
static_assert(ala:: is_trivially_constructible < X6 volatile&&>::value == std:: is_trivially_constructible < X6 volatile&&>::value, "");
static_assert(ala:: is_trivially_constructible < X6 const volatile&&>::value == std:: is_trivially_constructible < X6 const volatile&&>::value, "");
 
static_assert(ala:: is_nothrow_constructible < void >::value == std:: is_nothrow_constructible < void >::value, "");
static_assert(ala:: is_nothrow_constructible < void const>::value == std:: is_nothrow_constructible < void const>::value, "");
static_assert(ala:: is_nothrow_constructible < void volatile>::value == std:: is_nothrow_constructible < void volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < void const volatile>::value == std:: is_nothrow_constructible < void const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < void *>::value == std:: is_nothrow_constructible < void *>::value, "");
static_assert(ala:: is_nothrow_constructible < void const*>::value == std:: is_nothrow_constructible < void const*>::value, "");
static_assert(ala:: is_nothrow_constructible < void volatile*>::value == std:: is_nothrow_constructible < void volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < void const volatile*>::value == std:: is_nothrow_constructible < void const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < char >::value == std:: is_nothrow_constructible < char >::value, "");
static_assert(ala:: is_nothrow_constructible < char const>::value == std:: is_nothrow_constructible < char const>::value, "");
static_assert(ala:: is_nothrow_constructible < char volatile>::value == std:: is_nothrow_constructible < char volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < char const volatile>::value == std:: is_nothrow_constructible < char const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < char *>::value == std:: is_nothrow_constructible < char *>::value, "");
static_assert(ala:: is_nothrow_constructible < char const*>::value == std:: is_nothrow_constructible < char const*>::value, "");
static_assert(ala:: is_nothrow_constructible < char volatile*>::value == std:: is_nothrow_constructible < char volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < char const volatile*>::value == std:: is_nothrow_constructible < char const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < char &>::value == std:: is_nothrow_constructible < char &>::value, "");
static_assert(ala:: is_nothrow_constructible < char const&>::value == std:: is_nothrow_constructible < char const&>::value, "");
static_assert(ala:: is_nothrow_constructible < char volatile&>::value == std:: is_nothrow_constructible < char volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < char const volatile&>::value == std:: is_nothrow_constructible < char const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < char &&>::value == std:: is_nothrow_constructible < char &&>::value, "");
static_assert(ala:: is_nothrow_constructible < char const&&>::value == std:: is_nothrow_constructible < char const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < char volatile&&>::value == std:: is_nothrow_constructible < char volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < char const volatile&&>::value == std:: is_nothrow_constructible < char const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < char [8]>::value == std:: is_nothrow_constructible < char [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char const [8]>::value == std:: is_nothrow_constructible < char const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char volatile [8]>::value == std:: is_nothrow_constructible < char volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char const volatile [8]>::value == std:: is_nothrow_constructible < char const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < int >::value == std:: is_nothrow_constructible < int >::value, "");
static_assert(ala:: is_nothrow_constructible < int const>::value == std:: is_nothrow_constructible < int const>::value, "");
static_assert(ala:: is_nothrow_constructible < int volatile>::value == std:: is_nothrow_constructible < int volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < int const volatile>::value == std:: is_nothrow_constructible < int const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < int *>::value == std:: is_nothrow_constructible < int *>::value, "");
static_assert(ala:: is_nothrow_constructible < int const*>::value == std:: is_nothrow_constructible < int const*>::value, "");
static_assert(ala:: is_nothrow_constructible < int volatile*>::value == std:: is_nothrow_constructible < int volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < int const volatile*>::value == std:: is_nothrow_constructible < int const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < int &>::value == std:: is_nothrow_constructible < int &>::value, "");
static_assert(ala:: is_nothrow_constructible < int const&>::value == std:: is_nothrow_constructible < int const&>::value, "");
static_assert(ala:: is_nothrow_constructible < int volatile&>::value == std:: is_nothrow_constructible < int volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < int const volatile&>::value == std:: is_nothrow_constructible < int const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < int &&>::value == std:: is_nothrow_constructible < int &&>::value, "");
static_assert(ala:: is_nothrow_constructible < int const&&>::value == std:: is_nothrow_constructible < int const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < int volatile&&>::value == std:: is_nothrow_constructible < int volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < int const volatile&&>::value == std:: is_nothrow_constructible < int const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < int [8]>::value == std:: is_nothrow_constructible < int [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < int const [8]>::value == std:: is_nothrow_constructible < int const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < int volatile [8]>::value == std:: is_nothrow_constructible < int volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < int const volatile [8]>::value == std:: is_nothrow_constructible < int const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long >::value == std:: is_nothrow_constructible < long >::value, "");
static_assert(ala:: is_nothrow_constructible < long const>::value == std:: is_nothrow_constructible < long const>::value, "");
static_assert(ala:: is_nothrow_constructible < long volatile>::value == std:: is_nothrow_constructible < long volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < long const volatile>::value == std:: is_nothrow_constructible < long const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < long *>::value == std:: is_nothrow_constructible < long *>::value, "");
static_assert(ala:: is_nothrow_constructible < long const*>::value == std:: is_nothrow_constructible < long const*>::value, "");
static_assert(ala:: is_nothrow_constructible < long volatile*>::value == std:: is_nothrow_constructible < long volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < long const volatile*>::value == std:: is_nothrow_constructible < long const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < long &>::value == std:: is_nothrow_constructible < long &>::value, "");
static_assert(ala:: is_nothrow_constructible < long const&>::value == std:: is_nothrow_constructible < long const&>::value, "");
static_assert(ala:: is_nothrow_constructible < long volatile&>::value == std:: is_nothrow_constructible < long volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < long const volatile&>::value == std:: is_nothrow_constructible < long const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < long &&>::value == std:: is_nothrow_constructible < long &&>::value, "");
static_assert(ala:: is_nothrow_constructible < long const&&>::value == std:: is_nothrow_constructible < long const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < long volatile&&>::value == std:: is_nothrow_constructible < long volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < long const volatile&&>::value == std:: is_nothrow_constructible < long const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < long [8]>::value == std:: is_nothrow_constructible < long [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long const [8]>::value == std:: is_nothrow_constructible < long const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long volatile [8]>::value == std:: is_nothrow_constructible < long volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long const volatile [8]>::value == std:: is_nothrow_constructible < long const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long long >::value == std:: is_nothrow_constructible < long long >::value, "");
static_assert(ala:: is_nothrow_constructible < long long const>::value == std:: is_nothrow_constructible < long long const>::value, "");
static_assert(ala:: is_nothrow_constructible < long long volatile>::value == std:: is_nothrow_constructible < long long volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < long long const volatile>::value == std:: is_nothrow_constructible < long long const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < long long *>::value == std:: is_nothrow_constructible < long long *>::value, "");
static_assert(ala:: is_nothrow_constructible < long long const*>::value == std:: is_nothrow_constructible < long long const*>::value, "");
static_assert(ala:: is_nothrow_constructible < long long volatile*>::value == std:: is_nothrow_constructible < long long volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < long long const volatile*>::value == std:: is_nothrow_constructible < long long const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < long long &>::value == std:: is_nothrow_constructible < long long &>::value, "");
static_assert(ala:: is_nothrow_constructible < long long const&>::value == std:: is_nothrow_constructible < long long const&>::value, "");
static_assert(ala:: is_nothrow_constructible < long long volatile&>::value == std:: is_nothrow_constructible < long long volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < long long const volatile&>::value == std:: is_nothrow_constructible < long long const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < long long &&>::value == std:: is_nothrow_constructible < long long &&>::value, "");
static_assert(ala:: is_nothrow_constructible < long long const&&>::value == std:: is_nothrow_constructible < long long const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < long long volatile&&>::value == std:: is_nothrow_constructible < long long volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < long long const volatile&&>::value == std:: is_nothrow_constructible < long long const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < long long [8]>::value == std:: is_nothrow_constructible < long long [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long long const [8]>::value == std:: is_nothrow_constructible < long long const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long long volatile [8]>::value == std:: is_nothrow_constructible < long long volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long long const volatile [8]>::value == std:: is_nothrow_constructible < long long const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < float >::value == std:: is_nothrow_constructible < float >::value, "");
static_assert(ala:: is_nothrow_constructible < float const>::value == std:: is_nothrow_constructible < float const>::value, "");
static_assert(ala:: is_nothrow_constructible < float volatile>::value == std:: is_nothrow_constructible < float volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < float const volatile>::value == std:: is_nothrow_constructible < float const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < float *>::value == std:: is_nothrow_constructible < float *>::value, "");
static_assert(ala:: is_nothrow_constructible < float const*>::value == std:: is_nothrow_constructible < float const*>::value, "");
static_assert(ala:: is_nothrow_constructible < float volatile*>::value == std:: is_nothrow_constructible < float volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < float const volatile*>::value == std:: is_nothrow_constructible < float const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < float &>::value == std:: is_nothrow_constructible < float &>::value, "");
static_assert(ala:: is_nothrow_constructible < float const&>::value == std:: is_nothrow_constructible < float const&>::value, "");
static_assert(ala:: is_nothrow_constructible < float volatile&>::value == std:: is_nothrow_constructible < float volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < float const volatile&>::value == std:: is_nothrow_constructible < float const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < float &&>::value == std:: is_nothrow_constructible < float &&>::value, "");
static_assert(ala:: is_nothrow_constructible < float const&&>::value == std:: is_nothrow_constructible < float const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < float volatile&&>::value == std:: is_nothrow_constructible < float volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < float const volatile&&>::value == std:: is_nothrow_constructible < float const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < float [8]>::value == std:: is_nothrow_constructible < float [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < float const [8]>::value == std:: is_nothrow_constructible < float const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < float volatile [8]>::value == std:: is_nothrow_constructible < float volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < float const volatile [8]>::value == std:: is_nothrow_constructible < float const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < double >::value == std:: is_nothrow_constructible < double >::value, "");
static_assert(ala:: is_nothrow_constructible < double const>::value == std:: is_nothrow_constructible < double const>::value, "");
static_assert(ala:: is_nothrow_constructible < double volatile>::value == std:: is_nothrow_constructible < double volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < double const volatile>::value == std:: is_nothrow_constructible < double const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < double *>::value == std:: is_nothrow_constructible < double *>::value, "");
static_assert(ala:: is_nothrow_constructible < double const*>::value == std:: is_nothrow_constructible < double const*>::value, "");
static_assert(ala:: is_nothrow_constructible < double volatile*>::value == std:: is_nothrow_constructible < double volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < double const volatile*>::value == std:: is_nothrow_constructible < double const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < double &>::value == std:: is_nothrow_constructible < double &>::value, "");
static_assert(ala:: is_nothrow_constructible < double const&>::value == std:: is_nothrow_constructible < double const&>::value, "");
static_assert(ala:: is_nothrow_constructible < double volatile&>::value == std:: is_nothrow_constructible < double volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < double const volatile&>::value == std:: is_nothrow_constructible < double const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < double &&>::value == std:: is_nothrow_constructible < double &&>::value, "");
static_assert(ala:: is_nothrow_constructible < double const&&>::value == std:: is_nothrow_constructible < double const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < double volatile&&>::value == std:: is_nothrow_constructible < double volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < double const volatile&&>::value == std:: is_nothrow_constructible < double const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < double [8]>::value == std:: is_nothrow_constructible < double [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < double const [8]>::value == std:: is_nothrow_constructible < double const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < double volatile [8]>::value == std:: is_nothrow_constructible < double volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < double const volatile [8]>::value == std:: is_nothrow_constructible < double const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long double >::value == std:: is_nothrow_constructible < long double >::value, "");
static_assert(ala:: is_nothrow_constructible < long double const>::value == std:: is_nothrow_constructible < long double const>::value, "");
static_assert(ala:: is_nothrow_constructible < long double volatile>::value == std:: is_nothrow_constructible < long double volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < long double const volatile>::value == std:: is_nothrow_constructible < long double const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < long double *>::value == std:: is_nothrow_constructible < long double *>::value, "");
static_assert(ala:: is_nothrow_constructible < long double const*>::value == std:: is_nothrow_constructible < long double const*>::value, "");
static_assert(ala:: is_nothrow_constructible < long double volatile*>::value == std:: is_nothrow_constructible < long double volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < long double const volatile*>::value == std:: is_nothrow_constructible < long double const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < long double &>::value == std:: is_nothrow_constructible < long double &>::value, "");
static_assert(ala:: is_nothrow_constructible < long double const&>::value == std:: is_nothrow_constructible < long double const&>::value, "");
static_assert(ala:: is_nothrow_constructible < long double volatile&>::value == std:: is_nothrow_constructible < long double volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < long double const volatile&>::value == std:: is_nothrow_constructible < long double const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < long double &&>::value == std:: is_nothrow_constructible < long double &&>::value, "");
static_assert(ala:: is_nothrow_constructible < long double const&&>::value == std:: is_nothrow_constructible < long double const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < long double volatile&&>::value == std:: is_nothrow_constructible < long double volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < long double const volatile&&>::value == std:: is_nothrow_constructible < long double const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < long double [8]>::value == std:: is_nothrow_constructible < long double [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long double const [8]>::value == std:: is_nothrow_constructible < long double const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long double volatile [8]>::value == std:: is_nothrow_constructible < long double volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < long double const volatile [8]>::value == std:: is_nothrow_constructible < long double const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t >::value == std:: is_nothrow_constructible < wchar_t >::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const>::value == std:: is_nothrow_constructible < wchar_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t volatile>::value == std:: is_nothrow_constructible < wchar_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const volatile>::value == std:: is_nothrow_constructible < wchar_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t *>::value == std:: is_nothrow_constructible < wchar_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const*>::value == std:: is_nothrow_constructible < wchar_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t volatile*>::value == std:: is_nothrow_constructible < wchar_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const volatile*>::value == std:: is_nothrow_constructible < wchar_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t &>::value == std:: is_nothrow_constructible < wchar_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const&>::value == std:: is_nothrow_constructible < wchar_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t volatile&>::value == std:: is_nothrow_constructible < wchar_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const volatile&>::value == std:: is_nothrow_constructible < wchar_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t &&>::value == std:: is_nothrow_constructible < wchar_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const&&>::value == std:: is_nothrow_constructible < wchar_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t volatile&&>::value == std:: is_nothrow_constructible < wchar_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const volatile&&>::value == std:: is_nothrow_constructible < wchar_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t [8]>::value == std:: is_nothrow_constructible < wchar_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const [8]>::value == std:: is_nothrow_constructible < wchar_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t volatile [8]>::value == std:: is_nothrow_constructible < wchar_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < wchar_t const volatile [8]>::value == std:: is_nothrow_constructible < wchar_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t >::value == std:: is_nothrow_constructible < char16_t >::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const>::value == std:: is_nothrow_constructible < char16_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t volatile>::value == std:: is_nothrow_constructible < char16_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const volatile>::value == std:: is_nothrow_constructible < char16_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t *>::value == std:: is_nothrow_constructible < char16_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const*>::value == std:: is_nothrow_constructible < char16_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t volatile*>::value == std:: is_nothrow_constructible < char16_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const volatile*>::value == std:: is_nothrow_constructible < char16_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t &>::value == std:: is_nothrow_constructible < char16_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const&>::value == std:: is_nothrow_constructible < char16_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t volatile&>::value == std:: is_nothrow_constructible < char16_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const volatile&>::value == std:: is_nothrow_constructible < char16_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t &&>::value == std:: is_nothrow_constructible < char16_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const&&>::value == std:: is_nothrow_constructible < char16_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t volatile&&>::value == std:: is_nothrow_constructible < char16_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const volatile&&>::value == std:: is_nothrow_constructible < char16_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t [8]>::value == std:: is_nothrow_constructible < char16_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const [8]>::value == std:: is_nothrow_constructible < char16_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t volatile [8]>::value == std:: is_nothrow_constructible < char16_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char16_t const volatile [8]>::value == std:: is_nothrow_constructible < char16_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t >::value == std:: is_nothrow_constructible < char32_t >::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const>::value == std:: is_nothrow_constructible < char32_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t volatile>::value == std:: is_nothrow_constructible < char32_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const volatile>::value == std:: is_nothrow_constructible < char32_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t *>::value == std:: is_nothrow_constructible < char32_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const*>::value == std:: is_nothrow_constructible < char32_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t volatile*>::value == std:: is_nothrow_constructible < char32_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const volatile*>::value == std:: is_nothrow_constructible < char32_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t &>::value == std:: is_nothrow_constructible < char32_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const&>::value == std:: is_nothrow_constructible < char32_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t volatile&>::value == std:: is_nothrow_constructible < char32_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const volatile&>::value == std:: is_nothrow_constructible < char32_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t &&>::value == std:: is_nothrow_constructible < char32_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const&&>::value == std:: is_nothrow_constructible < char32_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t volatile&&>::value == std:: is_nothrow_constructible < char32_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const volatile&&>::value == std:: is_nothrow_constructible < char32_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t [8]>::value == std:: is_nothrow_constructible < char32_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const [8]>::value == std:: is_nothrow_constructible < char32_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t volatile [8]>::value == std:: is_nothrow_constructible < char32_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < char32_t const volatile [8]>::value == std:: is_nothrow_constructible < char32_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t >::value == std:: is_nothrow_constructible < ala::int8_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const>::value == std:: is_nothrow_constructible < ala::int8_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t volatile>::value == std:: is_nothrow_constructible < ala::int8_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const volatile>::value == std:: is_nothrow_constructible < ala::int8_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t *>::value == std:: is_nothrow_constructible < ala::int8_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const*>::value == std:: is_nothrow_constructible < ala::int8_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t volatile*>::value == std:: is_nothrow_constructible < ala::int8_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const volatile*>::value == std:: is_nothrow_constructible < ala::int8_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t &>::value == std:: is_nothrow_constructible < ala::int8_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const&>::value == std:: is_nothrow_constructible < ala::int8_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t volatile&>::value == std:: is_nothrow_constructible < ala::int8_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const volatile&>::value == std:: is_nothrow_constructible < ala::int8_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t &&>::value == std:: is_nothrow_constructible < ala::int8_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const&&>::value == std:: is_nothrow_constructible < ala::int8_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t volatile&&>::value == std:: is_nothrow_constructible < ala::int8_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const volatile&&>::value == std:: is_nothrow_constructible < ala::int8_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t [8]>::value == std:: is_nothrow_constructible < ala::int8_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const [8]>::value == std:: is_nothrow_constructible < ala::int8_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t volatile [8]>::value == std:: is_nothrow_constructible < ala::int8_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int8_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::int8_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t >::value == std:: is_nothrow_constructible < ala::uint8_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const>::value == std:: is_nothrow_constructible < ala::uint8_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t volatile>::value == std:: is_nothrow_constructible < ala::uint8_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const volatile>::value == std:: is_nothrow_constructible < ala::uint8_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t *>::value == std:: is_nothrow_constructible < ala::uint8_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const*>::value == std:: is_nothrow_constructible < ala::uint8_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t volatile*>::value == std:: is_nothrow_constructible < ala::uint8_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const volatile*>::value == std:: is_nothrow_constructible < ala::uint8_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t &>::value == std:: is_nothrow_constructible < ala::uint8_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const&>::value == std:: is_nothrow_constructible < ala::uint8_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t volatile&>::value == std:: is_nothrow_constructible < ala::uint8_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const volatile&>::value == std:: is_nothrow_constructible < ala::uint8_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t &&>::value == std:: is_nothrow_constructible < ala::uint8_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const&&>::value == std:: is_nothrow_constructible < ala::uint8_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t volatile&&>::value == std:: is_nothrow_constructible < ala::uint8_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const volatile&&>::value == std:: is_nothrow_constructible < ala::uint8_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t [8]>::value == std:: is_nothrow_constructible < ala::uint8_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const [8]>::value == std:: is_nothrow_constructible < ala::uint8_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t volatile [8]>::value == std:: is_nothrow_constructible < ala::uint8_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint8_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::uint8_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t >::value == std:: is_nothrow_constructible < ala::int16_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const>::value == std:: is_nothrow_constructible < ala::int16_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t volatile>::value == std:: is_nothrow_constructible < ala::int16_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const volatile>::value == std:: is_nothrow_constructible < ala::int16_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t *>::value == std:: is_nothrow_constructible < ala::int16_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const*>::value == std:: is_nothrow_constructible < ala::int16_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t volatile*>::value == std:: is_nothrow_constructible < ala::int16_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const volatile*>::value == std:: is_nothrow_constructible < ala::int16_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t &>::value == std:: is_nothrow_constructible < ala::int16_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const&>::value == std:: is_nothrow_constructible < ala::int16_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t volatile&>::value == std:: is_nothrow_constructible < ala::int16_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const volatile&>::value == std:: is_nothrow_constructible < ala::int16_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t &&>::value == std:: is_nothrow_constructible < ala::int16_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const&&>::value == std:: is_nothrow_constructible < ala::int16_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t volatile&&>::value == std:: is_nothrow_constructible < ala::int16_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const volatile&&>::value == std:: is_nothrow_constructible < ala::int16_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t [8]>::value == std:: is_nothrow_constructible < ala::int16_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const [8]>::value == std:: is_nothrow_constructible < ala::int16_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t volatile [8]>::value == std:: is_nothrow_constructible < ala::int16_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int16_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::int16_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t >::value == std:: is_nothrow_constructible < ala::uint16_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const>::value == std:: is_nothrow_constructible < ala::uint16_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t volatile>::value == std:: is_nothrow_constructible < ala::uint16_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const volatile>::value == std:: is_nothrow_constructible < ala::uint16_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t *>::value == std:: is_nothrow_constructible < ala::uint16_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const*>::value == std:: is_nothrow_constructible < ala::uint16_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t volatile*>::value == std:: is_nothrow_constructible < ala::uint16_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const volatile*>::value == std:: is_nothrow_constructible < ala::uint16_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t &>::value == std:: is_nothrow_constructible < ala::uint16_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const&>::value == std:: is_nothrow_constructible < ala::uint16_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t volatile&>::value == std:: is_nothrow_constructible < ala::uint16_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const volatile&>::value == std:: is_nothrow_constructible < ala::uint16_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t &&>::value == std:: is_nothrow_constructible < ala::uint16_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const&&>::value == std:: is_nothrow_constructible < ala::uint16_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t volatile&&>::value == std:: is_nothrow_constructible < ala::uint16_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const volatile&&>::value == std:: is_nothrow_constructible < ala::uint16_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t [8]>::value == std:: is_nothrow_constructible < ala::uint16_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const [8]>::value == std:: is_nothrow_constructible < ala::uint16_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t volatile [8]>::value == std:: is_nothrow_constructible < ala::uint16_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint16_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::uint16_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t >::value == std:: is_nothrow_constructible < ala::int32_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const>::value == std:: is_nothrow_constructible < ala::int32_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t volatile>::value == std:: is_nothrow_constructible < ala::int32_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const volatile>::value == std:: is_nothrow_constructible < ala::int32_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t *>::value == std:: is_nothrow_constructible < ala::int32_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const*>::value == std:: is_nothrow_constructible < ala::int32_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t volatile*>::value == std:: is_nothrow_constructible < ala::int32_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const volatile*>::value == std:: is_nothrow_constructible < ala::int32_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t &>::value == std:: is_nothrow_constructible < ala::int32_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const&>::value == std:: is_nothrow_constructible < ala::int32_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t volatile&>::value == std:: is_nothrow_constructible < ala::int32_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const volatile&>::value == std:: is_nothrow_constructible < ala::int32_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t &&>::value == std:: is_nothrow_constructible < ala::int32_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const&&>::value == std:: is_nothrow_constructible < ala::int32_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t volatile&&>::value == std:: is_nothrow_constructible < ala::int32_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const volatile&&>::value == std:: is_nothrow_constructible < ala::int32_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t [8]>::value == std:: is_nothrow_constructible < ala::int32_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const [8]>::value == std:: is_nothrow_constructible < ala::int32_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t volatile [8]>::value == std:: is_nothrow_constructible < ala::int32_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int32_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::int32_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t >::value == std:: is_nothrow_constructible < ala::uint32_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const>::value == std:: is_nothrow_constructible < ala::uint32_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t volatile>::value == std:: is_nothrow_constructible < ala::uint32_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const volatile>::value == std:: is_nothrow_constructible < ala::uint32_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t *>::value == std:: is_nothrow_constructible < ala::uint32_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const*>::value == std:: is_nothrow_constructible < ala::uint32_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t volatile*>::value == std:: is_nothrow_constructible < ala::uint32_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const volatile*>::value == std:: is_nothrow_constructible < ala::uint32_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t &>::value == std:: is_nothrow_constructible < ala::uint32_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const&>::value == std:: is_nothrow_constructible < ala::uint32_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t volatile&>::value == std:: is_nothrow_constructible < ala::uint32_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const volatile&>::value == std:: is_nothrow_constructible < ala::uint32_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t &&>::value == std:: is_nothrow_constructible < ala::uint32_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const&&>::value == std:: is_nothrow_constructible < ala::uint32_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t volatile&&>::value == std:: is_nothrow_constructible < ala::uint32_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const volatile&&>::value == std:: is_nothrow_constructible < ala::uint32_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t [8]>::value == std:: is_nothrow_constructible < ala::uint32_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const [8]>::value == std:: is_nothrow_constructible < ala::uint32_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t volatile [8]>::value == std:: is_nothrow_constructible < ala::uint32_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint32_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::uint32_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t >::value == std:: is_nothrow_constructible < ala::int64_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const>::value == std:: is_nothrow_constructible < ala::int64_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t volatile>::value == std:: is_nothrow_constructible < ala::int64_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const volatile>::value == std:: is_nothrow_constructible < ala::int64_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t *>::value == std:: is_nothrow_constructible < ala::int64_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const*>::value == std:: is_nothrow_constructible < ala::int64_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t volatile*>::value == std:: is_nothrow_constructible < ala::int64_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const volatile*>::value == std:: is_nothrow_constructible < ala::int64_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t &>::value == std:: is_nothrow_constructible < ala::int64_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const&>::value == std:: is_nothrow_constructible < ala::int64_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t volatile&>::value == std:: is_nothrow_constructible < ala::int64_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const volatile&>::value == std:: is_nothrow_constructible < ala::int64_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t &&>::value == std:: is_nothrow_constructible < ala::int64_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const&&>::value == std:: is_nothrow_constructible < ala::int64_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t volatile&&>::value == std:: is_nothrow_constructible < ala::int64_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const volatile&&>::value == std:: is_nothrow_constructible < ala::int64_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t [8]>::value == std:: is_nothrow_constructible < ala::int64_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const [8]>::value == std:: is_nothrow_constructible < ala::int64_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t volatile [8]>::value == std:: is_nothrow_constructible < ala::int64_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::int64_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::int64_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t >::value == std:: is_nothrow_constructible < ala::uint64_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const>::value == std:: is_nothrow_constructible < ala::uint64_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t volatile>::value == std:: is_nothrow_constructible < ala::uint64_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const volatile>::value == std:: is_nothrow_constructible < ala::uint64_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t *>::value == std:: is_nothrow_constructible < ala::uint64_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const*>::value == std:: is_nothrow_constructible < ala::uint64_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t volatile*>::value == std:: is_nothrow_constructible < ala::uint64_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const volatile*>::value == std:: is_nothrow_constructible < ala::uint64_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t &>::value == std:: is_nothrow_constructible < ala::uint64_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const&>::value == std:: is_nothrow_constructible < ala::uint64_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t volatile&>::value == std:: is_nothrow_constructible < ala::uint64_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const volatile&>::value == std:: is_nothrow_constructible < ala::uint64_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t &&>::value == std:: is_nothrow_constructible < ala::uint64_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const&&>::value == std:: is_nothrow_constructible < ala::uint64_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t volatile&&>::value == std:: is_nothrow_constructible < ala::uint64_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const volatile&&>::value == std:: is_nothrow_constructible < ala::uint64_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t [8]>::value == std:: is_nothrow_constructible < ala::uint64_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const [8]>::value == std:: is_nothrow_constructible < ala::uint64_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t volatile [8]>::value == std:: is_nothrow_constructible < ala::uint64_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::uint64_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::uint64_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t >::value == std:: is_nothrow_constructible < ala::size_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const>::value == std:: is_nothrow_constructible < ala::size_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t volatile>::value == std:: is_nothrow_constructible < ala::size_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const volatile>::value == std:: is_nothrow_constructible < ala::size_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t *>::value == std:: is_nothrow_constructible < ala::size_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const*>::value == std:: is_nothrow_constructible < ala::size_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t volatile*>::value == std:: is_nothrow_constructible < ala::size_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const volatile*>::value == std:: is_nothrow_constructible < ala::size_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t &>::value == std:: is_nothrow_constructible < ala::size_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const&>::value == std:: is_nothrow_constructible < ala::size_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t volatile&>::value == std:: is_nothrow_constructible < ala::size_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const volatile&>::value == std:: is_nothrow_constructible < ala::size_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t &&>::value == std:: is_nothrow_constructible < ala::size_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const&&>::value == std:: is_nothrow_constructible < ala::size_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t volatile&&>::value == std:: is_nothrow_constructible < ala::size_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const volatile&&>::value == std:: is_nothrow_constructible < ala::size_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t [8]>::value == std:: is_nothrow_constructible < ala::size_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const [8]>::value == std:: is_nothrow_constructible < ala::size_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t volatile [8]>::value == std:: is_nothrow_constructible < ala::size_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::size_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::size_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t >::value == std:: is_nothrow_constructible < ala::ptrdiff_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t volatile>::value == std:: is_nothrow_constructible < ala::ptrdiff_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const volatile>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t *>::value == std:: is_nothrow_constructible < ala::ptrdiff_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const*>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t volatile*>::value == std:: is_nothrow_constructible < ala::ptrdiff_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const volatile*>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t &>::value == std:: is_nothrow_constructible < ala::ptrdiff_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const&>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t volatile&>::value == std:: is_nothrow_constructible < ala::ptrdiff_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const volatile&>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t &&>::value == std:: is_nothrow_constructible < ala::ptrdiff_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const&&>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t volatile&&>::value == std:: is_nothrow_constructible < ala::ptrdiff_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const volatile&&>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t [8]>::value == std:: is_nothrow_constructible < ala::ptrdiff_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const [8]>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t volatile [8]>::value == std:: is_nothrow_constructible < ala::ptrdiff_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::ptrdiff_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::ptrdiff_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t >::value == std:: is_nothrow_constructible < ala::intptr_t >::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const>::value == std:: is_nothrow_constructible < ala::intptr_t const>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t volatile>::value == std:: is_nothrow_constructible < ala::intptr_t volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const volatile>::value == std:: is_nothrow_constructible < ala::intptr_t const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t *>::value == std:: is_nothrow_constructible < ala::intptr_t *>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const*>::value == std:: is_nothrow_constructible < ala::intptr_t const*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t volatile*>::value == std:: is_nothrow_constructible < ala::intptr_t volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const volatile*>::value == std:: is_nothrow_constructible < ala::intptr_t const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t &>::value == std:: is_nothrow_constructible < ala::intptr_t &>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const&>::value == std:: is_nothrow_constructible < ala::intptr_t const&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t volatile&>::value == std:: is_nothrow_constructible < ala::intptr_t volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const volatile&>::value == std:: is_nothrow_constructible < ala::intptr_t const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t &&>::value == std:: is_nothrow_constructible < ala::intptr_t &&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const&&>::value == std:: is_nothrow_constructible < ala::intptr_t const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t volatile&&>::value == std:: is_nothrow_constructible < ala::intptr_t volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const volatile&&>::value == std:: is_nothrow_constructible < ala::intptr_t const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t [8]>::value == std:: is_nothrow_constructible < ala::intptr_t [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const [8]>::value == std:: is_nothrow_constructible < ala::intptr_t const [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t volatile [8]>::value == std:: is_nothrow_constructible < ala::intptr_t volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < ala::intptr_t const volatile [8]>::value == std:: is_nothrow_constructible < ala::intptr_t const volatile [8]>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 >::value == std:: is_nothrow_constructible < C0 >::value, "");
static_assert(ala:: is_nothrow_constructible < C0 const>::value == std:: is_nothrow_constructible < C0 const>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 volatile>::value == std:: is_nothrow_constructible < C0 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 const volatile>::value == std:: is_nothrow_constructible < C0 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 *>::value == std:: is_nothrow_constructible < C0 *>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 const*>::value == std:: is_nothrow_constructible < C0 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 volatile*>::value == std:: is_nothrow_constructible < C0 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 const volatile*>::value == std:: is_nothrow_constructible < C0 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 &>::value == std:: is_nothrow_constructible < C0 &>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 const&>::value == std:: is_nothrow_constructible < C0 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 volatile&>::value == std:: is_nothrow_constructible < C0 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 const volatile&>::value == std:: is_nothrow_constructible < C0 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 &&>::value == std:: is_nothrow_constructible < C0 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 const&&>::value == std:: is_nothrow_constructible < C0 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 volatile&&>::value == std:: is_nothrow_constructible < C0 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < C0 const volatile&&>::value == std:: is_nothrow_constructible < C0 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 >::value == std:: is_nothrow_constructible < C1 >::value, "");
static_assert(ala:: is_nothrow_constructible < C1 const>::value == std:: is_nothrow_constructible < C1 const>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 volatile>::value == std:: is_nothrow_constructible < C1 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 const volatile>::value == std:: is_nothrow_constructible < C1 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 *>::value == std:: is_nothrow_constructible < C1 *>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 const*>::value == std:: is_nothrow_constructible < C1 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 volatile*>::value == std:: is_nothrow_constructible < C1 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 const volatile*>::value == std:: is_nothrow_constructible < C1 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 &>::value == std:: is_nothrow_constructible < C1 &>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 const&>::value == std:: is_nothrow_constructible < C1 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 volatile&>::value == std:: is_nothrow_constructible < C1 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 const volatile&>::value == std:: is_nothrow_constructible < C1 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 &&>::value == std:: is_nothrow_constructible < C1 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 const&&>::value == std:: is_nothrow_constructible < C1 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 volatile&&>::value == std:: is_nothrow_constructible < C1 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < C1 const volatile&&>::value == std:: is_nothrow_constructible < C1 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 >::value == std:: is_nothrow_constructible < C2 >::value, "");
static_assert(ala:: is_nothrow_constructible < C2 const>::value == std:: is_nothrow_constructible < C2 const>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 volatile>::value == std:: is_nothrow_constructible < C2 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 const volatile>::value == std:: is_nothrow_constructible < C2 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 *>::value == std:: is_nothrow_constructible < C2 *>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 const*>::value == std:: is_nothrow_constructible < C2 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 volatile*>::value == std:: is_nothrow_constructible < C2 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 const volatile*>::value == std:: is_nothrow_constructible < C2 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 &>::value == std:: is_nothrow_constructible < C2 &>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 const&>::value == std:: is_nothrow_constructible < C2 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 volatile&>::value == std:: is_nothrow_constructible < C2 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 const volatile&>::value == std:: is_nothrow_constructible < C2 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 &&>::value == std:: is_nothrow_constructible < C2 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 const&&>::value == std:: is_nothrow_constructible < C2 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 volatile&&>::value == std:: is_nothrow_constructible < C2 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < C2 const volatile&&>::value == std:: is_nothrow_constructible < C2 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 >::value == std:: is_nothrow_constructible < S0 >::value, "");
static_assert(ala:: is_nothrow_constructible < S0 const>::value == std:: is_nothrow_constructible < S0 const>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 volatile>::value == std:: is_nothrow_constructible < S0 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 const volatile>::value == std:: is_nothrow_constructible < S0 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 *>::value == std:: is_nothrow_constructible < S0 *>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 const*>::value == std:: is_nothrow_constructible < S0 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 volatile*>::value == std:: is_nothrow_constructible < S0 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 const volatile*>::value == std:: is_nothrow_constructible < S0 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 &>::value == std:: is_nothrow_constructible < S0 &>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 const&>::value == std:: is_nothrow_constructible < S0 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 volatile&>::value == std:: is_nothrow_constructible < S0 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 const volatile&>::value == std:: is_nothrow_constructible < S0 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 &&>::value == std:: is_nothrow_constructible < S0 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 const&&>::value == std:: is_nothrow_constructible < S0 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 volatile&&>::value == std:: is_nothrow_constructible < S0 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < S0 const volatile&&>::value == std:: is_nothrow_constructible < S0 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 >::value == std:: is_nothrow_constructible < S1 >::value, "");
static_assert(ala:: is_nothrow_constructible < S1 const>::value == std:: is_nothrow_constructible < S1 const>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 volatile>::value == std:: is_nothrow_constructible < S1 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 const volatile>::value == std:: is_nothrow_constructible < S1 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 *>::value == std:: is_nothrow_constructible < S1 *>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 const*>::value == std:: is_nothrow_constructible < S1 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 volatile*>::value == std:: is_nothrow_constructible < S1 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 const volatile*>::value == std:: is_nothrow_constructible < S1 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 &>::value == std:: is_nothrow_constructible < S1 &>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 const&>::value == std:: is_nothrow_constructible < S1 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 volatile&>::value == std:: is_nothrow_constructible < S1 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 const volatile&>::value == std:: is_nothrow_constructible < S1 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 &&>::value == std:: is_nothrow_constructible < S1 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 const&&>::value == std:: is_nothrow_constructible < S1 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 volatile&&>::value == std:: is_nothrow_constructible < S1 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < S1 const volatile&&>::value == std:: is_nothrow_constructible < S1 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 >::value == std:: is_nothrow_constructible < S2 >::value, "");
static_assert(ala:: is_nothrow_constructible < S2 const>::value == std:: is_nothrow_constructible < S2 const>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 volatile>::value == std:: is_nothrow_constructible < S2 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 const volatile>::value == std:: is_nothrow_constructible < S2 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 *>::value == std:: is_nothrow_constructible < S2 *>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 const*>::value == std:: is_nothrow_constructible < S2 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 volatile*>::value == std:: is_nothrow_constructible < S2 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 const volatile*>::value == std:: is_nothrow_constructible < S2 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 &>::value == std:: is_nothrow_constructible < S2 &>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 const&>::value == std:: is_nothrow_constructible < S2 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 volatile&>::value == std:: is_nothrow_constructible < S2 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 const volatile&>::value == std:: is_nothrow_constructible < S2 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 &&>::value == std:: is_nothrow_constructible < S2 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 const&&>::value == std:: is_nothrow_constructible < S2 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 volatile&&>::value == std:: is_nothrow_constructible < S2 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < S2 const volatile&&>::value == std:: is_nothrow_constructible < S2 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < E >::value == std:: is_nothrow_constructible < E >::value, "");
static_assert(ala:: is_nothrow_constructible < E const>::value == std:: is_nothrow_constructible < E const>::value, "");
static_assert(ala:: is_nothrow_constructible < E volatile>::value == std:: is_nothrow_constructible < E volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < E const volatile>::value == std:: is_nothrow_constructible < E const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < E *>::value == std:: is_nothrow_constructible < E *>::value, "");
static_assert(ala:: is_nothrow_constructible < E const*>::value == std:: is_nothrow_constructible < E const*>::value, "");
static_assert(ala:: is_nothrow_constructible < E volatile*>::value == std:: is_nothrow_constructible < E volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < E const volatile*>::value == std:: is_nothrow_constructible < E const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < E &>::value == std:: is_nothrow_constructible < E &>::value, "");
static_assert(ala:: is_nothrow_constructible < E const&>::value == std:: is_nothrow_constructible < E const&>::value, "");
static_assert(ala:: is_nothrow_constructible < E volatile&>::value == std:: is_nothrow_constructible < E volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < E const volatile&>::value == std:: is_nothrow_constructible < E const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < E &&>::value == std:: is_nothrow_constructible < E &&>::value, "");
static_assert(ala:: is_nothrow_constructible < E const&&>::value == std:: is_nothrow_constructible < E const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < E volatile&&>::value == std:: is_nothrow_constructible < E volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < E const volatile&&>::value == std:: is_nothrow_constructible < E const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < U >::value == std:: is_nothrow_constructible < U >::value, "");
static_assert(ala:: is_nothrow_constructible < U const>::value == std:: is_nothrow_constructible < U const>::value, "");
static_assert(ala:: is_nothrow_constructible < U volatile>::value == std:: is_nothrow_constructible < U volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < U const volatile>::value == std:: is_nothrow_constructible < U const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < U *>::value == std:: is_nothrow_constructible < U *>::value, "");
static_assert(ala:: is_nothrow_constructible < U const*>::value == std:: is_nothrow_constructible < U const*>::value, "");
static_assert(ala:: is_nothrow_constructible < U volatile*>::value == std:: is_nothrow_constructible < U volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < U const volatile*>::value == std:: is_nothrow_constructible < U const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < U &>::value == std:: is_nothrow_constructible < U &>::value, "");
static_assert(ala:: is_nothrow_constructible < U const&>::value == std:: is_nothrow_constructible < U const&>::value, "");
static_assert(ala:: is_nothrow_constructible < U volatile&>::value == std:: is_nothrow_constructible < U volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < U const volatile&>::value == std:: is_nothrow_constructible < U const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < U &&>::value == std:: is_nothrow_constructible < U &&>::value, "");
static_assert(ala:: is_nothrow_constructible < U const&&>::value == std:: is_nothrow_constructible < U const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < U volatile&&>::value == std:: is_nothrow_constructible < U volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < U const volatile&&>::value == std:: is_nothrow_constructible < U const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 >::value == std:: is_nothrow_constructible < X0 >::value, "");
static_assert(ala:: is_nothrow_constructible < X0 const>::value == std:: is_nothrow_constructible < X0 const>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 volatile>::value == std:: is_nothrow_constructible < X0 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 const volatile>::value == std:: is_nothrow_constructible < X0 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 *>::value == std:: is_nothrow_constructible < X0 *>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 const*>::value == std:: is_nothrow_constructible < X0 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 volatile*>::value == std:: is_nothrow_constructible < X0 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 const volatile*>::value == std:: is_nothrow_constructible < X0 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 &>::value == std:: is_nothrow_constructible < X0 &>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 const&>::value == std:: is_nothrow_constructible < X0 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 volatile&>::value == std:: is_nothrow_constructible < X0 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 const volatile&>::value == std:: is_nothrow_constructible < X0 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 &&>::value == std:: is_nothrow_constructible < X0 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 const&&>::value == std:: is_nothrow_constructible < X0 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 volatile&&>::value == std:: is_nothrow_constructible < X0 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X0 const volatile&&>::value == std:: is_nothrow_constructible < X0 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 >::value == std:: is_nothrow_constructible < X1 >::value, "");
static_assert(ala:: is_nothrow_constructible < X1 const>::value == std:: is_nothrow_constructible < X1 const>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 volatile>::value == std:: is_nothrow_constructible < X1 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 const volatile>::value == std:: is_nothrow_constructible < X1 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 *>::value == std:: is_nothrow_constructible < X1 *>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 const*>::value == std:: is_nothrow_constructible < X1 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 volatile*>::value == std:: is_nothrow_constructible < X1 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 const volatile*>::value == std:: is_nothrow_constructible < X1 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 &>::value == std:: is_nothrow_constructible < X1 &>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 const&>::value == std:: is_nothrow_constructible < X1 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 volatile&>::value == std:: is_nothrow_constructible < X1 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 const volatile&>::value == std:: is_nothrow_constructible < X1 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 &&>::value == std:: is_nothrow_constructible < X1 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 const&&>::value == std:: is_nothrow_constructible < X1 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 volatile&&>::value == std:: is_nothrow_constructible < X1 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X1 const volatile&&>::value == std:: is_nothrow_constructible < X1 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 >::value == std:: is_nothrow_constructible < X2 >::value, "");
static_assert(ala:: is_nothrow_constructible < X2 const>::value == std:: is_nothrow_constructible < X2 const>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 volatile>::value == std:: is_nothrow_constructible < X2 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 const volatile>::value == std:: is_nothrow_constructible < X2 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 *>::value == std:: is_nothrow_constructible < X2 *>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 const*>::value == std:: is_nothrow_constructible < X2 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 volatile*>::value == std:: is_nothrow_constructible < X2 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 const volatile*>::value == std:: is_nothrow_constructible < X2 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 &>::value == std:: is_nothrow_constructible < X2 &>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 const&>::value == std:: is_nothrow_constructible < X2 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 volatile&>::value == std:: is_nothrow_constructible < X2 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 const volatile&>::value == std:: is_nothrow_constructible < X2 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 &&>::value == std:: is_nothrow_constructible < X2 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 const&&>::value == std:: is_nothrow_constructible < X2 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 volatile&&>::value == std:: is_nothrow_constructible < X2 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X2 const volatile&&>::value == std:: is_nothrow_constructible < X2 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 >::value == std:: is_nothrow_constructible < X3 >::value, "");
static_assert(ala:: is_nothrow_constructible < X3 const>::value == std:: is_nothrow_constructible < X3 const>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 volatile>::value == std:: is_nothrow_constructible < X3 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 const volatile>::value == std:: is_nothrow_constructible < X3 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 *>::value == std:: is_nothrow_constructible < X3 *>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 const*>::value == std:: is_nothrow_constructible < X3 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 volatile*>::value == std:: is_nothrow_constructible < X3 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 const volatile*>::value == std:: is_nothrow_constructible < X3 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 &>::value == std:: is_nothrow_constructible < X3 &>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 const&>::value == std:: is_nothrow_constructible < X3 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 volatile&>::value == std:: is_nothrow_constructible < X3 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 const volatile&>::value == std:: is_nothrow_constructible < X3 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 &&>::value == std:: is_nothrow_constructible < X3 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 const&&>::value == std:: is_nothrow_constructible < X3 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 volatile&&>::value == std:: is_nothrow_constructible < X3 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X3 const volatile&&>::value == std:: is_nothrow_constructible < X3 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 >::value == std:: is_nothrow_constructible < X4 >::value, "");
static_assert(ala:: is_nothrow_constructible < X4 const>::value == std:: is_nothrow_constructible < X4 const>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 volatile>::value == std:: is_nothrow_constructible < X4 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 const volatile>::value == std:: is_nothrow_constructible < X4 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 *>::value == std:: is_nothrow_constructible < X4 *>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 const*>::value == std:: is_nothrow_constructible < X4 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 volatile*>::value == std:: is_nothrow_constructible < X4 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 const volatile*>::value == std:: is_nothrow_constructible < X4 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 &>::value == std:: is_nothrow_constructible < X4 &>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 const&>::value == std:: is_nothrow_constructible < X4 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 volatile&>::value == std:: is_nothrow_constructible < X4 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 const volatile&>::value == std:: is_nothrow_constructible < X4 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 &&>::value == std:: is_nothrow_constructible < X4 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 const&&>::value == std:: is_nothrow_constructible < X4 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 volatile&&>::value == std:: is_nothrow_constructible < X4 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X4 const volatile&&>::value == std:: is_nothrow_constructible < X4 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 >::value == std:: is_nothrow_constructible < X5 >::value, "");
static_assert(ala:: is_nothrow_constructible < X5 const>::value == std:: is_nothrow_constructible < X5 const>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 volatile>::value == std:: is_nothrow_constructible < X5 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 const volatile>::value == std:: is_nothrow_constructible < X5 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 *>::value == std:: is_nothrow_constructible < X5 *>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 const*>::value == std:: is_nothrow_constructible < X5 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 volatile*>::value == std:: is_nothrow_constructible < X5 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 const volatile*>::value == std:: is_nothrow_constructible < X5 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 &>::value == std:: is_nothrow_constructible < X5 &>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 const&>::value == std:: is_nothrow_constructible < X5 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 volatile&>::value == std:: is_nothrow_constructible < X5 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 const volatile&>::value == std:: is_nothrow_constructible < X5 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 &&>::value == std:: is_nothrow_constructible < X5 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 const&&>::value == std:: is_nothrow_constructible < X5 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 volatile&&>::value == std:: is_nothrow_constructible < X5 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X5 const volatile&&>::value == std:: is_nothrow_constructible < X5 const volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 >::value == std:: is_nothrow_constructible < X6 >::value, "");
static_assert(ala:: is_nothrow_constructible < X6 const>::value == std:: is_nothrow_constructible < X6 const>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 volatile>::value == std:: is_nothrow_constructible < X6 volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 const volatile>::value == std:: is_nothrow_constructible < X6 const volatile>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 *>::value == std:: is_nothrow_constructible < X6 *>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 const*>::value == std:: is_nothrow_constructible < X6 const*>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 volatile*>::value == std:: is_nothrow_constructible < X6 volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 const volatile*>::value == std:: is_nothrow_constructible < X6 const volatile*>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 &>::value == std:: is_nothrow_constructible < X6 &>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 const&>::value == std:: is_nothrow_constructible < X6 const&>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 volatile&>::value == std:: is_nothrow_constructible < X6 volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 const volatile&>::value == std:: is_nothrow_constructible < X6 const volatile&>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 &&>::value == std:: is_nothrow_constructible < X6 &&>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 const&&>::value == std:: is_nothrow_constructible < X6 const&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 volatile&&>::value == std:: is_nothrow_constructible < X6 volatile&&>::value, "");
static_assert(ala:: is_nothrow_constructible < X6 const volatile&&>::value == std:: is_nothrow_constructible < X6 const volatile&&>::value, "");
}