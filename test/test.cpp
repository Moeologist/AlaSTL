#include "ala/type_traits.hpp"
#include <type_traits>
#include <vector>
#include <list>
#include <iostream>
#include "traits_macro.h"
#include "traits_type.h"

int main() {
static_assert(ala::is_copy_constructible_v<char> == std::is_copy_constructible<char>::value, "");
static_assert(ala::is_copy_constructible_v<char const> == std::is_copy_constructible<char const>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile> == std::is_copy_constructible<char volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile> == std::is_copy_constructible<char const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char *> == std::is_copy_constructible<char *>::value, "");
static_assert(ala::is_copy_constructible_v<char const *> == std::is_copy_constructible<char const *>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile *> == std::is_copy_constructible<char volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile *> == std::is_copy_constructible<char const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char &> == std::is_copy_constructible<char &>::value, "");
static_assert(ala::is_copy_constructible_v<char const &> == std::is_copy_constructible<char const &>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile &> == std::is_copy_constructible<char volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile &> == std::is_copy_constructible<char const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char &&> == std::is_copy_constructible<char &&>::value, "");
static_assert(ala::is_copy_constructible_v<char const &&> == std::is_copy_constructible<char const &&>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile &&> == std::is_copy_constructible<char volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile &&> == std::is_copy_constructible<char const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char[8]> == std::is_copy_constructible<char[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char const[8]> == std::is_copy_constructible<char const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile[8]> == std::is_copy_constructible<char volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile[8]> == std::is_copy_constructible<char const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int> == std::is_copy_constructible<int>::value, "");
static_assert(ala::is_copy_constructible_v<int const> == std::is_copy_constructible<int const>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile> == std::is_copy_constructible<int volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile> == std::is_copy_constructible<int const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int *> == std::is_copy_constructible<int *>::value, "");
static_assert(ala::is_copy_constructible_v<int const *> == std::is_copy_constructible<int const *>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile *> == std::is_copy_constructible<int volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile *> == std::is_copy_constructible<int const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int &> == std::is_copy_constructible<int &>::value, "");
static_assert(ala::is_copy_constructible_v<int const &> == std::is_copy_constructible<int const &>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile &> == std::is_copy_constructible<int volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile &> == std::is_copy_constructible<int const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int &&> == std::is_copy_constructible<int &&>::value, "");
static_assert(ala::is_copy_constructible_v<int const &&> == std::is_copy_constructible<int const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile &&> == std::is_copy_constructible<int volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile &&> == std::is_copy_constructible<int const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int[8]> == std::is_copy_constructible<int[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int const[8]> == std::is_copy_constructible<int const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile[8]> == std::is_copy_constructible<int volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile[8]> == std::is_copy_constructible<int const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long> == std::is_copy_constructible<long>::value, "");
static_assert(ala::is_copy_constructible_v<long const> == std::is_copy_constructible<long const>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile> == std::is_copy_constructible<long volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile> == std::is_copy_constructible<long const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long *> == std::is_copy_constructible<long *>::value, "");
static_assert(ala::is_copy_constructible_v<long const *> == std::is_copy_constructible<long const *>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile *> == std::is_copy_constructible<long volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile *> == std::is_copy_constructible<long const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long &> == std::is_copy_constructible<long &>::value, "");
static_assert(ala::is_copy_constructible_v<long const &> == std::is_copy_constructible<long const &>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile &> == std::is_copy_constructible<long volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile &> == std::is_copy_constructible<long const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long &&> == std::is_copy_constructible<long &&>::value, "");
static_assert(ala::is_copy_constructible_v<long const &&> == std::is_copy_constructible<long const &&>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile &&> == std::is_copy_constructible<long volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile &&> == std::is_copy_constructible<long const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long[8]> == std::is_copy_constructible<long[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long const[8]> == std::is_copy_constructible<long const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile[8]> == std::is_copy_constructible<long volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile[8]> == std::is_copy_constructible<long const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long long> == std::is_copy_constructible<long long>::value, "");
static_assert(ala::is_copy_constructible_v<long long const> == std::is_copy_constructible<long long const>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile> == std::is_copy_constructible<long long volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile> == std::is_copy_constructible<long long const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long long *> == std::is_copy_constructible<long long *>::value, "");
static_assert(ala::is_copy_constructible_v<long long const *> == std::is_copy_constructible<long long const *>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile *> == std::is_copy_constructible<long long volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile *> == std::is_copy_constructible<long long const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long long &> == std::is_copy_constructible<long long &>::value, "");
static_assert(ala::is_copy_constructible_v<long long const &> == std::is_copy_constructible<long long const &>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile &> == std::is_copy_constructible<long long volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile &> == std::is_copy_constructible<long long const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long long &&> == std::is_copy_constructible<long long &&>::value, "");
static_assert(ala::is_copy_constructible_v<long long const &&> == std::is_copy_constructible<long long const &&>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile &&> == std::is_copy_constructible<long long volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile &&> == std::is_copy_constructible<long long const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long long[8]> == std::is_copy_constructible<long long[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long long const[8]> == std::is_copy_constructible<long long const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile[8]> == std::is_copy_constructible<long long volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile[8]> == std::is_copy_constructible<long long const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<float> == std::is_copy_constructible<float>::value, "");
static_assert(ala::is_copy_constructible_v<float const> == std::is_copy_constructible<float const>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile> == std::is_copy_constructible<float volatile>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile> == std::is_copy_constructible<float const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<float *> == std::is_copy_constructible<float *>::value, "");
static_assert(ala::is_copy_constructible_v<float const *> == std::is_copy_constructible<float const *>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile *> == std::is_copy_constructible<float volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile *> == std::is_copy_constructible<float const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<float &> == std::is_copy_constructible<float &>::value, "");
static_assert(ala::is_copy_constructible_v<float const &> == std::is_copy_constructible<float const &>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile &> == std::is_copy_constructible<float volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile &> == std::is_copy_constructible<float const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<float &&> == std::is_copy_constructible<float &&>::value, "");
static_assert(ala::is_copy_constructible_v<float const &&> == std::is_copy_constructible<float const &&>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile &&> == std::is_copy_constructible<float volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile &&> == std::is_copy_constructible<float const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<float[8]> == std::is_copy_constructible<float[8]>::value, "");
static_assert(ala::is_copy_constructible_v<float const[8]> == std::is_copy_constructible<float const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile[8]> == std::is_copy_constructible<float volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile[8]> == std::is_copy_constructible<float const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<double> == std::is_copy_constructible<double>::value, "");
static_assert(ala::is_copy_constructible_v<double const> == std::is_copy_constructible<double const>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile> == std::is_copy_constructible<double volatile>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile> == std::is_copy_constructible<double const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<double *> == std::is_copy_constructible<double *>::value, "");
static_assert(ala::is_copy_constructible_v<double const *> == std::is_copy_constructible<double const *>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile *> == std::is_copy_constructible<double volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile *> == std::is_copy_constructible<double const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<double &> == std::is_copy_constructible<double &>::value, "");
static_assert(ala::is_copy_constructible_v<double const &> == std::is_copy_constructible<double const &>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile &> == std::is_copy_constructible<double volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile &> == std::is_copy_constructible<double const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<double &&> == std::is_copy_constructible<double &&>::value, "");
static_assert(ala::is_copy_constructible_v<double const &&> == std::is_copy_constructible<double const &&>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile &&> == std::is_copy_constructible<double volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile &&> == std::is_copy_constructible<double const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<double[8]> == std::is_copy_constructible<double[8]>::value, "");
static_assert(ala::is_copy_constructible_v<double const[8]> == std::is_copy_constructible<double const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile[8]> == std::is_copy_constructible<double volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile[8]> == std::is_copy_constructible<double const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long double> == std::is_copy_constructible<long double>::value, "");
static_assert(ala::is_copy_constructible_v<long double const> == std::is_copy_constructible<long double const>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile> == std::is_copy_constructible<long double volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile> == std::is_copy_constructible<long double const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long double *> == std::is_copy_constructible<long double *>::value, "");
static_assert(ala::is_copy_constructible_v<long double const *> == std::is_copy_constructible<long double const *>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile *> == std::is_copy_constructible<long double volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile *> == std::is_copy_constructible<long double const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long double &> == std::is_copy_constructible<long double &>::value, "");
static_assert(ala::is_copy_constructible_v<long double const &> == std::is_copy_constructible<long double const &>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile &> == std::is_copy_constructible<long double volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile &> == std::is_copy_constructible<long double const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long double &&> == std::is_copy_constructible<long double &&>::value, "");
static_assert(ala::is_copy_constructible_v<long double const &&> == std::is_copy_constructible<long double const &&>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile &&> == std::is_copy_constructible<long double volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile &&> == std::is_copy_constructible<long double const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long double[8]> == std::is_copy_constructible<long double[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long double const[8]> == std::is_copy_constructible<long double const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile[8]> == std::is_copy_constructible<long double volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile[8]> == std::is_copy_constructible<long double const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t> == std::is_copy_constructible<wchar_t>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const> == std::is_copy_constructible<wchar_t const>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile> == std::is_copy_constructible<wchar_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile> == std::is_copy_constructible<wchar_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t *> == std::is_copy_constructible<wchar_t *>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const *> == std::is_copy_constructible<wchar_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile *> == std::is_copy_constructible<wchar_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile *> == std::is_copy_constructible<wchar_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t &> == std::is_copy_constructible<wchar_t &>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const &> == std::is_copy_constructible<wchar_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile &> == std::is_copy_constructible<wchar_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile &> == std::is_copy_constructible<wchar_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t &&> == std::is_copy_constructible<wchar_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const &&> == std::is_copy_constructible<wchar_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile &&> == std::is_copy_constructible<wchar_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile &&> == std::is_copy_constructible<wchar_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t[8]> == std::is_copy_constructible<wchar_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const[8]> == std::is_copy_constructible<wchar_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile[8]> == std::is_copy_constructible<wchar_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile[8]> == std::is_copy_constructible<wchar_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t> == std::is_copy_constructible<char16_t>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const> == std::is_copy_constructible<char16_t const>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile> == std::is_copy_constructible<char16_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile> == std::is_copy_constructible<char16_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t *> == std::is_copy_constructible<char16_t *>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const *> == std::is_copy_constructible<char16_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile *> == std::is_copy_constructible<char16_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile *> == std::is_copy_constructible<char16_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t &> == std::is_copy_constructible<char16_t &>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const &> == std::is_copy_constructible<char16_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile &> == std::is_copy_constructible<char16_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile &> == std::is_copy_constructible<char16_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t &&> == std::is_copy_constructible<char16_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const &&> == std::is_copy_constructible<char16_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile &&> == std::is_copy_constructible<char16_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile &&> == std::is_copy_constructible<char16_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t[8]> == std::is_copy_constructible<char16_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const[8]> == std::is_copy_constructible<char16_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile[8]> == std::is_copy_constructible<char16_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile[8]> == std::is_copy_constructible<char16_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t> == std::is_copy_constructible<char32_t>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const> == std::is_copy_constructible<char32_t const>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile> == std::is_copy_constructible<char32_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile> == std::is_copy_constructible<char32_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t *> == std::is_copy_constructible<char32_t *>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const *> == std::is_copy_constructible<char32_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile *> == std::is_copy_constructible<char32_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile *> == std::is_copy_constructible<char32_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t &> == std::is_copy_constructible<char32_t &>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const &> == std::is_copy_constructible<char32_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile &> == std::is_copy_constructible<char32_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile &> == std::is_copy_constructible<char32_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t &&> == std::is_copy_constructible<char32_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const &&> == std::is_copy_constructible<char32_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile &&> == std::is_copy_constructible<char32_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile &&> == std::is_copy_constructible<char32_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t[8]> == std::is_copy_constructible<char32_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const[8]> == std::is_copy_constructible<char32_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile[8]> == std::is_copy_constructible<char32_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile[8]> == std::is_copy_constructible<char32_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t> == std::is_copy_constructible<int8_t>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const> == std::is_copy_constructible<int8_t const>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile> == std::is_copy_constructible<int8_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile> == std::is_copy_constructible<int8_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t *> == std::is_copy_constructible<int8_t *>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const *> == std::is_copy_constructible<int8_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile *> == std::is_copy_constructible<int8_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile *> == std::is_copy_constructible<int8_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t &> == std::is_copy_constructible<int8_t &>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const &> == std::is_copy_constructible<int8_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile &> == std::is_copy_constructible<int8_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile &> == std::is_copy_constructible<int8_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t &&> == std::is_copy_constructible<int8_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const &&> == std::is_copy_constructible<int8_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile &&> == std::is_copy_constructible<int8_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile &&> == std::is_copy_constructible<int8_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t[8]> == std::is_copy_constructible<int8_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const[8]> == std::is_copy_constructible<int8_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile[8]> == std::is_copy_constructible<int8_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile[8]> == std::is_copy_constructible<int8_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t> == std::is_copy_constructible<uint8_t>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const> == std::is_copy_constructible<uint8_t const>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile> == std::is_copy_constructible<uint8_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile> == std::is_copy_constructible<uint8_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t *> == std::is_copy_constructible<uint8_t *>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const *> == std::is_copy_constructible<uint8_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile *> == std::is_copy_constructible<uint8_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile *> == std::is_copy_constructible<uint8_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t &> == std::is_copy_constructible<uint8_t &>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const &> == std::is_copy_constructible<uint8_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile &> == std::is_copy_constructible<uint8_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile &> == std::is_copy_constructible<uint8_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t &&> == std::is_copy_constructible<uint8_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const &&> == std::is_copy_constructible<uint8_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile &&> == std::is_copy_constructible<uint8_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile &&> == std::is_copy_constructible<uint8_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t[8]> == std::is_copy_constructible<uint8_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const[8]> == std::is_copy_constructible<uint8_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile[8]> == std::is_copy_constructible<uint8_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile[8]> == std::is_copy_constructible<uint8_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t> == std::is_copy_constructible<int16_t>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const> == std::is_copy_constructible<int16_t const>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile> == std::is_copy_constructible<int16_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile> == std::is_copy_constructible<int16_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t *> == std::is_copy_constructible<int16_t *>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const *> == std::is_copy_constructible<int16_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile *> == std::is_copy_constructible<int16_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile *> == std::is_copy_constructible<int16_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t &> == std::is_copy_constructible<int16_t &>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const &> == std::is_copy_constructible<int16_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile &> == std::is_copy_constructible<int16_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile &> == std::is_copy_constructible<int16_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t &&> == std::is_copy_constructible<int16_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const &&> == std::is_copy_constructible<int16_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile &&> == std::is_copy_constructible<int16_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile &&> == std::is_copy_constructible<int16_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t[8]> == std::is_copy_constructible<int16_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const[8]> == std::is_copy_constructible<int16_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile[8]> == std::is_copy_constructible<int16_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile[8]> == std::is_copy_constructible<int16_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t> == std::is_copy_constructible<uint16_t>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const> == std::is_copy_constructible<uint16_t const>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile> == std::is_copy_constructible<uint16_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile> == std::is_copy_constructible<uint16_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t *> == std::is_copy_constructible<uint16_t *>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const *> == std::is_copy_constructible<uint16_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile *> == std::is_copy_constructible<uint16_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile *> == std::is_copy_constructible<uint16_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t &> == std::is_copy_constructible<uint16_t &>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const &> == std::is_copy_constructible<uint16_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile &> == std::is_copy_constructible<uint16_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile &> == std::is_copy_constructible<uint16_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t &&> == std::is_copy_constructible<uint16_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const &&> == std::is_copy_constructible<uint16_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile &&> == std::is_copy_constructible<uint16_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile &&> == std::is_copy_constructible<uint16_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t[8]> == std::is_copy_constructible<uint16_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const[8]> == std::is_copy_constructible<uint16_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile[8]> == std::is_copy_constructible<uint16_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile[8]> == std::is_copy_constructible<uint16_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t> == std::is_copy_constructible<int32_t>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const> == std::is_copy_constructible<int32_t const>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile> == std::is_copy_constructible<int32_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile> == std::is_copy_constructible<int32_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t *> == std::is_copy_constructible<int32_t *>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const *> == std::is_copy_constructible<int32_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile *> == std::is_copy_constructible<int32_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile *> == std::is_copy_constructible<int32_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t &> == std::is_copy_constructible<int32_t &>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const &> == std::is_copy_constructible<int32_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile &> == std::is_copy_constructible<int32_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile &> == std::is_copy_constructible<int32_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t &&> == std::is_copy_constructible<int32_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const &&> == std::is_copy_constructible<int32_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile &&> == std::is_copy_constructible<int32_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile &&> == std::is_copy_constructible<int32_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t[8]> == std::is_copy_constructible<int32_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const[8]> == std::is_copy_constructible<int32_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile[8]> == std::is_copy_constructible<int32_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile[8]> == std::is_copy_constructible<int32_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t> == std::is_copy_constructible<uint32_t>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const> == std::is_copy_constructible<uint32_t const>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile> == std::is_copy_constructible<uint32_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile> == std::is_copy_constructible<uint32_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t *> == std::is_copy_constructible<uint32_t *>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const *> == std::is_copy_constructible<uint32_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile *> == std::is_copy_constructible<uint32_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile *> == std::is_copy_constructible<uint32_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t &> == std::is_copy_constructible<uint32_t &>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const &> == std::is_copy_constructible<uint32_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile &> == std::is_copy_constructible<uint32_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile &> == std::is_copy_constructible<uint32_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t &&> == std::is_copy_constructible<uint32_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const &&> == std::is_copy_constructible<uint32_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile &&> == std::is_copy_constructible<uint32_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile &&> == std::is_copy_constructible<uint32_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t[8]> == std::is_copy_constructible<uint32_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const[8]> == std::is_copy_constructible<uint32_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile[8]> == std::is_copy_constructible<uint32_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile[8]> == std::is_copy_constructible<uint32_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t> == std::is_copy_constructible<int64_t>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const> == std::is_copy_constructible<int64_t const>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile> == std::is_copy_constructible<int64_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile> == std::is_copy_constructible<int64_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t *> == std::is_copy_constructible<int64_t *>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const *> == std::is_copy_constructible<int64_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile *> == std::is_copy_constructible<int64_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile *> == std::is_copy_constructible<int64_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t &> == std::is_copy_constructible<int64_t &>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const &> == std::is_copy_constructible<int64_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile &> == std::is_copy_constructible<int64_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile &> == std::is_copy_constructible<int64_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t &&> == std::is_copy_constructible<int64_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const &&> == std::is_copy_constructible<int64_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile &&> == std::is_copy_constructible<int64_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile &&> == std::is_copy_constructible<int64_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t[8]> == std::is_copy_constructible<int64_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const[8]> == std::is_copy_constructible<int64_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile[8]> == std::is_copy_constructible<int64_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile[8]> == std::is_copy_constructible<int64_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t> == std::is_copy_constructible<uint64_t>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const> == std::is_copy_constructible<uint64_t const>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile> == std::is_copy_constructible<uint64_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile> == std::is_copy_constructible<uint64_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t *> == std::is_copy_constructible<uint64_t *>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const *> == std::is_copy_constructible<uint64_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile *> == std::is_copy_constructible<uint64_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile *> == std::is_copy_constructible<uint64_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t &> == std::is_copy_constructible<uint64_t &>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const &> == std::is_copy_constructible<uint64_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile &> == std::is_copy_constructible<uint64_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile &> == std::is_copy_constructible<uint64_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t &&> == std::is_copy_constructible<uint64_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const &&> == std::is_copy_constructible<uint64_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile &&> == std::is_copy_constructible<uint64_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile &&> == std::is_copy_constructible<uint64_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t[8]> == std::is_copy_constructible<uint64_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const[8]> == std::is_copy_constructible<uint64_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile[8]> == std::is_copy_constructible<uint64_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile[8]> == std::is_copy_constructible<uint64_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<size_t> == std::is_copy_constructible<size_t>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const> == std::is_copy_constructible<size_t const>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile> == std::is_copy_constructible<size_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile> == std::is_copy_constructible<size_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<size_t *> == std::is_copy_constructible<size_t *>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const *> == std::is_copy_constructible<size_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile *> == std::is_copy_constructible<size_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile *> == std::is_copy_constructible<size_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<size_t &> == std::is_copy_constructible<size_t &>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const &> == std::is_copy_constructible<size_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile &> == std::is_copy_constructible<size_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile &> == std::is_copy_constructible<size_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<size_t &&> == std::is_copy_constructible<size_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const &&> == std::is_copy_constructible<size_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile &&> == std::is_copy_constructible<size_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile &&> == std::is_copy_constructible<size_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<size_t[8]> == std::is_copy_constructible<size_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const[8]> == std::is_copy_constructible<size_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile[8]> == std::is_copy_constructible<size_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile[8]> == std::is_copy_constructible<size_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t> == std::is_copy_constructible<ptrdiff_t>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const> == std::is_copy_constructible<ptrdiff_t const>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile> == std::is_copy_constructible<ptrdiff_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile> == std::is_copy_constructible<ptrdiff_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t *> == std::is_copy_constructible<ptrdiff_t *>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const *> == std::is_copy_constructible<ptrdiff_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile *> == std::is_copy_constructible<ptrdiff_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile *> == std::is_copy_constructible<ptrdiff_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t &> == std::is_copy_constructible<ptrdiff_t &>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const &> == std::is_copy_constructible<ptrdiff_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile &> == std::is_copy_constructible<ptrdiff_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile &> == std::is_copy_constructible<ptrdiff_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t &&> == std::is_copy_constructible<ptrdiff_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const &&> == std::is_copy_constructible<ptrdiff_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile &&> == std::is_copy_constructible<ptrdiff_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile &&> == std::is_copy_constructible<ptrdiff_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t[8]> == std::is_copy_constructible<ptrdiff_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const[8]> == std::is_copy_constructible<ptrdiff_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile[8]> == std::is_copy_constructible<ptrdiff_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile[8]> == std::is_copy_constructible<ptrdiff_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t> == std::is_copy_constructible<intptr_t>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const> == std::is_copy_constructible<intptr_t const>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile> == std::is_copy_constructible<intptr_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile> == std::is_copy_constructible<intptr_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t *> == std::is_copy_constructible<intptr_t *>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const *> == std::is_copy_constructible<intptr_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile *> == std::is_copy_constructible<intptr_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile *> == std::is_copy_constructible<intptr_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t &> == std::is_copy_constructible<intptr_t &>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const &> == std::is_copy_constructible<intptr_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile &> == std::is_copy_constructible<intptr_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile &> == std::is_copy_constructible<intptr_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t &&> == std::is_copy_constructible<intptr_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const &&> == std::is_copy_constructible<intptr_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile &&> == std::is_copy_constructible<intptr_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile &&> == std::is_copy_constructible<intptr_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t[8]> == std::is_copy_constructible<intptr_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const[8]> == std::is_copy_constructible<intptr_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile[8]> == std::is_copy_constructible<intptr_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile[8]> == std::is_copy_constructible<intptr_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<C0> == std::is_copy_constructible<C0>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const> == std::is_copy_constructible<C0 const>::value, "");
static_assert(ala::is_copy_constructible_v<C0 volatile> == std::is_copy_constructible<C0 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const volatile> == std::is_copy_constructible<C0 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C0 *> == std::is_copy_constructible<C0 *>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const *> == std::is_copy_constructible<C0 const *>::value, "");
static_assert(ala::is_copy_constructible_v<C0 volatile *> == std::is_copy_constructible<C0 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const volatile *> == std::is_copy_constructible<C0 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C0 &> == std::is_copy_constructible<C0 &>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const &> == std::is_copy_constructible<C0 const &>::value, "");
static_assert(ala::is_copy_constructible_v<C0 volatile &> == std::is_copy_constructible<C0 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const volatile &> == std::is_copy_constructible<C0 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C0 &&> == std::is_copy_constructible<C0 &&>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const &&> == std::is_copy_constructible<C0 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<C0 volatile &&> == std::is_copy_constructible<C0 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const volatile &&> == std::is_copy_constructible<C0 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C1> == std::is_copy_constructible<C1>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const> == std::is_copy_constructible<C1 const>::value, "");
static_assert(ala::is_copy_constructible_v<C1 volatile> == std::is_copy_constructible<C1 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const volatile> == std::is_copy_constructible<C1 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C1 *> == std::is_copy_constructible<C1 *>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const *> == std::is_copy_constructible<C1 const *>::value, "");
static_assert(ala::is_copy_constructible_v<C1 volatile *> == std::is_copy_constructible<C1 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const volatile *> == std::is_copy_constructible<C1 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C1 &> == std::is_copy_constructible<C1 &>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const &> == std::is_copy_constructible<C1 const &>::value, "");
static_assert(ala::is_copy_constructible_v<C1 volatile &> == std::is_copy_constructible<C1 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const volatile &> == std::is_copy_constructible<C1 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C1 &&> == std::is_copy_constructible<C1 &&>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const &&> == std::is_copy_constructible<C1 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<C1 volatile &&> == std::is_copy_constructible<C1 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const volatile &&> == std::is_copy_constructible<C1 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C2> == std::is_copy_constructible<C2>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const> == std::is_copy_constructible<C2 const>::value, "");
static_assert(ala::is_copy_constructible_v<C2 volatile> == std::is_copy_constructible<C2 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const volatile> == std::is_copy_constructible<C2 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C2 *> == std::is_copy_constructible<C2 *>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const *> == std::is_copy_constructible<C2 const *>::value, "");
static_assert(ala::is_copy_constructible_v<C2 volatile *> == std::is_copy_constructible<C2 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const volatile *> == std::is_copy_constructible<C2 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C2 &> == std::is_copy_constructible<C2 &>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const &> == std::is_copy_constructible<C2 const &>::value, "");
static_assert(ala::is_copy_constructible_v<C2 volatile &> == std::is_copy_constructible<C2 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const volatile &> == std::is_copy_constructible<C2 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C2 &&> == std::is_copy_constructible<C2 &&>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const &&> == std::is_copy_constructible<C2 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<C2 volatile &&> == std::is_copy_constructible<C2 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const volatile &&> == std::is_copy_constructible<C2 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S0> == std::is_copy_constructible<S0>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const> == std::is_copy_constructible<S0 const>::value, "");
static_assert(ala::is_copy_constructible_v<S0 volatile> == std::is_copy_constructible<S0 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const volatile> == std::is_copy_constructible<S0 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S0 *> == std::is_copy_constructible<S0 *>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const *> == std::is_copy_constructible<S0 const *>::value, "");
static_assert(ala::is_copy_constructible_v<S0 volatile *> == std::is_copy_constructible<S0 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const volatile *> == std::is_copy_constructible<S0 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S0 &> == std::is_copy_constructible<S0 &>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const &> == std::is_copy_constructible<S0 const &>::value, "");
static_assert(ala::is_copy_constructible_v<S0 volatile &> == std::is_copy_constructible<S0 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const volatile &> == std::is_copy_constructible<S0 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S0 &&> == std::is_copy_constructible<S0 &&>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const &&> == std::is_copy_constructible<S0 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<S0 volatile &&> == std::is_copy_constructible<S0 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const volatile &&> == std::is_copy_constructible<S0 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S1> == std::is_copy_constructible<S1>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const> == std::is_copy_constructible<S1 const>::value, "");
static_assert(ala::is_copy_constructible_v<S1 volatile> == std::is_copy_constructible<S1 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const volatile> == std::is_copy_constructible<S1 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S1 *> == std::is_copy_constructible<S1 *>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const *> == std::is_copy_constructible<S1 const *>::value, "");
static_assert(ala::is_copy_constructible_v<S1 volatile *> == std::is_copy_constructible<S1 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const volatile *> == std::is_copy_constructible<S1 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S1 &> == std::is_copy_constructible<S1 &>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const &> == std::is_copy_constructible<S1 const &>::value, "");
static_assert(ala::is_copy_constructible_v<S1 volatile &> == std::is_copy_constructible<S1 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const volatile &> == std::is_copy_constructible<S1 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S1 &&> == std::is_copy_constructible<S1 &&>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const &&> == std::is_copy_constructible<S1 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<S1 volatile &&> == std::is_copy_constructible<S1 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const volatile &&> == std::is_copy_constructible<S1 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S2> == std::is_copy_constructible<S2>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const> == std::is_copy_constructible<S2 const>::value, "");
static_assert(ala::is_copy_constructible_v<S2 volatile> == std::is_copy_constructible<S2 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const volatile> == std::is_copy_constructible<S2 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S2 *> == std::is_copy_constructible<S2 *>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const *> == std::is_copy_constructible<S2 const *>::value, "");
static_assert(ala::is_copy_constructible_v<S2 volatile *> == std::is_copy_constructible<S2 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const volatile *> == std::is_copy_constructible<S2 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S2 &> == std::is_copy_constructible<S2 &>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const &> == std::is_copy_constructible<S2 const &>::value, "");
static_assert(ala::is_copy_constructible_v<S2 volatile &> == std::is_copy_constructible<S2 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const volatile &> == std::is_copy_constructible<S2 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S2 &&> == std::is_copy_constructible<S2 &&>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const &&> == std::is_copy_constructible<S2 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<S2 volatile &&> == std::is_copy_constructible<S2 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const volatile &&> == std::is_copy_constructible<S2 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<E> == std::is_copy_constructible<E>::value, "");
static_assert(ala::is_copy_constructible_v<E const> == std::is_copy_constructible<E const>::value, "");
static_assert(ala::is_copy_constructible_v<E volatile> == std::is_copy_constructible<E volatile>::value, "");
static_assert(ala::is_copy_constructible_v<E const volatile> == std::is_copy_constructible<E const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<E *> == std::is_copy_constructible<E *>::value, "");
static_assert(ala::is_copy_constructible_v<E const *> == std::is_copy_constructible<E const *>::value, "");
static_assert(ala::is_copy_constructible_v<E volatile *> == std::is_copy_constructible<E volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<E const volatile *> == std::is_copy_constructible<E const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<E &> == std::is_copy_constructible<E &>::value, "");
static_assert(ala::is_copy_constructible_v<E const &> == std::is_copy_constructible<E const &>::value, "");
static_assert(ala::is_copy_constructible_v<E volatile &> == std::is_copy_constructible<E volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<E const volatile &> == std::is_copy_constructible<E const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<E &&> == std::is_copy_constructible<E &&>::value, "");
static_assert(ala::is_copy_constructible_v<E const &&> == std::is_copy_constructible<E const &&>::value, "");
static_assert(ala::is_copy_constructible_v<E volatile &&> == std::is_copy_constructible<E volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<E const volatile &&> == std::is_copy_constructible<E const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<U> == std::is_copy_constructible<U>::value, "");
static_assert(ala::is_copy_constructible_v<U const> == std::is_copy_constructible<U const>::value, "");
static_assert(ala::is_copy_constructible_v<U volatile> == std::is_copy_constructible<U volatile>::value, "");
static_assert(ala::is_copy_constructible_v<U const volatile> == std::is_copy_constructible<U const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<U *> == std::is_copy_constructible<U *>::value, "");
static_assert(ala::is_copy_constructible_v<U const *> == std::is_copy_constructible<U const *>::value, "");
static_assert(ala::is_copy_constructible_v<U volatile *> == std::is_copy_constructible<U volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<U const volatile *> == std::is_copy_constructible<U const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<U &> == std::is_copy_constructible<U &>::value, "");
static_assert(ala::is_copy_constructible_v<U const &> == std::is_copy_constructible<U const &>::value, "");
static_assert(ala::is_copy_constructible_v<U volatile &> == std::is_copy_constructible<U volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<U const volatile &> == std::is_copy_constructible<U const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<U &&> == std::is_copy_constructible<U &&>::value, "");
static_assert(ala::is_copy_constructible_v<U const &&> == std::is_copy_constructible<U const &&>::value, "");
static_assert(ala::is_copy_constructible_v<U volatile &&> == std::is_copy_constructible<U volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<U const volatile &&> == std::is_copy_constructible<U const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X0> == std::is_copy_constructible<X0>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const> == std::is_copy_constructible<X0 const>::value, "");
static_assert(ala::is_copy_constructible_v<X0 volatile> == std::is_copy_constructible<X0 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const volatile> == std::is_copy_constructible<X0 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X0 *> == std::is_copy_constructible<X0 *>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const *> == std::is_copy_constructible<X0 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X0 volatile *> == std::is_copy_constructible<X0 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const volatile *> == std::is_copy_constructible<X0 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X0 &> == std::is_copy_constructible<X0 &>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const &> == std::is_copy_constructible<X0 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X0 volatile &> == std::is_copy_constructible<X0 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const volatile &> == std::is_copy_constructible<X0 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X0 &&> == std::is_copy_constructible<X0 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const &&> == std::is_copy_constructible<X0 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X0 volatile &&> == std::is_copy_constructible<X0 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const volatile &&> == std::is_copy_constructible<X0 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X1> == std::is_copy_constructible<X1>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const> == std::is_copy_constructible<X1 const>::value, "");
static_assert(ala::is_copy_constructible_v<X1 volatile> == std::is_copy_constructible<X1 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const volatile> == std::is_copy_constructible<X1 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X1 *> == std::is_copy_constructible<X1 *>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const *> == std::is_copy_constructible<X1 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X1 volatile *> == std::is_copy_constructible<X1 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const volatile *> == std::is_copy_constructible<X1 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X1 &> == std::is_copy_constructible<X1 &>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const &> == std::is_copy_constructible<X1 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X1 volatile &> == std::is_copy_constructible<X1 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const volatile &> == std::is_copy_constructible<X1 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X1 &&> == std::is_copy_constructible<X1 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const &&> == std::is_copy_constructible<X1 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X1 volatile &&> == std::is_copy_constructible<X1 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const volatile &&> == std::is_copy_constructible<X1 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X2> == std::is_copy_constructible<X2>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const> == std::is_copy_constructible<X2 const>::value, "");
static_assert(ala::is_copy_constructible_v<X2 volatile> == std::is_copy_constructible<X2 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const volatile> == std::is_copy_constructible<X2 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X2 *> == std::is_copy_constructible<X2 *>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const *> == std::is_copy_constructible<X2 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X2 volatile *> == std::is_copy_constructible<X2 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const volatile *> == std::is_copy_constructible<X2 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X2 &> == std::is_copy_constructible<X2 &>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const &> == std::is_copy_constructible<X2 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X2 volatile &> == std::is_copy_constructible<X2 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const volatile &> == std::is_copy_constructible<X2 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X2 &&> == std::is_copy_constructible<X2 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const &&> == std::is_copy_constructible<X2 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X2 volatile &&> == std::is_copy_constructible<X2 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const volatile &&> == std::is_copy_constructible<X2 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X3> == std::is_copy_constructible<X3>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const> == std::is_copy_constructible<X3 const>::value, "");
static_assert(ala::is_copy_constructible_v<X3 volatile> == std::is_copy_constructible<X3 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const volatile> == std::is_copy_constructible<X3 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X3 *> == std::is_copy_constructible<X3 *>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const *> == std::is_copy_constructible<X3 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X3 volatile *> == std::is_copy_constructible<X3 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const volatile *> == std::is_copy_constructible<X3 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X3 &> == std::is_copy_constructible<X3 &>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const &> == std::is_copy_constructible<X3 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X3 volatile &> == std::is_copy_constructible<X3 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const volatile &> == std::is_copy_constructible<X3 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X3 &&> == std::is_copy_constructible<X3 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const &&> == std::is_copy_constructible<X3 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X3 volatile &&> == std::is_copy_constructible<X3 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const volatile &&> == std::is_copy_constructible<X3 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X4> == std::is_copy_constructible<X4>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const> == std::is_copy_constructible<X4 const>::value, "");
static_assert(ala::is_copy_constructible_v<X4 volatile> == std::is_copy_constructible<X4 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const volatile> == std::is_copy_constructible<X4 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X4 *> == std::is_copy_constructible<X4 *>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const *> == std::is_copy_constructible<X4 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X4 volatile *> == std::is_copy_constructible<X4 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const volatile *> == std::is_copy_constructible<X4 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X4 &> == std::is_copy_constructible<X4 &>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const &> == std::is_copy_constructible<X4 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X4 volatile &> == std::is_copy_constructible<X4 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const volatile &> == std::is_copy_constructible<X4 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X4 &&> == std::is_copy_constructible<X4 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const &&> == std::is_copy_constructible<X4 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X4 volatile &&> == std::is_copy_constructible<X4 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const volatile &&> == std::is_copy_constructible<X4 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X5> == std::is_copy_constructible<X5>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const> == std::is_copy_constructible<X5 const>::value, "");
static_assert(ala::is_copy_constructible_v<X5 volatile> == std::is_copy_constructible<X5 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const volatile> == std::is_copy_constructible<X5 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X5 *> == std::is_copy_constructible<X5 *>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const *> == std::is_copy_constructible<X5 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X5 volatile *> == std::is_copy_constructible<X5 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const volatile *> == std::is_copy_constructible<X5 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X5 &> == std::is_copy_constructible<X5 &>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const &> == std::is_copy_constructible<X5 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X5 volatile &> == std::is_copy_constructible<X5 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const volatile &> == std::is_copy_constructible<X5 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X5 &&> == std::is_copy_constructible<X5 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const &&> == std::is_copy_constructible<X5 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X5 volatile &&> == std::is_copy_constructible<X5 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const volatile &&> == std::is_copy_constructible<X5 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X6> == std::is_copy_constructible<X6>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const> == std::is_copy_constructible<X6 const>::value, "");
static_assert(ala::is_copy_constructible_v<X6 volatile> == std::is_copy_constructible<X6 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const volatile> == std::is_copy_constructible<X6 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X6 *> == std::is_copy_constructible<X6 *>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const *> == std::is_copy_constructible<X6 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X6 volatile *> == std::is_copy_constructible<X6 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const volatile *> == std::is_copy_constructible<X6 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X6 &> == std::is_copy_constructible<X6 &>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const &> == std::is_copy_constructible<X6 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X6 volatile &> == std::is_copy_constructible<X6 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const volatile &> == std::is_copy_constructible<X6 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X6 &&> == std::is_copy_constructible<X6 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const &&> == std::is_copy_constructible<X6 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X6 volatile &&> == std::is_copy_constructible<X6 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const volatile &&> == std::is_copy_constructible<X6 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<void> == std::is_copy_constructible<void>::value, "");
static_assert(ala::is_copy_constructible_v<void const> == std::is_copy_constructible<void const>::value, "");
static_assert(ala::is_copy_constructible_v<void volatile> == std::is_copy_constructible<void volatile>::value, "");
static_assert(ala::is_copy_constructible_v<void const volatile> == std::is_copy_constructible<void const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<void *> == std::is_copy_constructible<void *>::value, "");
static_assert(ala::is_copy_constructible_v<void const *> == std::is_copy_constructible<void const *>::value, "");
static_assert(ala::is_copy_constructible_v<void volatile *> == std::is_copy_constructible<void volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<void const volatile *> == std::is_copy_constructible<void const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char> == std::is_copy_constructible<char>::value, "");
static_assert(ala::is_copy_constructible_v<char const> == std::is_copy_constructible<char const>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile> == std::is_copy_constructible<char volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile> == std::is_copy_constructible<char const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char *> == std::is_copy_constructible<char *>::value, "");
static_assert(ala::is_copy_constructible_v<char const *> == std::is_copy_constructible<char const *>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile *> == std::is_copy_constructible<char volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile *> == std::is_copy_constructible<char const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char &> == std::is_copy_constructible<char &>::value, "");
static_assert(ala::is_copy_constructible_v<char const &> == std::is_copy_constructible<char const &>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile &> == std::is_copy_constructible<char volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile &> == std::is_copy_constructible<char const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char &&> == std::is_copy_constructible<char &&>::value, "");
static_assert(ala::is_copy_constructible_v<char const &&> == std::is_copy_constructible<char const &&>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile &&> == std::is_copy_constructible<char volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile &&> == std::is_copy_constructible<char const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char[8]> == std::is_copy_constructible<char[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char const[8]> == std::is_copy_constructible<char const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char volatile[8]> == std::is_copy_constructible<char volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char const volatile[8]> == std::is_copy_constructible<char const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int> == std::is_copy_constructible<int>::value, "");
static_assert(ala::is_copy_constructible_v<int const> == std::is_copy_constructible<int const>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile> == std::is_copy_constructible<int volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile> == std::is_copy_constructible<int const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int *> == std::is_copy_constructible<int *>::value, "");
static_assert(ala::is_copy_constructible_v<int const *> == std::is_copy_constructible<int const *>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile *> == std::is_copy_constructible<int volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile *> == std::is_copy_constructible<int const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int &> == std::is_copy_constructible<int &>::value, "");
static_assert(ala::is_copy_constructible_v<int const &> == std::is_copy_constructible<int const &>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile &> == std::is_copy_constructible<int volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile &> == std::is_copy_constructible<int const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int &&> == std::is_copy_constructible<int &&>::value, "");
static_assert(ala::is_copy_constructible_v<int const &&> == std::is_copy_constructible<int const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile &&> == std::is_copy_constructible<int volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile &&> == std::is_copy_constructible<int const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int[8]> == std::is_copy_constructible<int[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int const[8]> == std::is_copy_constructible<int const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int volatile[8]> == std::is_copy_constructible<int volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int const volatile[8]> == std::is_copy_constructible<int const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long> == std::is_copy_constructible<long>::value, "");
static_assert(ala::is_copy_constructible_v<long const> == std::is_copy_constructible<long const>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile> == std::is_copy_constructible<long volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile> == std::is_copy_constructible<long const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long *> == std::is_copy_constructible<long *>::value, "");
static_assert(ala::is_copy_constructible_v<long const *> == std::is_copy_constructible<long const *>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile *> == std::is_copy_constructible<long volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile *> == std::is_copy_constructible<long const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long &> == std::is_copy_constructible<long &>::value, "");
static_assert(ala::is_copy_constructible_v<long const &> == std::is_copy_constructible<long const &>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile &> == std::is_copy_constructible<long volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile &> == std::is_copy_constructible<long const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long &&> == std::is_copy_constructible<long &&>::value, "");
static_assert(ala::is_copy_constructible_v<long const &&> == std::is_copy_constructible<long const &&>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile &&> == std::is_copy_constructible<long volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile &&> == std::is_copy_constructible<long const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long[8]> == std::is_copy_constructible<long[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long const[8]> == std::is_copy_constructible<long const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long volatile[8]> == std::is_copy_constructible<long volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long const volatile[8]> == std::is_copy_constructible<long const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long long> == std::is_copy_constructible<long long>::value, "");
static_assert(ala::is_copy_constructible_v<long long const> == std::is_copy_constructible<long long const>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile> == std::is_copy_constructible<long long volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile> == std::is_copy_constructible<long long const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long long *> == std::is_copy_constructible<long long *>::value, "");
static_assert(ala::is_copy_constructible_v<long long const *> == std::is_copy_constructible<long long const *>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile *> == std::is_copy_constructible<long long volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile *> == std::is_copy_constructible<long long const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long long &> == std::is_copy_constructible<long long &>::value, "");
static_assert(ala::is_copy_constructible_v<long long const &> == std::is_copy_constructible<long long const &>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile &> == std::is_copy_constructible<long long volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile &> == std::is_copy_constructible<long long const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long long &&> == std::is_copy_constructible<long long &&>::value, "");
static_assert(ala::is_copy_constructible_v<long long const &&> == std::is_copy_constructible<long long const &&>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile &&> == std::is_copy_constructible<long long volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile &&> == std::is_copy_constructible<long long const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long long[8]> == std::is_copy_constructible<long long[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long long const[8]> == std::is_copy_constructible<long long const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long long volatile[8]> == std::is_copy_constructible<long long volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long long const volatile[8]> == std::is_copy_constructible<long long const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<float> == std::is_copy_constructible<float>::value, "");
static_assert(ala::is_copy_constructible_v<float const> == std::is_copy_constructible<float const>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile> == std::is_copy_constructible<float volatile>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile> == std::is_copy_constructible<float const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<float *> == std::is_copy_constructible<float *>::value, "");
static_assert(ala::is_copy_constructible_v<float const *> == std::is_copy_constructible<float const *>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile *> == std::is_copy_constructible<float volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile *> == std::is_copy_constructible<float const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<float &> == std::is_copy_constructible<float &>::value, "");
static_assert(ala::is_copy_constructible_v<float const &> == std::is_copy_constructible<float const &>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile &> == std::is_copy_constructible<float volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile &> == std::is_copy_constructible<float const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<float &&> == std::is_copy_constructible<float &&>::value, "");
static_assert(ala::is_copy_constructible_v<float const &&> == std::is_copy_constructible<float const &&>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile &&> == std::is_copy_constructible<float volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile &&> == std::is_copy_constructible<float const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<float[8]> == std::is_copy_constructible<float[8]>::value, "");
static_assert(ala::is_copy_constructible_v<float const[8]> == std::is_copy_constructible<float const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<float volatile[8]> == std::is_copy_constructible<float volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<float const volatile[8]> == std::is_copy_constructible<float const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<double> == std::is_copy_constructible<double>::value, "");
static_assert(ala::is_copy_constructible_v<double const> == std::is_copy_constructible<double const>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile> == std::is_copy_constructible<double volatile>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile> == std::is_copy_constructible<double const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<double *> == std::is_copy_constructible<double *>::value, "");
static_assert(ala::is_copy_constructible_v<double const *> == std::is_copy_constructible<double const *>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile *> == std::is_copy_constructible<double volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile *> == std::is_copy_constructible<double const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<double &> == std::is_copy_constructible<double &>::value, "");
static_assert(ala::is_copy_constructible_v<double const &> == std::is_copy_constructible<double const &>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile &> == std::is_copy_constructible<double volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile &> == std::is_copy_constructible<double const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<double &&> == std::is_copy_constructible<double &&>::value, "");
static_assert(ala::is_copy_constructible_v<double const &&> == std::is_copy_constructible<double const &&>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile &&> == std::is_copy_constructible<double volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile &&> == std::is_copy_constructible<double const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<double[8]> == std::is_copy_constructible<double[8]>::value, "");
static_assert(ala::is_copy_constructible_v<double const[8]> == std::is_copy_constructible<double const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<double volatile[8]> == std::is_copy_constructible<double volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<double const volatile[8]> == std::is_copy_constructible<double const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long double> == std::is_copy_constructible<long double>::value, "");
static_assert(ala::is_copy_constructible_v<long double const> == std::is_copy_constructible<long double const>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile> == std::is_copy_constructible<long double volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile> == std::is_copy_constructible<long double const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<long double *> == std::is_copy_constructible<long double *>::value, "");
static_assert(ala::is_copy_constructible_v<long double const *> == std::is_copy_constructible<long double const *>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile *> == std::is_copy_constructible<long double volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile *> == std::is_copy_constructible<long double const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<long double &> == std::is_copy_constructible<long double &>::value, "");
static_assert(ala::is_copy_constructible_v<long double const &> == std::is_copy_constructible<long double const &>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile &> == std::is_copy_constructible<long double volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile &> == std::is_copy_constructible<long double const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<long double &&> == std::is_copy_constructible<long double &&>::value, "");
static_assert(ala::is_copy_constructible_v<long double const &&> == std::is_copy_constructible<long double const &&>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile &&> == std::is_copy_constructible<long double volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile &&> == std::is_copy_constructible<long double const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<long double[8]> == std::is_copy_constructible<long double[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long double const[8]> == std::is_copy_constructible<long double const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long double volatile[8]> == std::is_copy_constructible<long double volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<long double const volatile[8]> == std::is_copy_constructible<long double const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t> == std::is_copy_constructible<wchar_t>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const> == std::is_copy_constructible<wchar_t const>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile> == std::is_copy_constructible<wchar_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile> == std::is_copy_constructible<wchar_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t *> == std::is_copy_constructible<wchar_t *>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const *> == std::is_copy_constructible<wchar_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile *> == std::is_copy_constructible<wchar_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile *> == std::is_copy_constructible<wchar_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t &> == std::is_copy_constructible<wchar_t &>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const &> == std::is_copy_constructible<wchar_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile &> == std::is_copy_constructible<wchar_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile &> == std::is_copy_constructible<wchar_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t &&> == std::is_copy_constructible<wchar_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const &&> == std::is_copy_constructible<wchar_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile &&> == std::is_copy_constructible<wchar_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile &&> == std::is_copy_constructible<wchar_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t[8]> == std::is_copy_constructible<wchar_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const[8]> == std::is_copy_constructible<wchar_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t volatile[8]> == std::is_copy_constructible<wchar_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<wchar_t const volatile[8]> == std::is_copy_constructible<wchar_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t> == std::is_copy_constructible<char16_t>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const> == std::is_copy_constructible<char16_t const>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile> == std::is_copy_constructible<char16_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile> == std::is_copy_constructible<char16_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t *> == std::is_copy_constructible<char16_t *>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const *> == std::is_copy_constructible<char16_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile *> == std::is_copy_constructible<char16_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile *> == std::is_copy_constructible<char16_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t &> == std::is_copy_constructible<char16_t &>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const &> == std::is_copy_constructible<char16_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile &> == std::is_copy_constructible<char16_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile &> == std::is_copy_constructible<char16_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t &&> == std::is_copy_constructible<char16_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const &&> == std::is_copy_constructible<char16_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile &&> == std::is_copy_constructible<char16_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile &&> == std::is_copy_constructible<char16_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t[8]> == std::is_copy_constructible<char16_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const[8]> == std::is_copy_constructible<char16_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t volatile[8]> == std::is_copy_constructible<char16_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char16_t const volatile[8]> == std::is_copy_constructible<char16_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t> == std::is_copy_constructible<char32_t>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const> == std::is_copy_constructible<char32_t const>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile> == std::is_copy_constructible<char32_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile> == std::is_copy_constructible<char32_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t *> == std::is_copy_constructible<char32_t *>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const *> == std::is_copy_constructible<char32_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile *> == std::is_copy_constructible<char32_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile *> == std::is_copy_constructible<char32_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t &> == std::is_copy_constructible<char32_t &>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const &> == std::is_copy_constructible<char32_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile &> == std::is_copy_constructible<char32_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile &> == std::is_copy_constructible<char32_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t &&> == std::is_copy_constructible<char32_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const &&> == std::is_copy_constructible<char32_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile &&> == std::is_copy_constructible<char32_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile &&> == std::is_copy_constructible<char32_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t[8]> == std::is_copy_constructible<char32_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const[8]> == std::is_copy_constructible<char32_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t volatile[8]> == std::is_copy_constructible<char32_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<char32_t const volatile[8]> == std::is_copy_constructible<char32_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t> == std::is_copy_constructible<int8_t>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const> == std::is_copy_constructible<int8_t const>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile> == std::is_copy_constructible<int8_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile> == std::is_copy_constructible<int8_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t *> == std::is_copy_constructible<int8_t *>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const *> == std::is_copy_constructible<int8_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile *> == std::is_copy_constructible<int8_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile *> == std::is_copy_constructible<int8_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t &> == std::is_copy_constructible<int8_t &>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const &> == std::is_copy_constructible<int8_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile &> == std::is_copy_constructible<int8_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile &> == std::is_copy_constructible<int8_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t &&> == std::is_copy_constructible<int8_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const &&> == std::is_copy_constructible<int8_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile &&> == std::is_copy_constructible<int8_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile &&> == std::is_copy_constructible<int8_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t[8]> == std::is_copy_constructible<int8_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const[8]> == std::is_copy_constructible<int8_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t volatile[8]> == std::is_copy_constructible<int8_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int8_t const volatile[8]> == std::is_copy_constructible<int8_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t> == std::is_copy_constructible<uint8_t>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const> == std::is_copy_constructible<uint8_t const>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile> == std::is_copy_constructible<uint8_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile> == std::is_copy_constructible<uint8_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t *> == std::is_copy_constructible<uint8_t *>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const *> == std::is_copy_constructible<uint8_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile *> == std::is_copy_constructible<uint8_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile *> == std::is_copy_constructible<uint8_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t &> == std::is_copy_constructible<uint8_t &>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const &> == std::is_copy_constructible<uint8_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile &> == std::is_copy_constructible<uint8_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile &> == std::is_copy_constructible<uint8_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t &&> == std::is_copy_constructible<uint8_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const &&> == std::is_copy_constructible<uint8_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile &&> == std::is_copy_constructible<uint8_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile &&> == std::is_copy_constructible<uint8_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t[8]> == std::is_copy_constructible<uint8_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const[8]> == std::is_copy_constructible<uint8_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t volatile[8]> == std::is_copy_constructible<uint8_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint8_t const volatile[8]> == std::is_copy_constructible<uint8_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t> == std::is_copy_constructible<int16_t>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const> == std::is_copy_constructible<int16_t const>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile> == std::is_copy_constructible<int16_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile> == std::is_copy_constructible<int16_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t *> == std::is_copy_constructible<int16_t *>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const *> == std::is_copy_constructible<int16_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile *> == std::is_copy_constructible<int16_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile *> == std::is_copy_constructible<int16_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t &> == std::is_copy_constructible<int16_t &>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const &> == std::is_copy_constructible<int16_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile &> == std::is_copy_constructible<int16_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile &> == std::is_copy_constructible<int16_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t &&> == std::is_copy_constructible<int16_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const &&> == std::is_copy_constructible<int16_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile &&> == std::is_copy_constructible<int16_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile &&> == std::is_copy_constructible<int16_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t[8]> == std::is_copy_constructible<int16_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const[8]> == std::is_copy_constructible<int16_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t volatile[8]> == std::is_copy_constructible<int16_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int16_t const volatile[8]> == std::is_copy_constructible<int16_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t> == std::is_copy_constructible<uint16_t>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const> == std::is_copy_constructible<uint16_t const>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile> == std::is_copy_constructible<uint16_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile> == std::is_copy_constructible<uint16_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t *> == std::is_copy_constructible<uint16_t *>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const *> == std::is_copy_constructible<uint16_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile *> == std::is_copy_constructible<uint16_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile *> == std::is_copy_constructible<uint16_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t &> == std::is_copy_constructible<uint16_t &>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const &> == std::is_copy_constructible<uint16_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile &> == std::is_copy_constructible<uint16_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile &> == std::is_copy_constructible<uint16_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t &&> == std::is_copy_constructible<uint16_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const &&> == std::is_copy_constructible<uint16_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile &&> == std::is_copy_constructible<uint16_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile &&> == std::is_copy_constructible<uint16_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t[8]> == std::is_copy_constructible<uint16_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const[8]> == std::is_copy_constructible<uint16_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t volatile[8]> == std::is_copy_constructible<uint16_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint16_t const volatile[8]> == std::is_copy_constructible<uint16_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t> == std::is_copy_constructible<int32_t>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const> == std::is_copy_constructible<int32_t const>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile> == std::is_copy_constructible<int32_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile> == std::is_copy_constructible<int32_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t *> == std::is_copy_constructible<int32_t *>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const *> == std::is_copy_constructible<int32_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile *> == std::is_copy_constructible<int32_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile *> == std::is_copy_constructible<int32_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t &> == std::is_copy_constructible<int32_t &>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const &> == std::is_copy_constructible<int32_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile &> == std::is_copy_constructible<int32_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile &> == std::is_copy_constructible<int32_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t &&> == std::is_copy_constructible<int32_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const &&> == std::is_copy_constructible<int32_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile &&> == std::is_copy_constructible<int32_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile &&> == std::is_copy_constructible<int32_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t[8]> == std::is_copy_constructible<int32_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const[8]> == std::is_copy_constructible<int32_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t volatile[8]> == std::is_copy_constructible<int32_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int32_t const volatile[8]> == std::is_copy_constructible<int32_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t> == std::is_copy_constructible<uint32_t>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const> == std::is_copy_constructible<uint32_t const>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile> == std::is_copy_constructible<uint32_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile> == std::is_copy_constructible<uint32_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t *> == std::is_copy_constructible<uint32_t *>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const *> == std::is_copy_constructible<uint32_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile *> == std::is_copy_constructible<uint32_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile *> == std::is_copy_constructible<uint32_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t &> == std::is_copy_constructible<uint32_t &>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const &> == std::is_copy_constructible<uint32_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile &> == std::is_copy_constructible<uint32_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile &> == std::is_copy_constructible<uint32_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t &&> == std::is_copy_constructible<uint32_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const &&> == std::is_copy_constructible<uint32_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile &&> == std::is_copy_constructible<uint32_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile &&> == std::is_copy_constructible<uint32_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t[8]> == std::is_copy_constructible<uint32_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const[8]> == std::is_copy_constructible<uint32_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t volatile[8]> == std::is_copy_constructible<uint32_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint32_t const volatile[8]> == std::is_copy_constructible<uint32_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t> == std::is_copy_constructible<int64_t>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const> == std::is_copy_constructible<int64_t const>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile> == std::is_copy_constructible<int64_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile> == std::is_copy_constructible<int64_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t *> == std::is_copy_constructible<int64_t *>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const *> == std::is_copy_constructible<int64_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile *> == std::is_copy_constructible<int64_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile *> == std::is_copy_constructible<int64_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t &> == std::is_copy_constructible<int64_t &>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const &> == std::is_copy_constructible<int64_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile &> == std::is_copy_constructible<int64_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile &> == std::is_copy_constructible<int64_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t &&> == std::is_copy_constructible<int64_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const &&> == std::is_copy_constructible<int64_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile &&> == std::is_copy_constructible<int64_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile &&> == std::is_copy_constructible<int64_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t[8]> == std::is_copy_constructible<int64_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const[8]> == std::is_copy_constructible<int64_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t volatile[8]> == std::is_copy_constructible<int64_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<int64_t const volatile[8]> == std::is_copy_constructible<int64_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t> == std::is_copy_constructible<uint64_t>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const> == std::is_copy_constructible<uint64_t const>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile> == std::is_copy_constructible<uint64_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile> == std::is_copy_constructible<uint64_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t *> == std::is_copy_constructible<uint64_t *>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const *> == std::is_copy_constructible<uint64_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile *> == std::is_copy_constructible<uint64_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile *> == std::is_copy_constructible<uint64_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t &> == std::is_copy_constructible<uint64_t &>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const &> == std::is_copy_constructible<uint64_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile &> == std::is_copy_constructible<uint64_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile &> == std::is_copy_constructible<uint64_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t &&> == std::is_copy_constructible<uint64_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const &&> == std::is_copy_constructible<uint64_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile &&> == std::is_copy_constructible<uint64_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile &&> == std::is_copy_constructible<uint64_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t[8]> == std::is_copy_constructible<uint64_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const[8]> == std::is_copy_constructible<uint64_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t volatile[8]> == std::is_copy_constructible<uint64_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<uint64_t const volatile[8]> == std::is_copy_constructible<uint64_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<size_t> == std::is_copy_constructible<size_t>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const> == std::is_copy_constructible<size_t const>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile> == std::is_copy_constructible<size_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile> == std::is_copy_constructible<size_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<size_t *> == std::is_copy_constructible<size_t *>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const *> == std::is_copy_constructible<size_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile *> == std::is_copy_constructible<size_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile *> == std::is_copy_constructible<size_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<size_t &> == std::is_copy_constructible<size_t &>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const &> == std::is_copy_constructible<size_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile &> == std::is_copy_constructible<size_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile &> == std::is_copy_constructible<size_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<size_t &&> == std::is_copy_constructible<size_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const &&> == std::is_copy_constructible<size_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile &&> == std::is_copy_constructible<size_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile &&> == std::is_copy_constructible<size_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<size_t[8]> == std::is_copy_constructible<size_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const[8]> == std::is_copy_constructible<size_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<size_t volatile[8]> == std::is_copy_constructible<size_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<size_t const volatile[8]> == std::is_copy_constructible<size_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t> == std::is_copy_constructible<ptrdiff_t>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const> == std::is_copy_constructible<ptrdiff_t const>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile> == std::is_copy_constructible<ptrdiff_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile> == std::is_copy_constructible<ptrdiff_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t *> == std::is_copy_constructible<ptrdiff_t *>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const *> == std::is_copy_constructible<ptrdiff_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile *> == std::is_copy_constructible<ptrdiff_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile *> == std::is_copy_constructible<ptrdiff_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t &> == std::is_copy_constructible<ptrdiff_t &>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const &> == std::is_copy_constructible<ptrdiff_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile &> == std::is_copy_constructible<ptrdiff_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile &> == std::is_copy_constructible<ptrdiff_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t &&> == std::is_copy_constructible<ptrdiff_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const &&> == std::is_copy_constructible<ptrdiff_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile &&> == std::is_copy_constructible<ptrdiff_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile &&> == std::is_copy_constructible<ptrdiff_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t[8]> == std::is_copy_constructible<ptrdiff_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const[8]> == std::is_copy_constructible<ptrdiff_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t volatile[8]> == std::is_copy_constructible<ptrdiff_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<ptrdiff_t const volatile[8]> == std::is_copy_constructible<ptrdiff_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t> == std::is_copy_constructible<intptr_t>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const> == std::is_copy_constructible<intptr_t const>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile> == std::is_copy_constructible<intptr_t volatile>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile> == std::is_copy_constructible<intptr_t const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t *> == std::is_copy_constructible<intptr_t *>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const *> == std::is_copy_constructible<intptr_t const *>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile *> == std::is_copy_constructible<intptr_t volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile *> == std::is_copy_constructible<intptr_t const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t &> == std::is_copy_constructible<intptr_t &>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const &> == std::is_copy_constructible<intptr_t const &>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile &> == std::is_copy_constructible<intptr_t volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile &> == std::is_copy_constructible<intptr_t const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t &&> == std::is_copy_constructible<intptr_t &&>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const &&> == std::is_copy_constructible<intptr_t const &&>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile &&> == std::is_copy_constructible<intptr_t volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile &&> == std::is_copy_constructible<intptr_t const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t[8]> == std::is_copy_constructible<intptr_t[8]>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const[8]> == std::is_copy_constructible<intptr_t const[8]>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t volatile[8]> == std::is_copy_constructible<intptr_t volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<intptr_t const volatile[8]> == std::is_copy_constructible<intptr_t const volatile[8]>::value, "");
static_assert(ala::is_copy_constructible_v<C0> == std::is_copy_constructible<C0>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const> == std::is_copy_constructible<C0 const>::value, "");
static_assert(ala::is_copy_constructible_v<C0 volatile> == std::is_copy_constructible<C0 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const volatile> == std::is_copy_constructible<C0 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C0 *> == std::is_copy_constructible<C0 *>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const *> == std::is_copy_constructible<C0 const *>::value, "");
static_assert(ala::is_copy_constructible_v<C0 volatile *> == std::is_copy_constructible<C0 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const volatile *> == std::is_copy_constructible<C0 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C0 &> == std::is_copy_constructible<C0 &>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const &> == std::is_copy_constructible<C0 const &>::value, "");
static_assert(ala::is_copy_constructible_v<C0 volatile &> == std::is_copy_constructible<C0 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const volatile &> == std::is_copy_constructible<C0 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C0 &&> == std::is_copy_constructible<C0 &&>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const &&> == std::is_copy_constructible<C0 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<C0 volatile &&> == std::is_copy_constructible<C0 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C0 const volatile &&> == std::is_copy_constructible<C0 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C1> == std::is_copy_constructible<C1>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const> == std::is_copy_constructible<C1 const>::value, "");
static_assert(ala::is_copy_constructible_v<C1 volatile> == std::is_copy_constructible<C1 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const volatile> == std::is_copy_constructible<C1 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C1 *> == std::is_copy_constructible<C1 *>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const *> == std::is_copy_constructible<C1 const *>::value, "");
static_assert(ala::is_copy_constructible_v<C1 volatile *> == std::is_copy_constructible<C1 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const volatile *> == std::is_copy_constructible<C1 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C1 &> == std::is_copy_constructible<C1 &>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const &> == std::is_copy_constructible<C1 const &>::value, "");
static_assert(ala::is_copy_constructible_v<C1 volatile &> == std::is_copy_constructible<C1 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const volatile &> == std::is_copy_constructible<C1 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C1 &&> == std::is_copy_constructible<C1 &&>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const &&> == std::is_copy_constructible<C1 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<C1 volatile &&> == std::is_copy_constructible<C1 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C1 const volatile &&> == std::is_copy_constructible<C1 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C2> == std::is_copy_constructible<C2>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const> == std::is_copy_constructible<C2 const>::value, "");
static_assert(ala::is_copy_constructible_v<C2 volatile> == std::is_copy_constructible<C2 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const volatile> == std::is_copy_constructible<C2 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<C2 *> == std::is_copy_constructible<C2 *>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const *> == std::is_copy_constructible<C2 const *>::value, "");
static_assert(ala::is_copy_constructible_v<C2 volatile *> == std::is_copy_constructible<C2 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const volatile *> == std::is_copy_constructible<C2 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<C2 &> == std::is_copy_constructible<C2 &>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const &> == std::is_copy_constructible<C2 const &>::value, "");
static_assert(ala::is_copy_constructible_v<C2 volatile &> == std::is_copy_constructible<C2 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const volatile &> == std::is_copy_constructible<C2 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<C2 &&> == std::is_copy_constructible<C2 &&>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const &&> == std::is_copy_constructible<C2 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<C2 volatile &&> == std::is_copy_constructible<C2 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<C2 const volatile &&> == std::is_copy_constructible<C2 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S0> == std::is_copy_constructible<S0>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const> == std::is_copy_constructible<S0 const>::value, "");
static_assert(ala::is_copy_constructible_v<S0 volatile> == std::is_copy_constructible<S0 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const volatile> == std::is_copy_constructible<S0 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S0 *> == std::is_copy_constructible<S0 *>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const *> == std::is_copy_constructible<S0 const *>::value, "");
static_assert(ala::is_copy_constructible_v<S0 volatile *> == std::is_copy_constructible<S0 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const volatile *> == std::is_copy_constructible<S0 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S0 &> == std::is_copy_constructible<S0 &>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const &> == std::is_copy_constructible<S0 const &>::value, "");
static_assert(ala::is_copy_constructible_v<S0 volatile &> == std::is_copy_constructible<S0 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const volatile &> == std::is_copy_constructible<S0 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S0 &&> == std::is_copy_constructible<S0 &&>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const &&> == std::is_copy_constructible<S0 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<S0 volatile &&> == std::is_copy_constructible<S0 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S0 const volatile &&> == std::is_copy_constructible<S0 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S1> == std::is_copy_constructible<S1>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const> == std::is_copy_constructible<S1 const>::value, "");
static_assert(ala::is_copy_constructible_v<S1 volatile> == std::is_copy_constructible<S1 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const volatile> == std::is_copy_constructible<S1 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S1 *> == std::is_copy_constructible<S1 *>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const *> == std::is_copy_constructible<S1 const *>::value, "");
static_assert(ala::is_copy_constructible_v<S1 volatile *> == std::is_copy_constructible<S1 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const volatile *> == std::is_copy_constructible<S1 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S1 &> == std::is_copy_constructible<S1 &>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const &> == std::is_copy_constructible<S1 const &>::value, "");
static_assert(ala::is_copy_constructible_v<S1 volatile &> == std::is_copy_constructible<S1 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const volatile &> == std::is_copy_constructible<S1 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S1 &&> == std::is_copy_constructible<S1 &&>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const &&> == std::is_copy_constructible<S1 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<S1 volatile &&> == std::is_copy_constructible<S1 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S1 const volatile &&> == std::is_copy_constructible<S1 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S2> == std::is_copy_constructible<S2>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const> == std::is_copy_constructible<S2 const>::value, "");
static_assert(ala::is_copy_constructible_v<S2 volatile> == std::is_copy_constructible<S2 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const volatile> == std::is_copy_constructible<S2 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<S2 *> == std::is_copy_constructible<S2 *>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const *> == std::is_copy_constructible<S2 const *>::value, "");
static_assert(ala::is_copy_constructible_v<S2 volatile *> == std::is_copy_constructible<S2 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const volatile *> == std::is_copy_constructible<S2 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<S2 &> == std::is_copy_constructible<S2 &>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const &> == std::is_copy_constructible<S2 const &>::value, "");
static_assert(ala::is_copy_constructible_v<S2 volatile &> == std::is_copy_constructible<S2 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const volatile &> == std::is_copy_constructible<S2 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<S2 &&> == std::is_copy_constructible<S2 &&>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const &&> == std::is_copy_constructible<S2 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<S2 volatile &&> == std::is_copy_constructible<S2 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<S2 const volatile &&> == std::is_copy_constructible<S2 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<E> == std::is_copy_constructible<E>::value, "");
static_assert(ala::is_copy_constructible_v<E const> == std::is_copy_constructible<E const>::value, "");
static_assert(ala::is_copy_constructible_v<E volatile> == std::is_copy_constructible<E volatile>::value, "");
static_assert(ala::is_copy_constructible_v<E const volatile> == std::is_copy_constructible<E const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<E *> == std::is_copy_constructible<E *>::value, "");
static_assert(ala::is_copy_constructible_v<E const *> == std::is_copy_constructible<E const *>::value, "");
static_assert(ala::is_copy_constructible_v<E volatile *> == std::is_copy_constructible<E volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<E const volatile *> == std::is_copy_constructible<E const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<E &> == std::is_copy_constructible<E &>::value, "");
static_assert(ala::is_copy_constructible_v<E const &> == std::is_copy_constructible<E const &>::value, "");
static_assert(ala::is_copy_constructible_v<E volatile &> == std::is_copy_constructible<E volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<E const volatile &> == std::is_copy_constructible<E const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<E &&> == std::is_copy_constructible<E &&>::value, "");
static_assert(ala::is_copy_constructible_v<E const &&> == std::is_copy_constructible<E const &&>::value, "");
static_assert(ala::is_copy_constructible_v<E volatile &&> == std::is_copy_constructible<E volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<E const volatile &&> == std::is_copy_constructible<E const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<U> == std::is_copy_constructible<U>::value, "");
static_assert(ala::is_copy_constructible_v<U const> == std::is_copy_constructible<U const>::value, "");
static_assert(ala::is_copy_constructible_v<U volatile> == std::is_copy_constructible<U volatile>::value, "");
static_assert(ala::is_copy_constructible_v<U const volatile> == std::is_copy_constructible<U const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<U *> == std::is_copy_constructible<U *>::value, "");
static_assert(ala::is_copy_constructible_v<U const *> == std::is_copy_constructible<U const *>::value, "");
static_assert(ala::is_copy_constructible_v<U volatile *> == std::is_copy_constructible<U volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<U const volatile *> == std::is_copy_constructible<U const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<U &> == std::is_copy_constructible<U &>::value, "");
static_assert(ala::is_copy_constructible_v<U const &> == std::is_copy_constructible<U const &>::value, "");
static_assert(ala::is_copy_constructible_v<U volatile &> == std::is_copy_constructible<U volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<U const volatile &> == std::is_copy_constructible<U const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<U &&> == std::is_copy_constructible<U &&>::value, "");
static_assert(ala::is_copy_constructible_v<U const &&> == std::is_copy_constructible<U const &&>::value, "");
static_assert(ala::is_copy_constructible_v<U volatile &&> == std::is_copy_constructible<U volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<U const volatile &&> == std::is_copy_constructible<U const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X0> == std::is_copy_constructible<X0>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const> == std::is_copy_constructible<X0 const>::value, "");
static_assert(ala::is_copy_constructible_v<X0 volatile> == std::is_copy_constructible<X0 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const volatile> == std::is_copy_constructible<X0 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X0 *> == std::is_copy_constructible<X0 *>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const *> == std::is_copy_constructible<X0 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X0 volatile *> == std::is_copy_constructible<X0 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const volatile *> == std::is_copy_constructible<X0 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X0 &> == std::is_copy_constructible<X0 &>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const &> == std::is_copy_constructible<X0 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X0 volatile &> == std::is_copy_constructible<X0 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const volatile &> == std::is_copy_constructible<X0 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X0 &&> == std::is_copy_constructible<X0 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const &&> == std::is_copy_constructible<X0 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X0 volatile &&> == std::is_copy_constructible<X0 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X0 const volatile &&> == std::is_copy_constructible<X0 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X1> == std::is_copy_constructible<X1>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const> == std::is_copy_constructible<X1 const>::value, "");
static_assert(ala::is_copy_constructible_v<X1 volatile> == std::is_copy_constructible<X1 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const volatile> == std::is_copy_constructible<X1 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X1 *> == std::is_copy_constructible<X1 *>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const *> == std::is_copy_constructible<X1 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X1 volatile *> == std::is_copy_constructible<X1 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const volatile *> == std::is_copy_constructible<X1 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X1 &> == std::is_copy_constructible<X1 &>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const &> == std::is_copy_constructible<X1 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X1 volatile &> == std::is_copy_constructible<X1 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const volatile &> == std::is_copy_constructible<X1 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X1 &&> == std::is_copy_constructible<X1 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const &&> == std::is_copy_constructible<X1 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X1 volatile &&> == std::is_copy_constructible<X1 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X1 const volatile &&> == std::is_copy_constructible<X1 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X2> == std::is_copy_constructible<X2>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const> == std::is_copy_constructible<X2 const>::value, "");
static_assert(ala::is_copy_constructible_v<X2 volatile> == std::is_copy_constructible<X2 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const volatile> == std::is_copy_constructible<X2 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X2 *> == std::is_copy_constructible<X2 *>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const *> == std::is_copy_constructible<X2 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X2 volatile *> == std::is_copy_constructible<X2 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const volatile *> == std::is_copy_constructible<X2 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X2 &> == std::is_copy_constructible<X2 &>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const &> == std::is_copy_constructible<X2 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X2 volatile &> == std::is_copy_constructible<X2 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const volatile &> == std::is_copy_constructible<X2 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X2 &&> == std::is_copy_constructible<X2 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const &&> == std::is_copy_constructible<X2 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X2 volatile &&> == std::is_copy_constructible<X2 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X2 const volatile &&> == std::is_copy_constructible<X2 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X3> == std::is_copy_constructible<X3>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const> == std::is_copy_constructible<X3 const>::value, "");
static_assert(ala::is_copy_constructible_v<X3 volatile> == std::is_copy_constructible<X3 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const volatile> == std::is_copy_constructible<X3 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X3 *> == std::is_copy_constructible<X3 *>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const *> == std::is_copy_constructible<X3 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X3 volatile *> == std::is_copy_constructible<X3 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const volatile *> == std::is_copy_constructible<X3 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X3 &> == std::is_copy_constructible<X3 &>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const &> == std::is_copy_constructible<X3 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X3 volatile &> == std::is_copy_constructible<X3 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const volatile &> == std::is_copy_constructible<X3 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X3 &&> == std::is_copy_constructible<X3 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const &&> == std::is_copy_constructible<X3 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X3 volatile &&> == std::is_copy_constructible<X3 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X3 const volatile &&> == std::is_copy_constructible<X3 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X4> == std::is_copy_constructible<X4>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const> == std::is_copy_constructible<X4 const>::value, "");
static_assert(ala::is_copy_constructible_v<X4 volatile> == std::is_copy_constructible<X4 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const volatile> == std::is_copy_constructible<X4 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X4 *> == std::is_copy_constructible<X4 *>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const *> == std::is_copy_constructible<X4 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X4 volatile *> == std::is_copy_constructible<X4 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const volatile *> == std::is_copy_constructible<X4 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X4 &> == std::is_copy_constructible<X4 &>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const &> == std::is_copy_constructible<X4 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X4 volatile &> == std::is_copy_constructible<X4 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const volatile &> == std::is_copy_constructible<X4 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X4 &&> == std::is_copy_constructible<X4 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const &&> == std::is_copy_constructible<X4 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X4 volatile &&> == std::is_copy_constructible<X4 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X4 const volatile &&> == std::is_copy_constructible<X4 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X5> == std::is_copy_constructible<X5>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const> == std::is_copy_constructible<X5 const>::value, "");
static_assert(ala::is_copy_constructible_v<X5 volatile> == std::is_copy_constructible<X5 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const volatile> == std::is_copy_constructible<X5 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X5 *> == std::is_copy_constructible<X5 *>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const *> == std::is_copy_constructible<X5 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X5 volatile *> == std::is_copy_constructible<X5 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const volatile *> == std::is_copy_constructible<X5 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X5 &> == std::is_copy_constructible<X5 &>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const &> == std::is_copy_constructible<X5 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X5 volatile &> == std::is_copy_constructible<X5 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const volatile &> == std::is_copy_constructible<X5 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X5 &&> == std::is_copy_constructible<X5 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const &&> == std::is_copy_constructible<X5 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X5 volatile &&> == std::is_copy_constructible<X5 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X5 const volatile &&> == std::is_copy_constructible<X5 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X6> == std::is_copy_constructible<X6>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const> == std::is_copy_constructible<X6 const>::value, "");
static_assert(ala::is_copy_constructible_v<X6 volatile> == std::is_copy_constructible<X6 volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const volatile> == std::is_copy_constructible<X6 const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<X6 *> == std::is_copy_constructible<X6 *>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const *> == std::is_copy_constructible<X6 const *>::value, "");
static_assert(ala::is_copy_constructible_v<X6 volatile *> == std::is_copy_constructible<X6 volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const volatile *> == std::is_copy_constructible<X6 const volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<X6 &> == std::is_copy_constructible<X6 &>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const &> == std::is_copy_constructible<X6 const &>::value, "");
static_assert(ala::is_copy_constructible_v<X6 volatile &> == std::is_copy_constructible<X6 volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const volatile &> == std::is_copy_constructible<X6 const volatile &>::value, "");
static_assert(ala::is_copy_constructible_v<X6 &&> == std::is_copy_constructible<X6 &&>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const &&> == std::is_copy_constructible<X6 const &&>::value, "");
static_assert(ala::is_copy_constructible_v<X6 volatile &&> == std::is_copy_constructible<X6 volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<X6 const volatile &&> == std::is_copy_constructible<X6 const volatile &&>::value, "");
static_assert(ala::is_copy_constructible_v<void> == std::is_copy_constructible<void>::value, "");
static_assert(ala::is_copy_constructible_v<void const> == std::is_copy_constructible<void const>::value, "");
static_assert(ala::is_copy_constructible_v<void volatile> == std::is_copy_constructible<void volatile>::value, "");
static_assert(ala::is_copy_constructible_v<void const volatile> == std::is_copy_constructible<void const volatile>::value, "");
static_assert(ala::is_copy_constructible_v<void *> == std::is_copy_constructible<void *>::value, "");
static_assert(ala::is_copy_constructible_v<void const *> == std::is_copy_constructible<void const *>::value, "");
static_assert(ala::is_copy_constructible_v<void volatile *> == std::is_copy_constructible<void volatile *>::value, "");
static_assert(ala::is_copy_constructible_v<void const volatile *> == std::is_copy_constructible<void const volatile *>::value, "");
}